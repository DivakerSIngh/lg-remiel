
--------------------------------------------------------
--  File created - Wednesday-January-08-2025   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table VTS_GATE_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_GATE_MASTER_TBL" 
   (	"GATEID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"GATETYPE" NVARCHAR2(20), 
	"GATENO" NUMBER(10,0), 
	"TENANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_MENU_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_MENU_MASTER_TBL" 
   (	"MENUID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MENUCODE" NVARCHAR2(20), 
	"MENUDESCRIPTION" NVARCHAR2(200), 
	"IS_ACTIVE" NUMBER(1,0), 
	"TENANTID" NUMBER(10,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE, 
	"MENUURL" NVARCHAR2(200), 
	"PARENTID" NUMBER(10,0), 
	"ICON" NVARCHAR2(100), 
	"SEQUENCE" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_MENU_ROLE_MAPPING_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_MENU_ROLE_MAPPING_TBL" 
   (	"MENUROLEID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MENUID" NUMBER(10,0), 
	"ROLEID" NUMBER(10,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_PLANT_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_PLANT_MASTER_TBL" 
   (	"PLANTID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PLANTCODE" NVARCHAR2(20), 
	"PLANTDESCRIPTION" NVARCHAR2(200), 
	"TENANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_PLANT_ROLE_MAPPING_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_PLANT_ROLE_MAPPING_TBL" 
   (	"PLANTROLEID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PLANT_ID" NUMBER(10,0), 
	"ROLE_ID" NUMBER(10,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_RAMP_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_RAMP_MASTER_TBL" 
   (	"RAMPID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"RAMPCODE" NVARCHAR2(20), 
	"RAMPDESCRIPTION" NVARCHAR2(200), 
	"RAMPPLANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_REMARKS_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_REMARKS_MASTER_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"REMARKS" NVARCHAR2(200), 
	"TENANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_REPORTEDVEHICLE_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_REPORTEDVEHICLE_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"JOB_CODE" VARCHAR2(1 BYTE), 
	"INVOICE_NO" VARCHAR2(50 BYTE), 
	"VENDOR_PIN_NO" VARCHAR2(50 BYTE), 
	"VENDOR_NAME" VARCHAR2(240 BYTE), 
	"VENDOR_ID" NUMBER, 
	"VENDOR_CODE" VARCHAR2(50 BYTE), 
	"VENDOR_SITE_ID" NUMBER, 
	"VENDOR_SITE_CODE" VARCHAR2(50 BYTE), 
	"TRANSFER_FLAG" VARCHAR2(1 BYTE), 
	"TRANSFER_DATE" DATE, 
	"ORGANIZATION_CODE" VARCHAR2(5 BYTE), 
	"VEHICLE_NO" VARCHAR2(30 BYTE), 
	"PART_NO" VARCHAR2(50 BYTE), 
	"DISPATCH_DATE" DATE, 
	"DISPATCH_STATUS" VARCHAR2(30 BYTE), 
	"REMARKS" VARCHAR2(500 BYTE), 
	"CREATED_BY" NUMBER(15,0), 
	"ORGANIZATION_ID" NUMBER(15,0), 
	"USED_PIN" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"CREATION_DATE" DATE, 
	"INVOICE_DATE" DATE, 
	"APPROVED_DATE" DATE, 
	"RG_ID_NO" VARCHAR2(35 BYTE), 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(240 BYTE), 
	"ATTRIBUTE2" VARCHAR2(240 BYTE), 
	"ATTRIBUTE3" VARCHAR2(240 BYTE), 
	"ATTRIBUTE4" VARCHAR2(240 BYTE), 
	"ATTRIBUTE5" VARCHAR2(240 BYTE), 
	"ATTRIBUTE6" VARCHAR2(240 BYTE), 
	"ATTRIBUTE7" VARCHAR2(240 BYTE), 
	"ATTRIBUTE8" VARCHAR2(240 BYTE), 
	"ATTRIBUTE9" VARCHAR2(240 BYTE), 
	"ATTRIBUTE10" VARCHAR2(240 BYTE), 
	"PART_DESCRIPTION" NVARCHAR2(300), 
	"QUANTITY" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_ROLE_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_ROLE_MASTER_TBL" 
   (	"ROLEID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLETYPE" NVARCHAR2(100), 
	"ROLECODE" NVARCHAR2(200), 
	"ROLEDESCRIPTION" NVARCHAR2(200), 
	"TENANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_STATUS_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_STATUS_MASTER_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STATUS_CODE" VARCHAR2(50 BYTE), 
	"DESCRIPTION" VARCHAR2(200 BYTE), 
	"CREATED_BY" NUMBER(15,0), 
	"CREATION_DATE" DATE, 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_SUMMARY_REPORT_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_SUMMARY_REPORT_TBL" 
   (	"ID" NUMBER, 
	"CATEG" VARCHAR2(500 BYTE), 
	"PRODUCT" VARCHAR2(500 BYTE), 
	"JAN_01" NUMBER, 
	"JAN_02" NUMBER, 
	"JAN_03" NUMBER, 
	"JAN_04" NUMBER, 
	"JAN_05" NUMBER, 
	"JAN_06" NUMBER, 
	"JAN_07" NUMBER, 
	"WK_01" NUMBER, 
	"JAN_08" NUMBER, 
	"JAN_09" NUMBER, 
	"JAN_10" NUMBER, 
	"JAN_11" NUMBER, 
	"JAN_12" NUMBER, 
	"JAN_13" NUMBER, 
	"JAN_14" NUMBER, 
	"WK_02" NUMBER, 
	"JAN_15" NUMBER, 
	"JAN_16" NUMBER, 
	"JAN_17" NUMBER, 
	"JAN_18" NUMBER, 
	"JAN_19" NUMBER, 
	"JAN_20" NUMBER, 
	"JAN_21" NUMBER, 
	"WK_03" NUMBER, 
	"JAN_22" NUMBER, 
	"JAN_23" NUMBER, 
	"JAN_24" NUMBER, 
	"JAN_25" NUMBER, 
	"JAN_26" NUMBER, 
	"JAN_27" NUMBER, 
	"JAN_28" NUMBER, 
	"WK_04" NUMBER, 
	"JAN_29" NUMBER, 
	"JAN_30" NUMBER, 
	"JAN_31" NUMBER, 
	"MONTH_JAN" NUMBER, 
	"FEB_01" NUMBER, 
	"FEB_02" NUMBER, 
	"FEB_03" NUMBER, 
	"FEB_04" NUMBER, 
	"WK_05" NUMBER, 
	"FEB_05" NUMBER, 
	"FEB_06" NUMBER, 
	"FEB_07" NUMBER, 
	"FEB_08" NUMBER, 
	"FEB_09" NUMBER, 
	"FEB_10" NUMBER, 
	"FEB_11" NUMBER, 
	"WK_06" NUMBER, 
	"FEB_12" NUMBER, 
	"FEB_13" NUMBER, 
	"FEB_14" NUMBER, 
	"FEB_15" NUMBER, 
	"FEB_16" NUMBER, 
	"FEB_17" NUMBER, 
	"FEB_18" NUMBER, 
	"WK_07" NUMBER, 
	"FEB_19" NUMBER, 
	"FEB_20" NUMBER, 
	"FEB_21" NUMBER, 
	"FEB_22" NUMBER, 
	"FEB_23" NUMBER, 
	"FEB_24" NUMBER, 
	"FEB_25" NUMBER, 
	"WK_08" NUMBER, 
	"FEB_26" NUMBER, 
	"FEB_27" NUMBER, 
	"FEB_28" NUMBER, 
	"MONTH_FEB" NUMBER, 
	"MAR_01" NUMBER, 
	"MAR_02" NUMBER, 
	"MAR_03" NUMBER, 
	"MAR_04" NUMBER, 
	"WK_09" NUMBER, 
	"MAR_05" NUMBER, 
	"MAR_06" NUMBER, 
	"MAR_07" NUMBER, 
	"MAR_08" NUMBER, 
	"MAR_09" NUMBER, 
	"MAR_10" NUMBER, 
	"MAR_11" NUMBER, 
	"WK_10" NUMBER, 
	"MAR_12" NUMBER, 
	"MAR_13" NUMBER, 
	"MAR_14" NUMBER, 
	"MAR_15" NUMBER, 
	"MAR_16" NUMBER, 
	"MAR_17" NUMBER, 
	"MAR_18" NUMBER, 
	"WK_11" NUMBER, 
	"MAR_19" NUMBER, 
	"MAR_20" NUMBER, 
	"MAR_21" NUMBER, 
	"MAR_22" NUMBER, 
	"MAR_23" NUMBER, 
	"MAR_24" NUMBER, 
	"MAR_25" NUMBER, 
	"WK_12" NUMBER, 
	"MAR_26" NUMBER, 
	"MAR_27" NUMBER, 
	"MAR_28" NUMBER, 
	"MAR_29" NUMBER, 
	"MAR_30" NUMBER, 
	"MAR_31" NUMBER, 
	"MONTH_MAR" NUMBER, 
	"APR_01" NUMBER, 
	"WK_13" NUMBER, 
	"APR_02" NUMBER, 
	"APR_03" NUMBER, 
	"APR_04" NUMBER, 
	"APR_05" NUMBER, 
	"APR_06" NUMBER, 
	"APR_07" NUMBER, 
	"APR_08" NUMBER, 
	"WK_14" NUMBER, 
	"APR_09" NUMBER, 
	"APR_10" NUMBER, 
	"APR_11" NUMBER, 
	"APR_12" NUMBER, 
	"APR_13" NUMBER, 
	"APR_14" NUMBER, 
	"APR_15" NUMBER, 
	"WK_15" NUMBER, 
	"APR_16" NUMBER, 
	"APR_17" NUMBER, 
	"APR_18" NUMBER, 
	"APR_19" NUMBER, 
	"APR_20" NUMBER, 
	"APR_21" NUMBER, 
	"APR_22" NUMBER, 
	"WK_16" NUMBER, 
	"APR_23" NUMBER, 
	"APR_24" NUMBER, 
	"APR_25" NUMBER, 
	"APR_26" NUMBER, 
	"APR_27" NUMBER, 
	"APR_28" NUMBER, 
	"APR_29" NUMBER, 
	"WK_17" NUMBER, 
	"APR_30" NUMBER, 
	"MONTH_APR" NUMBER, 
	"MAY_01" NUMBER, 
	"MAY_02" NUMBER, 
	"MAY_03" NUMBER, 
	"MAY_04" NUMBER, 
	"MAY_05" NUMBER, 
	"MAY_06" NUMBER, 
	"WK_18" NUMBER, 
	"MAY_07" NUMBER, 
	"MAY_08" NUMBER, 
	"MAY_09" NUMBER, 
	"MAY_10" NUMBER, 
	"MAY_11" NUMBER, 
	"MAY_12" NUMBER, 
	"MAY_13" NUMBER, 
	"WK_19" NUMBER, 
	"MAY_14" NUMBER, 
	"MAY_15" NUMBER, 
	"MAY_16" NUMBER, 
	"MAY_17" NUMBER, 
	"MAY_18" NUMBER, 
	"MAY_19" NUMBER, 
	"MAY_20" NUMBER, 
	"WK_20" NUMBER, 
	"MAY_21" NUMBER, 
	"MAY_22" NUMBER, 
	"MAY_23" NUMBER, 
	"MAY_24" NUMBER, 
	"MAY_25" NUMBER, 
	"MAY_26" NUMBER, 
	"MAY_27" NUMBER, 
	"WK_21" NUMBER, 
	"MAY_28" NUMBER, 
	"MAY_29" NUMBER, 
	"MAY_30" NUMBER, 
	"MAY_31" NUMBER, 
	"MONTH_MAY" NUMBER, 
	"JUN_01" NUMBER, 
	"JUN_02" NUMBER, 
	"JUN_03" NUMBER, 
	"WK_22" NUMBER, 
	"JUN_04" NUMBER, 
	"JUN_05" NUMBER, 
	"JUN_06" NUMBER, 
	"JUN_07" NUMBER, 
	"JUN_08" NUMBER, 
	"JUN_09" NUMBER, 
	"JUN_10" NUMBER, 
	"WK_23" NUMBER, 
	"JUN_11" NUMBER, 
	"JUN_12" NUMBER, 
	"JUN_13" NUMBER, 
	"JUN_14" NUMBER, 
	"JUN_15" NUMBER, 
	"JUN_16" NUMBER, 
	"JUN_17" NUMBER, 
	"WK_24" NUMBER, 
	"JUN_18" NUMBER, 
	"JUN_19" NUMBER, 
	"JUN_20" NUMBER, 
	"JUN_21" NUMBER, 
	"JUN_22" NUMBER, 
	"JUN_23" NUMBER, 
	"JUN_24" NUMBER, 
	"WK_25" NUMBER, 
	"JUN_25" NUMBER, 
	"JUN_26" NUMBER, 
	"JUN_27" NUMBER, 
	"JUN_28" NUMBER, 
	"JUN_29" NUMBER, 
	"JUN_30" NUMBER, 
	"MONTH_JUN" NUMBER, 
	"JUL_01" NUMBER, 
	"WK_26" NUMBER, 
	"JUL_02" NUMBER, 
	"JUL_03" NUMBER, 
	"JUL_04" NUMBER, 
	"JUL_05" NUMBER, 
	"JUL_06" NUMBER, 
	"JUL_07" NUMBER, 
	"JUL_08" NUMBER, 
	"WK_27" NUMBER, 
	"JUL_09" NUMBER, 
	"JUL_10" NUMBER, 
	"JUL_11" NUMBER, 
	"JUL_12" NUMBER, 
	"JUL_13" NUMBER, 
	"JUL_14" NUMBER, 
	"JUL_15" NUMBER, 
	"WK_28" NUMBER, 
	"JUL_16" NUMBER, 
	"JUL_17" NUMBER, 
	"JUL_18" NUMBER, 
	"JUL_19" NUMBER, 
	"JUL_20" NUMBER, 
	"JUL_21" NUMBER, 
	"JUL_22" NUMBER, 
	"WK_29" NUMBER, 
	"JUL_23" NUMBER, 
	"JUL_24" NUMBER, 
	"JUL_25" NUMBER, 
	"JUL_26" NUMBER, 
	"JUL_27" NUMBER, 
	"JUL_28" NUMBER, 
	"JUL_29" NUMBER, 
	"WK_30" NUMBER, 
	"JUL_30" NUMBER, 
	"JUL_31" NUMBER, 
	"MONTH_JUL" NUMBER, 
	"AUG_01" NUMBER, 
	"AUG_02" NUMBER, 
	"AUG_03" NUMBER, 
	"AUG_04" NUMBER, 
	"AUG_05" NUMBER, 
	"WK_31" NUMBER, 
	"AUG_06" NUMBER, 
	"AUG_07" NUMBER, 
	"AUG_08" NUMBER, 
	"AUG_09" NUMBER, 
	"AUG_10" NUMBER, 
	"AUG_11" NUMBER, 
	"AUG_12" NUMBER, 
	"WK_32" NUMBER, 
	"AUG_13" NUMBER, 
	"AUG_14" NUMBER, 
	"AUG_15" NUMBER, 
	"AUG_16" NUMBER, 
	"AUG_17" NUMBER, 
	"AUG_18" NUMBER, 
	"AUG_19" NUMBER, 
	"WK_33" NUMBER, 
	"AUG_20" NUMBER, 
	"AUG_21" NUMBER, 
	"AUG_22" NUMBER, 
	"AUG_23" NUMBER, 
	"AUG_24" NUMBER, 
	"AUG_25" NUMBER, 
	"AUG_26" NUMBER, 
	"WK_34" NUMBER, 
	"AUG_27" NUMBER, 
	"AUG_28" NUMBER, 
	"AUG_29" NUMBER, 
	"AUG_30" NUMBER, 
	"AUG_31" NUMBER, 
	"MONTH_AUG" NUMBER, 
	"SEP_01" NUMBER, 
	"SEP_02" NUMBER, 
	"WK_35" NUMBER, 
	"SEP_03" NUMBER, 
	"SEP_04" NUMBER, 
	"SEP_05" NUMBER, 
	"SEP_06" NUMBER, 
	"SEP_07" NUMBER, 
	"SEP_08" NUMBER, 
	"SEP_09" NUMBER, 
	"WK_36" NUMBER, 
	"SEP_10" NUMBER, 
	"SEP_11" NUMBER, 
	"SEP_12" NUMBER, 
	"SEP_13" NUMBER, 
	"SEP_14" NUMBER, 
	"SEP_15" NUMBER, 
	"SEP_16" NUMBER, 
	"WK_37" NUMBER, 
	"SEP_17" NUMBER, 
	"SEP_18" NUMBER, 
	"SEP_19" NUMBER, 
	"SEP_20" NUMBER, 
	"SEP_21" NUMBER, 
	"SEP_22" NUMBER, 
	"SEP_23" NUMBER, 
	"WK_38" NUMBER, 
	"SEP_24" NUMBER, 
	"SEP_25" NUMBER, 
	"SEP_26" NUMBER, 
	"SEP_27" NUMBER, 
	"SEP_28" NUMBER, 
	"SEP_29" NUMBER, 
	"SEP_30" NUMBER, 
	"WK_39" NUMBER, 
	"MONTH_SEP" NUMBER, 
	"OCT_01" NUMBER, 
	"OCT_02" NUMBER, 
	"OCT_03" NUMBER, 
	"OCT_04" NUMBER, 
	"OCT_05" NUMBER, 
	"OCT_06" NUMBER, 
	"OCT_07" NUMBER, 
	"WK_40" NUMBER, 
	"OCT_08" NUMBER, 
	"OCT_09" NUMBER, 
	"OCT_10" NUMBER, 
	"OCT_11" NUMBER, 
	"OCT_12" NUMBER, 
	"OCT_13" NUMBER, 
	"OCT_14" NUMBER, 
	"WK_41" NUMBER, 
	"OCT_15" NUMBER, 
	"OCT_16" NUMBER, 
	"OCT_17" NUMBER, 
	"OCT_18" NUMBER, 
	"OCT_19" NUMBER, 
	"OCT_20" NUMBER, 
	"OCT_21" NUMBER, 
	"WK_42" NUMBER, 
	"OCT_22" NUMBER, 
	"OCT_23" NUMBER, 
	"OCT_24" NUMBER, 
	"OCT_25" NUMBER, 
	"OCT_26" NUMBER, 
	"OCT_27" NUMBER, 
	"OCT_28" NUMBER, 
	"WK_43" NUMBER, 
	"OCT_29" NUMBER, 
	"OCT_30" NUMBER, 
	"OCT_31" NUMBER, 
	"MONTH_OCT" NUMBER, 
	"NOV_01" NUMBER, 
	"NOV_02" NUMBER, 
	"NOV_03" NUMBER, 
	"NOV_04" NUMBER, 
	"WK_44" NUMBER, 
	"NOV_05" NUMBER, 
	"NOV_06" NUMBER, 
	"NOV_07" NUMBER, 
	"NOV_08" NUMBER, 
	"NOV_09" NUMBER, 
	"NOV_10" NUMBER, 
	"NOV_11" NUMBER, 
	"WK_45" NUMBER, 
	"NOV_12" NUMBER, 
	"NOV_13" NUMBER, 
	"NOV_14" NUMBER, 
	"NOV_15" NUMBER, 
	"NOV_16" NUMBER, 
	"NOV_17" NUMBER, 
	"NOV_18" NUMBER, 
	"WK_46" NUMBER, 
	"NOV_19" NUMBER, 
	"NOV_20" NUMBER, 
	"NOV_21" NUMBER, 
	"NOV_22" NUMBER, 
	"NOV_23" NUMBER, 
	"NOV_24" NUMBER, 
	"NOV_25" NUMBER, 
	"WK_47" NUMBER, 
	"NOV_26" NUMBER, 
	"NOV_27" NUMBER, 
	"NOV_28" NUMBER, 
	"NOV_29" NUMBER, 
	"NOV_30" NUMBER, 
	"MONTH_NOV" NUMBER, 
	"DEC_01" NUMBER, 
	"DEC_02" NUMBER, 
	"WK_48" NUMBER, 
	"DEC_03" NUMBER, 
	"DEC_04" NUMBER, 
	"DEC_05" NUMBER, 
	"DEC_06" NUMBER, 
	"DEC_07" NUMBER, 
	"DEC_08" NUMBER, 
	"DEC_09" NUMBER, 
	"WK_49" NUMBER, 
	"DEC_10" NUMBER, 
	"DEC_11" NUMBER, 
	"DEC_12" NUMBER, 
	"DEC_13" NUMBER, 
	"DEC_14" NUMBER, 
	"DEC_15" NUMBER, 
	"DEC_16" NUMBER, 
	"WK_50" NUMBER, 
	"DEC_17" NUMBER, 
	"DEC_18" NUMBER, 
	"DEC_19" NUMBER, 
	"DEC_20" NUMBER, 
	"DEC_21" NUMBER, 
	"DEC_22" NUMBER, 
	"DEC_23" NUMBER, 
	"WK_51" NUMBER, 
	"DEC_24" NUMBER, 
	"DEC_25" NUMBER, 
	"DEC_26" NUMBER, 
	"DEC_27" NUMBER, 
	"DEC_28" NUMBER, 
	"DEC_29" NUMBER, 
	"DEC_30" NUMBER, 
	"WK_52" NUMBER, 
	"DEC_31" NUMBER, 
	"MONTH_DEC" NUMBER, 
	"FEB_29" NUMBER, 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_TBLTEST_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_TBLTEST_TBL" 
   (	"PLANT" VARCHAR2(10 BYTE), 
	"RAMPCODE" VARCHAR2(30 BYTE), 
	"VEHICLEID" NUMBER(10,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_TEMP_TABLE_TBL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "VTS"."VTS_TEMP_TABLE_TBL" 
   (	"SNO" NUMBER(10,0), 
	"VENDOR_VEHICLE_ID" NUMBER(10,0), 
	"VEHICLE_NUMBER" VARCHAR2(16 BYTE), 
	"VENDOR_NAME" VARCHAR2(240 BYTE), 
	"PLANT" VARCHAR2(16 BYTE), 
	"ISRGA" NUMBER(1,0), 
	"RGADATE" DATE, 
	"ISSPA" NUMBER(1,0), 
	"SPADATE" DATE, 
	"ISTPA" NUMBER(1,0), 
	"TPADATE" DATE, 
	"ISULA" NUMBER(1,0), 
	"ULADATE" DATE, 
	"ALLOCATED_RAMP_CODE" VARCHAR2(20 BYTE), 
	"RMTYPE" VARCHAR2(10 BYTE), 
	"HOLD_STATUS" NUMBER(1,0), 
	"HOLD_DATE" DATE, 
	"UNHOLD_STATUS" NUMBER(1,0), 
	"UNHOLD_DATE" DATE, 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table VTS_TENANT_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_TENANT_MASTER_TBL" 
   (	"TENANTID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TENANTCODE" NVARCHAR2(20), 
	"TENANTDESCRIPTION" NVARCHAR2(200), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_TODAY_SALES_TBL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "VTS"."VTS_TODAY_SALES_TBL" 
   (	"ID" NUMBER(10,0), 
	"VEHICLENUMBER" VARCHAR2(16 BYTE), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table VTS_USER_MASTER_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_USER_MASTER_TBL" 
   (	"USERID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMAILID" NVARCHAR2(200), 
	"FIRST_NAME" NVARCHAR2(200), 
	"LAST_NAME" NVARCHAR2(200), 
	"PASSWORD" NVARCHAR2(1000), 
	"MOBILE_NO" VARCHAR2(1000 BYTE), 
	"TENANTID" NUMBER(10,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE, 
	"GATE_NUMBER" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_USER_ROLE_MAPPING_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_USER_ROLE_MAPPING_TBL" 
   (	"USERROLEID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERID" NUMBER(10,0), 
	"ROLEID" NUMBER(10,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CREATED_BY" NVARCHAR2(1000), 
	"CREATION_DATE" DATE, 
	"UPDATED_BY" NVARCHAR2(1000), 
	"UPDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_VEHICLE_STATUS_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_VEHICLE_STATUS_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VENDOR_VEHICLE_ID" NUMBER(10,0), 
	"REMARKS" VARCHAR2(200 BYTE), 
	"CREATED_BY" NUMBER(15,0), 
	"CREATION_DATE" DATE, 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"RGAPPROVED" CHAR(1 BYTE), 
	"RGAPPROVEDBY" NUMBER(10,0), 
	"SPAPPROVED" CHAR(1 BYTE), 
	"SPAPPROVEDBY" NUMBER(10,0), 
	"TPAPPROVED" CHAR(1 BYTE), 
	"TPAPPROVEDBY" NUMBER(10,0), 
	"ULAPPROVED" CHAR(1 BYTE), 
	"ULAPPROVEDBY" NUMBER(10,0), 
	"OGAPPROVED" CHAR(1 BYTE), 
	"OGAPPROVEDBY" NUMBER(10,0), 
	"TENANTID" NUMBER(10,0), 
	"PLANT_CODE" NVARCHAR2(100), 
	"RGAPPROVEDDATE" DATE, 
	"SPAPPROVEDDATE" DATE, 
	"TPAPPROVEDDATE" DATE, 
	"ULAPPROVEDDATE" DATE, 
	"OGAPPROVEDDATE" DATE, 
	"HOLD_REMARK" VARCHAR2(500 BYTE), 
	"HOLD_STATUS" CHAR(1 BYTE), 
	"HOLD_BY" NUMBER(10,0), 
	"HOLD_DATE" DATE, 
	"UNHOLD_STATUS" CHAR(1 BYTE), 
	"UNHOLD_BY" NUMBER(10,0), 
	"UNHOLD_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_VENDOR_VEHICLE_PART_DETAIL_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_VENDOR_VEHICLE_PART_DETAIL_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VENDOR_VEHICLE_ID" NUMBER(10,0), 
	"INVOICE_NO" VARCHAR2(50 BYTE), 
	"INVOICE_DATE" DATE, 
	"USED_PIN" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"VENDOR_PIN_NO" VARCHAR2(50 BYTE), 
	"PLANT" VARCHAR2(10 BYTE), 
	"PART_NO" VARCHAR2(50 BYTE), 
	"PART_DESCRIPTION" NVARCHAR2(300), 
	"QUANTITY" NUMBER(10,0), 
	"CREATED_BY" NUMBER(15,0), 
	"CREATION_DATE" DATE, 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"ALLOCATED_RAMP_CODE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_VENDOR_VEHICLE_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_VENDOR_VEHICLE_TBL" 
   (	"ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VEHICLE_NUMBER" VARCHAR2(16 BYTE), 
	"JOB_CODE" VARCHAR2(1 BYTE), 
	"VENDOR_NAME" VARCHAR2(240 BYTE), 
	"VENDOR_ID" NUMBER, 
	"VENDOR_CODE" VARCHAR2(50 BYTE), 
	"VENDOR_SITE_ID" NUMBER, 
	"VENDOR_SITE_CODE" VARCHAR2(50 BYTE), 
	"TRANSFER_FLAG" VARCHAR2(1 BYTE), 
	"TRANSFER_DATE" DATE, 
	"DISPATCH_DATE" DATE, 
	"DISPATCH_STATUS" VARCHAR2(30 BYTE), 
	"REMARKS" VARCHAR2(500 BYTE), 
	"RG_ID_NO" VARCHAR2(35 BYTE), 
	"CREATED_BY" NUMBER(15,0), 
	"CREATION_DATE" DATE, 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE, 
	"CURRENT_STATUS" NVARCHAR2(10), 
	"MOBILE_NO" VARCHAR2(1000 BYTE), 
	"SHIFT" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_XXFRMM_VENDOR_PIN_INTF_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_INTF_TBL" 
   (	"JOB_CODE" VARCHAR2(1 BYTE), 
	"INVOICE_NO" VARCHAR2(50 BYTE), 
	"VENDOR_PIN_NO" VARCHAR2(50 BYTE), 
	"VENDOR_NAME" VARCHAR2(240 BYTE), 
	"VENDOR_ID" NUMBER, 
	"VENDOR_CODE" VARCHAR2(50 BYTE), 
	"VENDOR_SITE_ID" NUMBER, 
	"VENDOR_SITE_CODE" VARCHAR2(50 BYTE), 
	"TRANSFER_FLAG" VARCHAR2(1 BYTE), 
	"TRANSFER_DATE" DATE, 
	"ORGANIZATION_CODE" VARCHAR2(5 BYTE), 
	"VEHICLE_NO" VARCHAR2(30 BYTE), 
	"PART_NO" VARCHAR2(50 BYTE), 
	"DISPATCH_DATE" DATE, 
	"DISPATCH_STATUS" VARCHAR2(30 BYTE), 
	"REMARKS" VARCHAR2(500 BYTE), 
	"CREATED_BY" NUMBER(15,0), 
	"LAST_UPDATE_DATE" DATE, 
	"LAST_UPDATED_BY" NUMBER(15,0), 
	"ATTRIBUTE1" VARCHAR2(240 BYTE), 
	"ATTRIBUTE2" VARCHAR2(240 BYTE), 
	"ATTRIBUTE3" VARCHAR2(240 BYTE), 
	"ATTRIBUTE4" VARCHAR2(240 BYTE), 
	"ATTRIBUTE5" VARCHAR2(240 BYTE), 
	"ATTRIBUTE6" VARCHAR2(240 BYTE), 
	"ATTRIBUTE7" VARCHAR2(240 BYTE), 
	"ATTRIBUTE8" VARCHAR2(240 BYTE), 
	"ATTRIBUTE9" VARCHAR2(240 BYTE), 
	"ATTRIBUTE10" VARCHAR2(240 BYTE), 
	"ORGANIZATION_ID" NUMBER(15,0), 
	"USED_PIN" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"CREATION_DATE" DATE, 
	"INVOICE_DATE" DATE, 
	"RG_ID_NO" VARCHAR2(35 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 1048576 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Table VTS_XXFRMM_VENDOR_PIN_TBL
--------------------------------------------------------

  CREATE TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" 
   (	"MANDT" VARCHAR2(3 BYTE), 
	"PIN_NUMBER" VARCHAR2(30 BYTE), 
	"INVOICE_NO" VARCHAR2(50 BYTE), 
	"MATNR" VARCHAR2(40 BYTE), 
	"DISPATCH_STATUS" VARCHAR2(2 BYTE), 
	"JOB_CODE" VARCHAR2(1 BYTE), 
	"WERKS" VARCHAR2(4 BYTE), 
	"LIFNR" VARCHAR2(10 BYTE), 
	"LIFNR_NAME" VARCHAR2(35 BYTE), 
	"MAKTX" VARCHAR2(40 BYTE), 
	"QTY_SHIPPED" VARCHAR2(13 BYTE), 
	"VEHICLE_NO" VARCHAR2(30 BYTE), 
	"DRIVER_NO" VARCHAR2(50 BYTE), 
	"INVOICE_DATE" VARCHAR2(10 BYTE), 
	"DISPATCH_DATE" VARCHAR2(10 BYTE), 
	"ATTRIBIUTE1" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE2" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE3" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE4" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE5" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE6" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE7" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE8" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE9" VARCHAR2(150 BYTE), 
	"ATTRIBIUTE10" VARCHAR2(150 BYTE), 
	"IF_TASK_ID" VARCHAR2(32 BYTE), 
	"IF_FLAG" VARCHAR2(1 BYTE), 
	"IF_TIMESTAMP" VARCHAR2(21 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;

   COMMENT ON COLUMN "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL"."DISPATCH_STATUS" IS 'Dispatch Status
 - DE Dispatch
 - DC Dispatch Cancel
 - GE Gate Entry
 - GC Gate Entry Cancel
 - AE Goods Arrival
 - AC Goods Arrival Cancel';
   COMMENT ON COLUMN "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL"."QTY_SHIPPED" IS 'Shipped Qty';
--------------------------------------------------------
--  DDL for Table VTS_XXVTS_VEHICLE_STATUS_GTT_TBL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "VTS"."VTS_XXVTS_VEHICLE_STATUS_GTT_TBL" 
   (	"ID_NO" VARCHAR2(30 BYTE), 
	"FROM_DT" DATE, 
	"TO_DT" DATE, 
	"INVOICE_DATE" DATE, 
	"DISPATCH_DATE" DATE, 
	"SUPPLIER" VARCHAR2(300 BYTE), 
	"VEHICLE_NO" VARCHAR2(30 BYTE), 
	"DIFF_DIS_REP" VARCHAR2(30 BYTE), 
	"DIFF_DIS_REP1" VARCHAR2(30 BYTE), 
	"AVG_DIS_REP" VARCHAR2(30 BYTE), 
	"DIFF_IN_REP" VARCHAR2(30 BYTE), 
	"DIFF_IN_REP1" VARCHAR2(30 BYTE), 
	"DIFF_UN_IN" VARCHAR2(30 BYTE), 
	"DIFF_UN_IN1" VARCHAR2(30 BYTE), 
	"DIFF_OUT_UN" VARCHAR2(30 BYTE), 
	"DIFF_OUT_UN1" VARCHAR2(30 BYTE), 
	"AVG_IN_REP" VARCHAR2(30 BYTE), 
	"DIFF_IN_OUT" VARCHAR2(30 BYTE), 
	"NEW_SUM" VARCHAR2(30 BYTE), 
	"AVG_IN_OUT" VARCHAR2(30 BYTE), 
	"TOTAL_TIME" VARCHAR2(30 BYTE), 
	"TOTAL_TIME1" VARCHAR2(30 BYTE), 
	"AVG_TOTAL_TIME" VARCHAR2(30 BYTE), 
	"REP_TIME" DATE, 
	"ST_PER" DATE, 
	"DIV" VARCHAR2(30 BYTE), 
	"IN_TIME" DATE, 
	"UNLOAD_TIME" DATE, 
	"OUT_TIME" DATE, 
	"ST_REMARKS" VARCHAR2(500 BYTE), 
	"PHY_UNLOAD" VARCHAR2(4 BYTE), 
	"RAMP_NO" VARCHAR2(10 BYTE), 
	"ENTRY_MODE" VARCHAR2(10 BYTE), 
	"ATTRIBUTE1" VARCHAR2(250 BYTE), 
	"ATTRIBUTE2" VARCHAR2(250 BYTE), 
	"ATTRIBUTE3" VARCHAR2(250 BYTE), 
	"ATTRIBUTE4" VARCHAR2(250 BYTE), 
	"ATTRIBUTE5" VARCHAR2(250 BYTE), 
	"ATTRIBUTE6" NUMBER, 
	"ATTRIBUTE7" NUMBER, 
	"ATTRIBUTE8" NUMBER, 
	"ATTRIBUTE9" DATE, 
	"ATTRIBUTE10" DATE
   ) ON COMMIT DELETE ROWS ;
--------------------------------------------------------
--  DDL for View VTS_VEHICLE_ITEM_DETAILS_VW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "VTS"."VTS_VEHICLE_ITEM_DETAILS_VW" ("ID", "VEHICLENUMBER", "SUPPLIERPIN", "SUPPLIERNAME", "ENTRYMODE", "PLANT", "RMTYPE", "RGIDNUMBER", "CURRENT_STATUS", "DISPATCHDATE", "CREATION_DATE") AS 
  SELECT 
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType,
                V.RG_ID_NO as RgIDNumber,
                V.Current_Status,
                V.DISPATCH_DATE as DispatchDate,
                V.creation_date
                 FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID 
                 GROUP BY 
                V.ID,V.VEHICLE_NUMBER,
                V.VENDOR_NAME,V.VENDOR_ID,
                V.RG_ID_NO,V.DISPATCH_DATE,
                v.Current_Status,
                 V.creation_date
;
--------------------------------------------------------
--  DDL for Index VTS_PIN_INFO_PK_IND
--------------------------------------------------------

  CREATE UNIQUE INDEX "VTS"."VTS_PIN_INFO_PK_IND" ON "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" ("PIN_NUMBER", "INVOICE_NO", "MATNR", "DISPATCH_STATUS", "JOB_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" ;
--------------------------------------------------------
--  DDL for Procedure CHECK_RAMP_CODE_EXISTS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."CHECK_RAMP_CODE_EXISTS_PROC" (
P_RampCode IN NVARCHAR2 ,
P_RampId IN NUMBER DEFAULT 0,
P_PlantId IN NUMBER DEFAULT 0,
O_Exists OUT NUMBER
)
AS
BEGIN
SELECT COUNT(*)
INTO O_Exists
FROM vts_ramp_master_tbl
WHERE RampCode=P_RampCode AND P_PlantId =rampplantid
AND (P_RampId=0 OR RampId != P_RampId);
END CHECK_RAMP_CODE_EXISTS_PROC;

/
--------------------------------------------------------
--  DDL for Procedure VTS_ADD_VEHICLE_AT_REPORTING_GATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_ADD_VEHICLE_AT_REPORTING_GATE" 
(
    P_Mode IN NVARCHAR2 DEFAULT 'GetAllVendor',
    P_VehicleNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceDate IN DATE,
    P_VendorId IN DECIMAL,
    P_VendorName IN NVARCHAR2 DEFAULT '',
    P_MobileNo IN NVARCHAR2 DEFAULT '',
    P_VendorSiteId IN DECIMAL,
    P_VendorSiteCode IN NVARCHAR2 DEFAULT '',
    P_VendorCode IN NVARCHAR2 DEFAULT '',
    P_PinNo IN NVARCHAR2 DEFAULT '',
    P_entryMode IN NVARCHAR2 DEFAULT '',
    P_plant IN NVARCHAR2 DEFAULT '',
    P_PartNo IN NVARCHAR2 DEFAULT '',
    P_Description IN NVARCHAR2 DEFAULT '',
    P_Quantity IN NVARCHAR2 DEFAULT '',
    P_DispatchDate IN DATE,
    P_CreatedBy IN INT DEFAULT 0,
    P_CreationDate IN DATE,
    O_NewVehicleId IN OUT INT,
    O_NewVehicleItemId OUT INT 
)
AS
l_vendor_vehicle_id INT:=0;
l_TENANTID INT:=0;
l_count INT:=0;
l_RGIdNo VARCHAR2(50):='';
BEGIN
    IF P_Mode = 'SaveNewVehicle' THEN
        IF O_NewVehicleId = 0 THEN
            INSERT INTO vts_vendor_vehicle_tbl (
                vehicle_number,
                job_code,
                vendor_name,
                mobile_no,
                vendor_id,
                vendor_code,
                vendor_site_id,
                vendor_site_code,
                dispatch_date,
                dispatch_status,
                remarks,
                created_by,
                creation_date,
                SHIFT
            )
            VALUES (
                UPPER(P_VehicleNo),
                'J',
                P_VendorName,
                P_MobileNo,
                P_VendorId,
                P_VendorCode,
                P_VendorSiteId,
                P_VendorSiteCode,
                P_DispatchDate,
                '',
                '',
                P_CreatedBy,
                P_CreationDate,
                CASE    
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '09:00:00' AND '21:00:00' THEN 'A'
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '21:00:01' AND '9:00:00' THEN 'B'
                    ELSE ''
                END
            )

            RETURNING id INTO O_NewVehicleId ;
             select P_plant ||'/'|| TO_CHAR(sysdate-20,'ddmmyyyy') ||'/'|| O_NewVehicleId  into l_RGIdNo  from dual;
             update vts_vendor_vehicle_tbl set RG_ID_NO=l_RGIdNo where Id=O_NewVehicleId;

          END IF;
          IF O_NewVehicleId > 0 THEN
            INSERT INTO vts_vendor_vehicle_part_detail_tbl (
                vendor_vehicle_id,
                invoice_no,
                invoice_date,
                used_pin,
                vendor_pin_no,
                plant,
                part_no,
                part_description,
                quantity,
                created_by,
                creation_date
            )
            VALUES (
                O_NewVehicleId,
                P_InvoiceNo,
                P_InvoiceDate,
                'N',
                P_PinNo,
                P_plant,
                P_PartNo,
                P_Description,
                P_Quantity,
                P_CreatedBy,
                P_CreationDate
            )
            RETURNING id INTO O_NewVehicleItemId;
            END IF;

  select TENANTID into l_TENANTID from vts_user_master_tbl where userid=P_CreatedBy;

  IF O_NewVehicleId > 0 THEN

--        FOR i IN (
--                   SELECT DISTINCT TRIM(REGEXP_SUBSTR(Plant, '[^,]+', 1, LEVEL)) AS PlantValue
--                        FROM vts_vehicle_item_details_vw
--                        WHERE ID = O_NewVehicleId
--                        CONNECT BY LEVEL <= REGEXP_COUNT(Plant, '[^,]+')
--                        START WITH Plant IS NOT NULL
--                ) LOOP
select count(1) into l_count from vts_vehicle_status_tbl where vendor_vehicle_id=O_NewVehicleId and plant_code=P_plant;
if l_count = 0 THEN 
                    insert into vts_vehicle_status_tbl(vendor_vehicle_id,plant_code,tenantid,rgapproved,rgapprovedby,rgapproveddate)
                    values(O_NewVehicleId,P_plant,l_TENANTID,'Y',P_CreatedBy,sysdate);
                    END IF;
--                END LOOP;


  END IF;
            Commit;
    END IF;
END VTS_ADD_VEHICLE_AT_REPORTING_GATE;

/
--------------------------------------------------------
--  DDL for Procedure VTS_ADD_VEHICLE_AT_REPORTING_GATE_Backup
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_ADD_VEHICLE_AT_REPORTING_GATE_Backup" 
(
    P_Mode IN NVARCHAR2 DEFAULT 'GetAllVendor',
    P_VehicleNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceDate IN DATE,
    P_VendorId IN DECIMAL,
    P_VendorName IN NVARCHAR2 DEFAULT '',
    P_VendorSiteId IN DECIMAL,
    P_VendorSiteCode IN NVARCHAR2 DEFAULT '',
    P_VendorCode IN NVARCHAR2 DEFAULT '',
    P_PinNo IN NVARCHAR2 DEFAULT '',
    P_entryMode IN NVARCHAR2 DEFAULT '',
    P_plant IN NVARCHAR2 DEFAULT '',
    P_PartNo IN NVARCHAR2 DEFAULT '',
    P_Description IN NVARCHAR2 DEFAULT '',
    P_Quantity IN NVARCHAR2 DEFAULT '',
    P_DispatchDate IN DATE,
    P_CreatedBy IN INT DEFAULT 0,
    P_CreationDate IN DATE,
    O_NewVehicleId IN OUT INT,
    O_NewVehicleItemId OUT INT
)
AS
BEGIN
    IF P_Mode = 'SaveNewVehicle' THEN
        IF O_NewVehicleId = 0 THEN
            INSERT INTO vts_vendor_vehicle_tbl (
                vehicle_number,
                job_code,
                vendor_name,
                vendor_id,
                vendor_code,
                vendor_site_id,
                vendor_site_code,
                dispatch_date,
                dispatch_status,
                remarks,
                created_by,
                creation_date
            )
            VALUES (
                P_VehicleNo,
                'J',
                P_VendorName,
                P_VendorId,
                P_VendorCode,
                P_VendorSiteId,
                P_VendorSiteCode,
                P_DispatchDate,
                '',
                '',
                P_CreatedBy,
                P_CreationDate
            )
            RETURNING id INTO O_NewVehicleId;
          END IF;
          IF O_NewVehicleId > 0 THEN
            INSERT INTO vts_vendor_vehicle_part_detail_tbl (
                vendor_vehicle_id,
                invoice_no,
                invoice_date,
                used_pin,
                vendor_pin_no,
                plant,
                part_no,
                part_description,
                quantity,
                created_by,
                creation_date
            )
            VALUES (
                O_NewVehicleId,
                P_InvoiceNo,
                P_InvoiceDate,
                'N',
                P_PinNo,
                P_plant,
                P_PartNo,
                P_Description,
                P_Quantity,
                P_CreatedBy,
                P_CreationDate
            )
            RETURNING id INTO O_NewVehicleItemId;
            END IF;

            Commit;
    END IF;
END VTS_ADD_VEHICLE_AT_REPORTING_GATE;

/
--------------------------------------------------------
--  DDL for Procedure VTS_ADD_VEHICLE_AT_REPORTING_GATE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_ADD_VEHICLE_AT_REPORTING_GATE_PROC" 
(
    P_Mode IN NVARCHAR2 DEFAULT 'GetAllVendor',
    P_VehicleNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceNo IN NVARCHAR2 DEFAULT '',
    P_InvoiceDate IN DATE,
    P_VendorId IN DECIMAL,
    P_VendorName IN NVARCHAR2 DEFAULT '',
    P_MobileNo IN NVARCHAR2 DEFAULT '',
    P_VendorSiteId IN DECIMAL,
    P_VendorSiteCode IN NVARCHAR2 DEFAULT '',
    P_VendorCode IN NVARCHAR2 DEFAULT '',
    P_PinNo IN NVARCHAR2 DEFAULT '',
    P_entryMode IN NVARCHAR2 DEFAULT '',
    P_plant IN NVARCHAR2 DEFAULT '',
    P_PartNo IN NVARCHAR2 DEFAULT '',
    P_Description IN NVARCHAR2 DEFAULT '',
    P_Quantity IN NVARCHAR2 DEFAULT '',
    P_DispatchDate IN DATE,
    P_CreatedBy IN INT DEFAULT 0,
    P_CreationDate IN DATE,
    O_NewVehicleId IN OUT INT,
    O_NewVehicleItemId OUT INT 
)
AS
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_ADD_VEHICLE_AT_REPORTING_GATE_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              ADD VEHICLE AT REPORTING GATE

  /*************************************************************************************************************/

l_vendor_vehicle_id INT:=0;
l_TENANTID INT:=0;
l_count INT:=0;
l_RGIdNo VARCHAR2(50):='';
BEGIN
    IF P_Mode = 'SaveNewVehicle' THEN
        IF O_NewVehicleId = 0 THEN
            INSERT INTO vts_vendor_vehicle_tbl (
                vehicle_number,
                job_code,
                vendor_name,
                mobile_no,
                vendor_id,
                vendor_code,
                vendor_site_id,
                vendor_site_code,
                dispatch_date,
                dispatch_status,
                remarks,
                created_by,
                creation_date,
                SHIFT
            )
            VALUES (
                UPPER(P_VehicleNo),
                'J',
                P_VendorName,
                P_MobileNo,
                P_VendorId,
                P_VendorCode,
                P_VendorSiteId,
                P_VendorSiteCode,
                P_DispatchDate,
                '',
                '',
                P_CreatedBy,
                P_CreationDate,
                CASE    
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '09:00:00' AND '21:00:00' THEN 'A'
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '21:00:01' AND '9:00:00' THEN 'B'
                    ELSE ''
                END
            )

            RETURNING id INTO O_NewVehicleId ;
             select P_plant ||'/'|| TO_CHAR(sysdate-20,'ddmmyyyy') ||'/'|| O_NewVehicleId  into l_RGIdNo  from dual;
             update vts_vendor_vehicle_tbl set RG_ID_NO=l_RGIdNo where Id=O_NewVehicleId;

          END IF;
          IF O_NewVehicleId > 0 THEN
            INSERT INTO vts_vendor_vehicle_part_detail_tbl (
                vendor_vehicle_id,
                invoice_no,
                invoice_date,
                used_pin,
                vendor_pin_no,
                plant,
                part_no,
                part_description,
                quantity,
                created_by,
                creation_date
            )
            VALUES (
                O_NewVehicleId,
                P_InvoiceNo,
                P_InvoiceDate,
                'N',
                P_PinNo,
                P_plant,
                P_PartNo,
                P_Description,
                P_Quantity,
                P_CreatedBy,
                P_CreationDate
            )
            RETURNING id INTO O_NewVehicleItemId;
            END IF;

  select TENANTID into l_TENANTID from vts_user_master_tbl where userid=P_CreatedBy;

  IF O_NewVehicleId > 0 THEN

--        FOR i IN (
--                   SELECT DISTINCT TRIM(REGEXP_SUBSTR(Plant, '[^,]+', 1, LEVEL)) AS PlantValue
--                        FROM vts_vehicle_item_details_vw
--                        WHERE ID = O_NewVehicleId
--                        CONNECT BY LEVEL <= REGEXP_COUNT(Plant, '[^,]+')
--                        START WITH Plant IS NOT NULL
--                ) LOOP
select count(1) into l_count from vts_vehicle_status_tbl where vendor_vehicle_id=O_NewVehicleId and plant_code=P_plant;
if l_count = 0 THEN 
                    insert into vts_vehicle_status_tbl(vendor_vehicle_id,plant_code,tenantid,rgapproved,rgapprovedby,rgapproveddate)
                    values(O_NewVehicleId,P_plant,l_TENANTID,'Y',P_CreatedBy,sysdate);
                    END IF;
--                END LOOP;


  END IF;
            Commit;
    END IF;
END VTS_ADD_VEHICLE_AT_REPORTING_GATE_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_CHECK_RAMP_CODE_EXISTS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_CHECK_RAMP_CODE_EXISTS_PROC" (
P_RampCode IN NVARCHAR2 ,
P_RampId IN NUMBER DEFAULT 0,
P_PlantId IN NUMBER DEFAULT 0,
O_Exists OUT NUMBER
)

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_CHECK_RAMP_CODE_EXISTS_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              CHECK RAMP CODE EXISTS

  /*************************************************************************************************************/

AS
BEGIN
SELECT COUNT(*)
INTO O_Exists
FROM vts_ramp_master_tbl
WHERE RampCode=P_RampCode AND P_PlantId =rampplantid
AND (P_RampId=0 OR RampId != P_RampId);
END VTS_CHECK_RAMP_CODE_EXISTS_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_DELETE_VEHICLE_AT_REPORTING_GATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_DELETE_VEHICLE_AT_REPORTING_GATE" 
(
    P_EntryMode IN NVARCHAR2,
    P_VehicleItemId IN INT DEFAULT 0,
    O_DeletedVehicleItemId OUT INT
)
AS
BEGIN
    IF P_EntryMode = 'MANNUAL' THEN
    delete from vts_vendor_vehicle_part_detail_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    delete from vts_vehicle_status_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    delete from  vts_vendor_vehicle_tbl where ID=P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
     IF P_EntryMode = 'PIN' THEN
    delete from vts_vehicle_status_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    update vts_vendor_vehicle_tbl set RG_ID_NO=null ,SHIFT=null where Id=P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
END VTS_DELETE_VEHICLE_AT_REPORTING_GATE;

/
--------------------------------------------------------
--  DDL for Procedure VTS_DELETE_VEHICLE_AT_REPORTING_GATE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_DELETE_VEHICLE_AT_REPORTING_GATE_PROC" 
(
    P_EntryMode IN NVARCHAR2,
    P_VehicleItemId IN INT DEFAULT 0,
    O_DeletedVehicleItemId OUT INT
)
 
AS
/**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_DELETE_VEHICLE_AT_REPORTING_GATE_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             DELETE VEHICLE AT REPORTING GATE

  /*************************************************************************************************************/

BEGIN
    IF P_EntryMode = 'MANNUAL' THEN
    delete from vts_vendor_vehicle_part_detail_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    delete from vts_vehicle_status_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    delete from  vts_vendor_vehicle_tbl where ID=P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
     IF P_EntryMode = 'PIN' THEN
    delete from vts_vehicle_status_tbl where VENDOR_VEHICLE_ID=P_VehicleItemId;
    update vts_vendor_vehicle_tbl set RG_ID_NO=null ,SHIFT=null where Id=P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
END VTS_DELETE_VEHICLE_AT_REPORTING_GATE_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETALL_EMPTYRAMP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETALL_EMPTYRAMP" (
                                    P_PlantCode in varchar2,
                                    cur_out OUT SYS_REFCURSOR
)
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_RAMP_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
         04/04/2024      Ram Krishn Mishra         To manage ramp master screen

  /*************************************************************************************************************/
AS
BEGIN
    OPEN cur_out FOR
        SELECT RAMPCODE 
        FROM VTS_RAMP_MASTER_TBL rm
        join vts_plant_master_tbl pm on (rm.RAMPPLANTID=pm.PLANTID)
        WHERE pm.PLANTCODE=P_PlantCode and rm.RAMPCODE NOT IN (
            SELECT attribute1 
            FROM vts_vehicle_status_tbl 
            WHERE spapproved = 'Y' 
              AND (
                  (ULAPPROVED IS NULL AND HOLD_STATUS IS NULL AND UNHOLD_STATUS IS NULL) 
                  OR (ULAPPROVED IS NULL AND HOLD_STATUS = 'Y' AND UNHOLD_STATUS = 'Y')
              )
        );
END VTS_GETALL_EMPTYRAMP;

/
--------------------------------------------------------
--  DDL for Procedure VTS_GETALL_EMPTYRAMP_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETALL_EMPTYRAMP_PROC" (
                                    P_PlantCode in varchar2,
                                    cur_out OUT SYS_REFCURSOR
)

AS
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GETALL_EMPTYRAMP_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
         04/04/2024      Ram Krishn Mishra        GETALL EMPTYRAMP 

  /*************************************************************************************************************/
BEGIN
    OPEN cur_out FOR
        SELECT RAMPCODE 
        FROM VTS_RAMP_MASTER_TBL rm
        join vts_plant_master_tbl pm on (rm.RAMPPLANTID=pm.PLANTID)
        WHERE pm.PLANTCODE=P_PlantCode and rm.RAMPCODE NOT IN (
            SELECT attribute1 
            FROM vts_vehicle_status_tbl 
            WHERE spapproved = 'Y' 
              AND (
                  (ULAPPROVED IS NULL AND HOLD_STATUS IS NULL AND UNHOLD_STATUS IS NULL) 
                  OR (ULAPPROVED IS NULL AND HOLD_STATUS = 'Y' AND UNHOLD_STATUS = 'Y')
              )
        );
END VTS_GETALL_EMPTYRAMP_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETMANUALVEHICLE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETMANUALVEHICLE_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'GetReportedVehicle',
                                         P_TenantId IN INT, 
                                         P_SearchText IN VARCHAR  DEFAULT '',
                                         P_EntryMode IN VARCHAR  DEFAULT '',
                                         P_PinNo IN VARCHAR  DEFAULT '',
                                         P_CreatedBy IN NUmber,
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_PageNumber IN INT DEFAULT 10,
                                         O_TotalCount OUT INT,
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR
                                        ) 
AS
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GetManualVehicle_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
         04/04/2024      Ram Krishn Mishra        GetManualVehicle

  /*************************************************************************************************************/

BEGIN


    IF P_Mode='GetReportedVehicle' THEN 

        SELECT COUNT(1)   
        INTO O_TotalCount
        FROM (
        select * from (SELECT CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE
        FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.vendor_vehicle_id
            JOIN vts_vehicle_status_tbl vs ON V.ID = vs.vendor_vehicle_id
        WHERE ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                     OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                )  
--                and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
                 and vs.TPAPPROVEDBY is null
        GROUP BY 
            V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME ) tcount
            where (LOWER(ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
            );

        OPEN C_Vehicle FOR
        select * from (
            SELECT 
                --ROW_NUMBER () OVER (ORDER BY V.ID DESC) RNo,
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                 JOIN vts_vehicle_status_tbl vs ON V.ID = vs.vendor_vehicle_id
            WHERE  ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(TRIM(P_SearchText) || '%')) 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                     OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(TRIM(P_SearchText)) || '%')
                ) 
--                and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
             and vs.TPAPPROVEDBY is null
            GROUP BY 
                V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME,V.VENDOR_ID
             ORDER BY min(ROWNUM) OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                FETCH NEXT P_PageSize ROWS ONLY) tcount
               where  (LOWER(ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
                ;    

        OPEN C_VehicleItem FOR 
            SELECT DISTINCT  V.ID,
                R.VENDOR_VEHICLE_ID as VehicleId,
                R.VENDOR_PIN_NO as VendorPin,
                R.INVOICE_NO as InoviceNumber,
                R.INVOICE_DATE as InoviceDate,
                R.PART_NO as PartNumber,
                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
                V.DISPATCH_DATE as DispatchDate,
                R.PLANT AS ItemPlant
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID    
                 JOIN vts_vehicle_status_tbl vs ON V.ID = vs.vendor_vehicle_id
            WHERE 
--            ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(P_SearchText) || '%')
--                OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(P_SearchText) || '%')
--                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(P_SearchText) || '%')
--                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(P_SearchText) || '%')
--                ) 
----                and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
--                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)  
            --    and 
                vs.TPAPPROVEDBY is null;


    END IF;

END VTS_GetManualVehicle_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETPINNO_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETPINNO_PROC" 
                                        (
                                         C_PinNo out SYS_REFCURSOR,
                                         P_TenantId IN INT,
                                         P_Mode IN VARCHAR  DEFAULT 'GetReportedPin'
                                        ) 
AS
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GetPinNo_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        30/07/2024      Kapil Kumar              GetPinNo

  /*************************************************************************************************************/

BEGIN
IF P_Mode='GetReportedPin' THEN 
begin 
 OPEN C_PinNo FOR 
            select DISTINCT R.VENDOR_PIN_NO as PinNumber FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.vendor_vehicle_id
        WHERE V.RG_ID_NO IS NULL and R.VENDOR_PIN_NO IS NOT NULL 
        and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        ;    

end;
ELSIF P_Mode='GetApprovedReportedPin' THEN 
begin 
 OPEN C_PinNo FOR 
         select DISTINCT R.VENDOR_PIN_NO as PinNumber FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.vendor_vehicle_id
            join vts_vehicle_status_tbl vs on vs.VENDOR_VEHICLE_ID=r.VENDOR_VEHICLE_ID
        WHERE V.RG_ID_NO IS not NULL
        and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        ;    


end;
end if;

END VTS_GetPinNo_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETVEHICLEFOR_STOREPERMISSION_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETVEHICLEFOR_STOREPERMISSION_PROC" 
                                        (
                                         P_UsereId IN INT DEFAULT 0,
                                         P_Mode IN VARCHAR  DEFAULT 'GetStorePermissionVehicle',
                                         P_TenantId IN INT,
                                         P_SearchText IN VARCHAR  DEFAULT null,
                                         P_PendingStatus IN VARCHAR  DEFAULT '',
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_PageNumber IN INT DEFAULT 10, 
                                         P_SelectedDropdownValue IN VARCHAR  DEFAULT null,
                                         O_TotalCount OUT INT,
                                         O_PendingSPACount OUT INT,
                                         O_PendingULACount OUT INT,
                                         O_PendingTPACount OUT INT,
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR,
                                         C_PlantRamp out SYS_REFCURSOR
                                        )
                                        
                                        
 

AS
/**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GetVehicleFor_StorePermission_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             Get Vehicle For Store Permission

  /*************************************************************************************************************/
V_RoleCode NVARCHAR2(100);

BEGIN
        BEGIN
         Select r.RoleCode INTO V_RoleCode from vts_role_master_tbl r 
              JOIN vts_user_role_mapping_tbl ur on r.roleid=ur.roleid
              JOIN vts_user_master_tbl um on um.UserId=ur.UserId
              Where um.UserId=P_UsereId AND r.RoleCode='Admin' and RowNum=1;
               EXCEPTION
                WHEN NO_DATA_FOUND THEN
                V_RoleCode:='';
         END;       


    IF P_Mode = 'GetStorePermissionVehicle' THEN
DBMS_OUTPUT.PUT_LINE('Mode is ' || 'GetStorePermissionVehicle');

if(P_SelectedDropdownValue is null) then
begin
    INSERT INTO VTS_TEMP_TABLE_TBL(
        VENDOR_VEHICLE_ID,
        VEHICLE_NUMBER,
        VENDOR_NAME,
        PLANT,
        ALLOCATED_RAMP_CODE,
        ISRGA,
        RGADATE,
        ISSPA,
        SPADATE,
        ISTPA,
        TPADATE,
        ISULA,
        ULADATE,
        Hold_Status,
        Hold_Date,
        UnHold_Status,
        UnHold_Date 
    )  
    SELECT 
        V.ID AS VendorVehicleId,
        V.vehicle_number AS VehicleNumber,
        V.VENDOR_NAME AS VendorName,
        R.PLANT,
        VS.attribute1 AS SelectedRamp,
        CASE WHEN VS.rgapproved = 'Y' THEN 1 ELSE 0 END,
        VS.rgapproveddate,
        CASE WHEN spapproved = 'Y' THEN 1 ELSE 0 END,
        spapproveddate,
        CASE WHEN tpapproved = 'Y' THEN 1 ELSE 0 END,
        tpapproveddate,
         CASE WHEN ulapproved = 'Y' THEN 1 ELSE 0 END,
        ulapproveddate    ,
        CASE WHEN Hold_Status = 'Y' THEN 1 ELSE 0 END,
        Hold_Date,
        CASE WHEN UnHold_Status = 'Y' THEN 1 ELSE 0 END,
        UnHold_Date        

    FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
        join (select pm.PLANTCODE
                  from vts_user_master_tbl u
                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
                  where  u.userid = CASE WHEN V_RoleCode='Admin' THEN u.userid ELSE P_UsereId END  ) p on p.PLANTCODE = R.PLANT     
    WHERE V.RG_ID_NO IS NOT NULL
        AND rgapproved = 'Y'
        and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        AND nvl(ulapproved,'N') = 'N'
        AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(P_SearchText) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(P_SearchText) || '%')


    )
    GROUP BY 
        V.ID,V.vehicle_number,V.VENDOR_NAME,R.PLANT,VS.attribute1,VS.rgapproved,VS.rgapproveddate,spapproved,spapproveddate,
        tpapproved,tpapproveddate,ulapproved,ulapproveddate ,Hold_Status,Hold_Date,UnHold_Status,UnHold_Date
    ORDER BY V.vehicle_number
; 
end;
else
begin
    INSERT INTO VTS_TEMP_TABLE_TBL(
        VENDOR_VEHICLE_ID,
        VEHICLE_NUMBER,
        VENDOR_NAME,
        PLANT,
        ALLOCATED_RAMP_CODE,
        ISRGA,
        RGADATE,
        ISSPA,
        SPADATE,
        ISTPA,
        TPADATE,
        ISULA,
        ULADATE,
        Hold_Status,
        Hold_Date,
        UnHold_Status,
        UnHold_Date 
    )   select * from (
    SELECT 
        V.ID AS VendorVehicleId,
        V.vehicle_number AS VehicleNumber,
        V.VENDOR_NAME AS VendorName,
        R.PLANT,
        VS.attribute1 AS SelectedRamp,
        CASE WHEN VS.rgapproved = 'Y' THEN 1 ELSE 0 END,
        VS.rgapproveddate,
        CASE WHEN spapproved = 'Y' THEN 1 ELSE 0 END,
        spapproveddate,
        CASE WHEN tpapproved = 'Y' THEN 1 ELSE 0 END,
        tpapproveddate,
         CASE WHEN ulapproved = 'Y' THEN 1 ELSE 0 END,
        ulapproveddate    ,
        CASE WHEN Hold_Status = 'Y' THEN 1 ELSE 0 END,
        Hold_Date,
        CASE WHEN UnHold_Status = 'Y' THEN 1 ELSE 0 END,
        UnHold_Date        

    FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
        join (select pm.PLANTCODE
                  from vts_user_master_tbl u
                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
                  where  u.userid = CASE WHEN V_RoleCode='Admin' THEN u.userid ELSE P_UsereId END  ) p on p.PLANTCODE = R.PLANT     
    WHERE V.RG_ID_NO IS NOT NULL
        AND rgapproved = 'Y'
        and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        AND nvl(ulapproved,'N') = 'N'
        AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(P_SearchText) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(P_SearchText) || '%')


    )
    GROUP BY 
        V.ID,V.vehicle_number,V.VENDOR_NAME,R.PLANT,VS.attribute1,VS.rgapproved,VS.rgapproveddate,spapproved,spapproveddate,
        tpapproved,tpapproveddate,ulapproved,ulapproveddate ,Hold_Status,Hold_Date,UnHold_Status,UnHold_Date
    ORDER BY V.vehicle_number) ttable where     ttable.VendorName in
--    case when P_SelectedDropdownValue is not null then 
    (select vendor_name from (
    SELECT REGEXP_SUBSTR(P_SelectedDropdownValue, '[^,]+', 1, LEVEL) AS vendor_name
    FROM dual
    CONNECT BY REGEXP_SUBSTR(P_SelectedDropdownValue, '[^,]+', 1, LEVEL) IS NOT NULL
    ))
--    else  ttable.VendorName end  
; 
end;
 end if;
    IF P_PendingStatus = 'PendingSPA' THEN
        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISRGA,0) = 1 AND NVL(V.ISSPA,0) = 0);
    ELSIF P_PendingStatus = 'PendingULA' THEN
        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISTPA,0) = 1 AND NVL(V.ISULA,0) = 0);
    ELSIF P_PendingStatus = 'PendingTPA' THEN
        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISSPA,0) = 1 AND NVL(V.ISTPA,0) = 0);
    END IF;

    SELECT COUNT(1) 
    INTO O_TotalCount
    FROM (SELECT 1
    FROM VTS_TEMP_TABLE_TBL V
        ); 

    SELECT COUNT(1) 
    INTO O_PendingSPACount
    FROM (SELECT 1
    FROM VTS_TEMP_TABLE_TBL V
    WHERE NVL(V.ISRGA,0) = 1 AND NVL(V.ISSPA,0) = 0
        );

    SELECT COUNT(1) 
    INTO O_PendingTPACount
    FROM (SELECT 1
    FROM VTS_TEMP_TABLE_TBL V
    WHERE NVL(V.ISSPA,0) = 1 AND NVL(V.ISTPA,0) = 0
        );

    SELECT COUNT(1) 
    INTO O_PendingULACount
    FROM (SELECT 1
    FROM VTS_TEMP_TABLE_TBL V
    WHERE NVL(V.ISTPA,0) = 1 AND NVL(V.ISULA,0) = 0
        );     

    OPEN C_Vehicle FOR

    SELECT 
        V.VENDOR_VEHICLE_ID AS VendorVehicleId,
        v.VEHICLE_NUMBER AS VehicleNumber,
        V.VENDOR_NAME AS VendorName,
        V.PLANT,
        V.ALLOCATED_RAMP_CODE AS SelectedRamp,
        V.ISRGA,
        V.RGADATE,
        nvl(V.ISSPA, 0) as ISSPA,
        V.SPADATE,
        nvl(V.ISTPA, 0) as ISTPA,
        V.TPADATE,
        nvl(V.ISULA, 0) as ISULA,
        V.ULADATE,
         nvl(V.Hold_Status, 0) as Hold_Status,
        V.Hold_Date,
         nvl(V.UnHold_Status, 0) as UnHold_Status,
        V.UnHold_Date,
        case when nvl(V.ISTPA, 0) = 1 and nvl(V.ISULA, 0) = 0 then 'InsideFactory' 
             when nvl(V.ISTPA, 0) = 0 then 'OutsideFactory'
        Else ' ' end as Priority,
        CASE 
            WHEN INSTR(LISTAGG( distinct RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.VENDOR_VEHICLE_ID), ',') > 0 THEN 'Mix' 
            ELSE '' 
          END AS RMType
    FROM VTS_TEMP_TABLE_TBL V
    JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.VENDOR_VEHICLE_ID = RT.VENDOR_VEHICLE_ID
    where  RT.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
    group by V.VENDOR_VEHICLE_ID,v.VEHICLE_NUMBER ,V.VENDOR_NAME, V.PLANT,V.ALLOCATED_RAMP_CODE, V.ISRGA,V.RGADATE,
    V.ISSPA, V.SPADATE,V.ISTPA,V.TPADATE,V.ISULA,V.ULADATE,V.RGADATE,V.Hold_Status,V.Hold_Date,V.UnHold_Status,V.UnHold_Date
    ORDER BY V.RGADATE OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
    FETCH NEXT P_PageSize ROWS ONLY; 

    OPEN C_VehicleItem FOR 
    SELECT DISTINCT
        R.VENDOR_VEHICLE_ID as VehicleId,
        V.MOBILE_NO as PhoneNo,
        R.VENDOR_PIN_NO as VendorPin,
        R.INVOICE_NO as InoviceNumber,
        R.INVOICE_DATE as InoviceDate,
        R.PART_NO as PartNumber,
        R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
        V.DISPATCH_DATE as DispatchDate,
        R.PLANT AS ItemPlant
    FROM VTS_TEMP_TABLE_TBL T 
        JOIN VTS_VENDOR_VEHICLE_TBL V ON T.VENDOR_VEHICLE_ID = V.ID
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID AND T.PLANT = R.PLANT
        where  R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId); 

    open C_PlantRamp for     
    select pm.PLANTCODE as PlantCode,ramp.RampCode
    from vts_user_master_tbl u
        join vts_user_role_mapping_tbl ur on u.userid = ur.userid
        join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
        join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
        JOIN vts_ramp_master_tbl ramp ON ramp.RampPlantId = pm.PlantId
    where u.userid =  P_UsereId
    and pm.TENANTID=P_TenantId;
    END IF;
     IF P_Mode = 'getSupplierData' THEN
DBMS_OUTPUT.PUT_LINE('Mode is ' || 'GetStorePermissionVehicle');

    INSERT INTO VTS_TEMP_TABLE_TBL(
        VENDOR_VEHICLE_ID,
        VEHICLE_NUMBER,
        VENDOR_NAME,
        PLANT,
        ALLOCATED_RAMP_CODE,
        ISRGA,
        RGADATE,
        ISSPA,
        SPADATE,
        ISTPA,
        TPADATE,
        ISULA,
        ULADATE,
        Hold_Status,
        Hold_Date,
        UnHold_Status,
        UnHold_Date 
    )   
    SELECT 
        V.ID AS VendorVehicleId,
        V.vehicle_number AS VehicleNumber,
        V.VENDOR_NAME AS VendorName,
        R.PLANT,
        VS.attribute1 AS SelectedRamp,
        CASE WHEN VS.rgapproved = 'Y' THEN 1 ELSE 0 END,
        VS.rgapproveddate,
        CASE WHEN spapproved = 'Y' THEN 1 ELSE 0 END,
        spapproveddate,
        CASE WHEN tpapproved = 'Y' THEN 1 ELSE 0 END,
        tpapproveddate,
         CASE WHEN ulapproved = 'Y' THEN 1 ELSE 0 END,
        ulapproveddate    ,
        CASE WHEN Hold_Status = 'Y' THEN 1 ELSE 0 END,
        Hold_Date,
        CASE WHEN UnHold_Status = 'Y' THEN 1 ELSE 0 END,
        UnHold_Date        

    FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
        join (select pm.PLANTCODE
                  from vts_user_master_tbl u
                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
                  where  u.userid = CASE WHEN V_RoleCode='Admin' THEN u.userid ELSE P_UsereId END  ) p on p.PLANTCODE = R.PLANT     
    WHERE V.RG_ID_NO IS NOT NULL
        AND rgapproved = 'Y'
        and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        AND nvl(ulapproved,'N') = 'N'
        AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(P_SearchText) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(P_SearchText) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(P_SearchText) || '%')

    )
    GROUP BY 
        V.ID,V.vehicle_number,V.VENDOR_NAME,R.PLANT,VS.attribute1,VS.rgapproved,VS.rgapproveddate,spapproved,spapproveddate,
        tpapproved,tpapproveddate,ulapproved,ulapproveddate ,Hold_Status,Hold_Date,UnHold_Status,UnHold_Date
    ORDER BY V.vehicle_number; 

--    IF P_PendingStatus = 'PendingSPA' THEN
--        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISRGA,0) = 1 AND NVL(V.ISSPA,0) = 0);
--    ELSIF P_PendingStatus = 'PendingULA' THEN
--        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISTPA,0) = 1 AND NVL(V.ISULA,0) = 0);
--    ELSIF P_PendingStatus = 'PendingTPA' THEN
--        DELETE FROM VTS_TEMP_TABLE_TBL V WHERE not (NVL(V.ISSPA,0) = 1 AND NVL(V.ISTPA,0) = 0);
--    END IF;

--    SELECT COUNT(1) 
--    INTO O_TotalCount
--    FROM (SELECT 1
--    FROM VTS_TEMP_TABLE_TBL V
--        ); 

--    SELECT COUNT(1) 
--    INTO O_PendingSPACount
--    FROM (SELECT 1
--    FROM VTS_TEMP_TABLE_TBL V
--    WHERE NVL(V.ISRGA,0) = 1 AND NVL(V.ISSPA,0) = 0
--        );

--    SELECT COUNT(1) 
--    INTO O_PendingTPACount
--    FROM (SELECT 1
--    FROM VTS_TEMP_TABLE_TBL V
--    WHERE NVL(V.ISSPA,0) = 1 AND NVL(V.ISTPA,0) = 0
--        );
--
--    SELECT COUNT(1) 
--    INTO O_PendingULACount
--    FROM (SELECT 1
--    FROM VTS_TEMP_TABLE_TBL V
--    WHERE NVL(V.ISTPA,0) = 1 AND NVL(V.ISULA,0) = 0
--        );     

    OPEN C_Vehicle FOR

    SELECT 
--        V.VENDOR_VEHICLE_ID AS VendorVehicleId,
--        v.VEHICLE_NUMBER AS VehicleNumber,
  distinct      V.VENDOR_NAME AS VendorName
--        ,
--        V.PLANT,
--        V.ALLOCATED_RAMP_CODE AS SelectedRamp,
--        V.ISRGA,
--        V.RGADATE,
--        nvl(V.ISSPA, 0) as ISSPA,
--        V.SPADATE,
--        nvl(V.ISTPA, 0) as ISTPA,
--        V.TPADATE,
--        nvl(V.ISULA, 0) as ISULA,
--        V.ULADATE,
--         nvl(V.Hold_Status, 0) as Hold_Status,
--        V.Hold_Date,
--         nvl(V.UnHold_Status, 0) as UnHold_Status,
--        V.UnHold_Date,
--        case when nvl(V.ISTPA, 0) = 1 and nvl(V.ISULA, 0) = 0 then 'InsideFactory' 
--             when nvl(V.ISTPA, 0) = 0 then 'OutsideFactory'
--        Else ' ' end as Priority,
--        CASE 
--            WHEN INSTR(LISTAGG( distinct RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.VENDOR_VEHICLE_ID), ',') > 0 THEN 'Mix' 
--            ELSE '' 
--          END AS RMType
    FROM VTS_TEMP_TABLE_TBL V
    JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.VENDOR_VEHICLE_ID = RT.VENDOR_VEHICLE_ID
    where  RT.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId) order by VendorName ;
--    group by V.VENDOR_VEHICLE_ID,v.VEHICLE_NUMBER ,V.VENDOR_NAME, V.PLANT,V.ALLOCATED_RAMP_CODE, V.ISRGA,V.RGADATE,
--    V.ISSPA, V.SPADATE,V.ISTPA,V.TPADATE,V.ISULA,V.ULADATE,V.RGADATE,V.Hold_Status,V.Hold_Date,V.UnHold_Status,V.UnHold_Date
--    ORDER BY V.RGADATE OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
--    FETCH NEXT P_PageSize ROWS ONLY; 

--    OPEN C_VehicleItem FOR 
--    SELECT DISTINCT
--        R.VENDOR_VEHICLE_ID as VehicleId,
--        R.VENDOR_PIN_NO as VendorPin,
--        R.INVOICE_NO as InoviceNumber,
--        R.INVOICE_DATE as InoviceDate,
--        R.PART_NO as PartNumber,
--        R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
--        V.DISPATCH_DATE as DispatchDate,
--        R.PLANT AS ItemPlant
--    FROM VTS_TEMP_TABLE_TBL T 
--        JOIN VTS_VENDOR_VEHICLE_TBL V ON T.VENDOR_VEHICLE_ID = V.ID
--        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID AND T.PLANT = R.PLANT
--        where  R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId); 

--    open C_PlantRamp for     
--    select pm.PLANTCODE as PlantCode,ramp.RampCode
--    from vts_user_master_tbl u
--        join vts_user_role_mapping_tbl ur on u.userid = ur.userid
--        join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
--        join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
--        JOIN vts_ramp_master_tbl ramp ON ramp.RampPlantId = pm.PlantId
--    where u.userid =  P_UsereId
--    and pm.TENANTID=P_TenantId;
    END IF;
    DELETE FROM VTS_TEMP_TABLE_TBL;
END VTS_GetVehicleFor_StorePermission_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETVEHICLELIST_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETVEHICLELIST_PROC" 
                                        (
                                         C_Vehicle out SYS_REFCURSOR
                                         
                                        ) 
                            
AS
   /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GetVehicleList_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Get Vehicle List

  /*************************************************************************************************************/          
BEGIN
OPEN C_Vehicle FOR


select * from VTS_VENDOR_VEHICLE_TBL;


END VTS_GetVehicleList_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GETVEHICLEREPORTINGDATA_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GETVEHICLEREPORTINGDATA_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'GetReportedVehicle',
                                         P_TenantId IN INT, 
                                         P_SearchText IN VARCHAR  DEFAULT '',
                                         P_EntryMode IN VARCHAR  DEFAULT '',
                                         P_PinNo IN VARCHAR  DEFAULT '',
                                         P_CreatedBy IN NUmber,
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_PageNumber IN INT DEFAULT 10,
                                         O_TotalCount OUT INT,
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR
                                        ) 
  
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_GetVehicleReportingData_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             Get Vehicle Reporting Data

  /*************************************************************************************************************/

BEGIN


    IF P_Mode='GetReportedVehicle' THEN 

        SELECT COUNT(1)   
        INTO O_TotalCount
        FROM (SELECT 1
        FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.vendor_vehicle_id
        WHERE V.RG_ID_NO IS NULL 
            AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                     OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                )  and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        GROUP BY 
            V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME 
            );

        OPEN C_Vehicle FOR
            SELECT 
                --ROW_NUMBER () OVER (ORDER BY V.ID DESC) RNo,
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
            WHERE 
                V.RG_ID_NO IS NULL 
                AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                     OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                ) 
                and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
            GROUP BY 
                V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME,V.VENDOR_ID
             ORDER BY min(ROWNUM) OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                FETCH NEXT P_PageSize ROWS ONLY;    

        OPEN C_VehicleItem FOR 
            SELECT DISTINCT
                R.VENDOR_VEHICLE_ID as VehicleId,
                R.VENDOR_PIN_NO as VendorPin,
                R.INVOICE_NO as InoviceNumber,
                R.INVOICE_DATE as InoviceDate,
                R.PART_NO as PartNumber,
                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
                V.DISPATCH_DATE as DispatchDate,
                R.PLANT AS ItemPlant
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID     
            WHERE 
                V.RG_ID_NO IS NULL
                AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                ) and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)    ;

    ELSIF P_Mode='GetReportingGateApprovedVehicle' THEN 

        SELECT COUNT(1) 
        INTO O_TotalCount
        FROM (
        select * from (
        SELECT CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE
        FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.vendor_vehicle_id
        WHERE 
            V.RG_ID_NO IS NOT NULL AND  V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where rgApproved='Y' and rgApprovedBy=P_CreatedBy)

            AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                )and  (LOWER(nvl(r.VENDOR_PIN_NO,'x')) LIKE '%' || LOWER(P_PinNo) || '%')
                 and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
        GROUP BY 
            V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME
            ) tcount where (LOWER(ENTRYMODE) LIKE '%' || LOWER(trim(P_EntryMode)) || '%') 
            );

        OPEN C_Vehicle FOR
select * from (
            SELECT 
                --ROW_NUMBER () OVER (ORDER BY V.ID DESC) RNo,
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType, 
                 Min(1) as IsApproved,
                 Max(vst.RGAPPROVEDDATE) AS ReportedDate,
                 Max(V.RG_ID_NO) as RgIDNumber
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                join vts_vehicle_status_tbl vst on vst.VENDOR_VEHICLE_ID=R.VENDOR_VEHICLE_ID
            WHERE 
                V.RG_ID_NO IS NOT NULL AND  V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where rgApproved='Y' and rgApprovedBy=P_CreatedBy)
                AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                )and  (
                LOWER(nvl(r.VENDOR_PIN_NO,'x')) LIKE '%' || LOWER(P_PinNo) || '%' 
                )
                 and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
            GROUP BY 
                V.ID,V.VEHICLE_NUMBER,V.VENDOR_NAME,V.VENDOR_ID
             ORDER BY min(ROWNUM) OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                FETCH NEXT P_PageSize ROWS ONLY
                )tcount where (LOWER(ENTRYMODE) LIKE '%' || LOWER(trim(P_EntryMode)) || '%') ;    

        OPEN C_VehicleItem FOR  
            SELECT DISTINCT
                R.VENDOR_VEHICLE_ID as VehicleId,
                R.VENDOR_PIN_NO as VendorPin,
                R.INVOICE_NO as InoviceNumber,
                R.INVOICE_DATE as InoviceDate,
                R.PART_NO as PartNumber,
                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
                V.DISPATCH_DATE as DispatchDate,
                R.PLANT AS ItemPlant
            FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID     
            WHERE 
                V.RG_ID_NO IS NOT NULL
--                AND ((LOWER(V.VENDOR_NAME) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
--                    OR  (LOWER(V.VEHICLE_NUMBER) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
--                    OR  (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
--                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
--                )and  (LOWER(r.VENDOR_PIN_NO) LIKE '%' || LOWER(P_PinNo) || '%')
                ; 
    END IF;

END VTS_GetVehicleReportingData_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GET_PLANT_RAMP_INVENTORY_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GET_PLANT_RAMP_INVENTORY_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'TokenPrint',
                                         P_TenantId IN INT,
                                         C_Vehicle out SYS_REFCURSOR                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Get_PLANT_RAMP_INVENTORY_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Kishan Singh              Get PLANT RAMP INVENTORY

  /*************************************************************************************************************/



BEGIN        

    OPEN C_Vehicle FOR
    SELECT p.PlantCode,
           COUNT(r.rampcode) AS Total,
           COUNT(CASE WHEN st.attribute1 IS NOT NULL THEN 1 END) AS Used,
           COUNT(r.rampcode) - COUNT(CASE WHEN st.attribute1 IS NOT NULL THEN 1 END) AS Balance,
           (nvl(q.TotalQueue,0) - nvl(Aq.TotalApproved,0)) as Queue
    FROM vts_plant_master_tbl p
    JOIN vts_ramp_master_tbl r ON p.plantid = r.rampplantid 
    LEFT JOIN VTS_VEHICLE_STATUS_TBL st ON st.attribute1 = r.rampcode
                                          AND st.SPAPPROVED = 'Y' 
                                          AND NVL(ST.ULAPPROVED,'N') = 'N'
    LEFT JOIN (select plant, count(1) as TotalQueue 
                    from (SELECT v.plant
                            FROM vts_vendor_vehicle_part_detail_tbl v 
                            group by v.plant,v.VENDOR_VEHICLE_ID
                            )
                    group by plant
              ) q ON q.plant = p.PlantCode
    LEFT JOIN (select plant, count(1) as TotalApproved 
                    from (SELECT v.plant
                            FROM vts_vendor_vehicle_part_detail_tbl v 
                            join VTS_VEHICLE_STATUS_TBL VS ON V.VENDOR_VEHICLE_ID = VS.VENDOR_VEHICLE_ID
                            AND nvl(VS.SPAPPROVED,'N') = 'Y'
                            --where v.plant = 'APW'
                                --AND VS.SPAPPROVED = case when Vs.VENDOR_VEHICLE_ID is not null then 'N' else null end
                            group by v.plant,v.VENDOR_VEHICLE_ID
                            )
                    group by plant
              ) Aq ON Aq.plant = p.PlantCode           
    WHERE p.tenantid = 1
    GROUP BY p.PlantCode,q.TotalQueue,Aq.TotalApproved;

END VTS_Get_PLANT_RAMP_INVENTORY_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GET_TOKENPRINT_DETAILS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GET_TOKENPRINT_DETAILS_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'TokenPrint',
                                         P_VendorVehicleId IN VARCHAR,
                                         C_Vehicle out SYS_REFCURSOR                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Get_TokenPrint_Details_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Kishan Singh            Get TokenPrint Details

  /*************************************************************************************************************/



BEGIN        

    OPEN C_Vehicle FOR
    select 
        V.VEHICLE_NUMBER AS VehicleNumber,
        V.RG_ID_NO AS RGIDNO,
        V.VENDOR_NAME AS SupplierName,
        LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
        LISTAGG( distinct VS.ATTRIBUTE1, ', ') WITHIN GROUP (ORDER BY V.ID) AS RAMP,
        min(VS.rgapproveddate) as Reporting,
        min(VS.spapproveddate) as Approval
    FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code       
     WHERE V.RG_ID_NO IS NOT NULL
        AND VS.tpapproved = 'Y'
        and V.id = P_VendorVehicleId
     GROUP BY   V.VEHICLE_NUMBER ,V.RG_ID_NO,V.VENDOR_NAME
    order by V.id;



END VTS_Get_TokenPrint_Details_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_GET_UNLOADED_TOKEN_DETAILS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GET_UNLOADED_TOKEN_DETAILS_PROC" 
                                        (
                                        P_Mode IN VARCHAR  DEFAULT 'GetReportedVehicle',
                                         P_SearchText IN VARCHAR  DEFAULT '',
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_PageNumber IN INT DEFAULT 10, 
                                         P_LoggedInUserRole IN VARCHAR  DEFAULT '',
                                         O_TotalCount OUT INT,
                                         P_StatusCode VARCHAR  DEFAULT 'ULA',
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR
                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Login_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Login purpose

  /*************************************************************************************************************/



V_Next_Status NVARCHAR2(100);
BEGIN
  DBMS_OUTPUT.PUT_LINE(P_StatusCode);


V_Next_Status := Case WHEN P_StatusCode='SPA' THEN 'SPA,TPA' ELSE 
                CASE WHEN P_StatusCode='TPA' THEN 'SPA,TPA' ELSE
                CASE WHEN P_StatusCode='ULA' THEN 'ULA,OGA' ELSE
                CASE WHEN P_StatusCode='OGA' THEN 'ULA,OGA' END
                END END END;

        DBMS_OUTPUT.PUT_LINE(V_Next_Status);          
      SELECT COUNT(1) INTO O_TotalCount
        FROM vts_vehicle_item_details_vw V 
        JOIN (
            SELECT V1.Vendor_Vehicle_Id , status_code,
                   ROW_NUMBER() OVER (PARTITION BY vendor_vehicle_id ORDER BY creation_date DESC) AS rn
            FROM VTS_VEHICLE_ITEM_DETAILS_VW V1
            WHERE status_code IN (SELECT regexp_substr(V_Next_Status, '[^,]+', 1, level) AS status_code
                          FROM dual
                          CONNECT BY regexp_substr(V_Next_Status, '[^,]+', 1, level) IS NOT NULL)
        ) subquery ON V.ID = subquery.Vendor_Vehicle_Id
        WHERE subquery.status_code=P_StatusCode AND  V.rgidnumber IS NOT NULL AND subquery.rn = 1
        AND  ((LOWER(V.SupplierName) LIKE '%' || LOWER(P_SearchText) || '%') 
                            OR  (LOWER(V.VehicleNumber) LIKE '%' || LOWER(P_SearchText) || '%')
                        );


        OPEN C_Vehicle FOR

         SELECT V.*,CASE WHEN (P_LoggedInUserRole='TP' AND subquery.status_code='TPA') 
         OR (P_LoggedInUserRole='OG' AND subquery.status_code='OGA') THEN 'Approved' ELSE '' END AS CurrentStatus
    FROM vts_vehicle_item_details_vw V
    JOIN (
        SELECT V1.Vendor_Vehicle_Id, status_code,
               ROW_NUMBER() OVER (PARTITION BY vendor_vehicle_id ORDER BY creation_date DESC) AS rn
        FROM VTS_VEHICLE_ITEM_DETAILS_VW V1
        WHERE  status_code IN (SELECT regexp_substr(V_Next_Status, '[^,]+', 1, level) AS status_code
                          FROM dual
                          CONNECT BY regexp_substr(V_Next_Status, '[^,]+', 1, level) IS NOT NULL)
    ) subquery ON V.ID = subquery.Vendor_Vehicle_Id
    WHERE subquery.status_code=P_StatusCode AND V.rgidnumber IS NOT NULL AND subquery.rn = 1

ORDER BY V.creation_date DESC OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                        FETCH NEXT P_PageSize ROWS ONLY;    


        OPEN C_VehicleItem FOR 
            SELECT DISTINCT
                R.VENDOR_VEHICLE_ID as VehicleId,
                R.VENDOR_PIN_NO as VendorPin,
                R.INVOICE_NO as InoviceNumber,
                R.INVOICE_DATE as InoviceDate,
                R.PART_NO as PartNumber,
                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
                V.DISPATCH_DATE as DispatchDate,
                R.PLANT AS ItemPlant
            FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID                  
            WHERE  V.RG_ID_NO IS NOT NULL ;



END VTS_Get_Unloaded_Token_Details_PROC;







/
--------------------------------------------------------
--  DDL for Procedure VTS_GET_UNLOADED_VEHICLE_DETAILS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_GET_UNLOADED_VEHICLE_DETAILS_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'GetUnloadedeVehicle',
                                         P_TenantId IN INT, 
                                         P_SupplierName IN VARCHAR DEFAULT '',
                                         P_VehicleNumber IN VARCHAR DEFAULT '',
                                         P_FromDate IN VARCHAR  DEFAULT '',
                                         P_ToDate IN VARCHAR  DEFAULT '',
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_PageNumber IN INT DEFAULT 10, 
                                         P_LoggedInUserId IN INT  DEFAULT 0,
                                         O_TotalCount OUT INT,
                                         C_Vehicle out SYS_REFCURSOR                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Get_Unloaded_Vehicle_Details_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Kishan Singh            Get Unloaded Vehicle Details

  /*************************************************************************************************************/



BEGIN

--    select COUNT(1)
--    INTO O_TotalCount
--    from (SELECT COUNT(1)
--    FROM VTS_VENDOR_VEHICLE_TBL V
--        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
--        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
--        join (select pm.PLANTCODE
--                  from vts_user_master_tbl u
--                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
--                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
--                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
--                  where u.userid =  (CASE WHEN P_LoggedInUserId=0 THEN u.userid ELSE P_LoggedInUserId END)) p on p.PLANTCODE = R.PLANT 
--        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID          
--     WHERE V.RG_ID_NO IS NOT NULL
--        AND ulapproved = 'Y' 
--         and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
--      AND ( NVL(V.VENDOR_NAME, '') = ''
--            OR (LOWER(V.VENDOR_NAME) like '%' || lower(P_SupplierName) || '%')
--        )
--      AND ( NVL(V.VEHICLE_NUMBER, '') = '' 
--            OR (V.VEHICLE_NUMBER like '%' || P_VehicleNumber || '%')
--           )
--       AND TRUNC(VS.ulapproveddate) >= case when NVL(P_FromDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_FromDate, 'DD-Mon-YY')  end
--       AND TRUNC(VS.ulapproveddate) <= case when NVL(P_ToDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_ToDate, 'DD-Mon-YY')  end    
--    group by V.VEHICLE_NUMBER,V.VENDOR_ID,V.VENDOR_NAME,r.PLANT,VS.rgapproveddate,VS.spapproveddate,VS.ogapproveddate ,VS.ulapproveddate,V.CREATION_DATE , VS.tpapproveddate) 
--    ;       
select COUNT(1) INTO O_TotalCount from (
SELECT DISTINCT V.ID,
    to_char(VS.rgapproveddate,'mm') AS Month,
   'Week ' || to_char(VS.rgapproveddate,'IW') AS Week,
   case when V.SHIFT='A' then 'Day'
   when V.SHIFT='B' then 'Night' else '' end AS Shift,
    V.VEHICLE_NUMBER AS VehicleNumber,
    'RM' AS VehicleCategory,
     REPLACE(SUBSTR(V.vendor_name, 1, INSTR(V.vendor_name, '_', -1) - 1), 'EAIL_', '') AS supplierName,
    SUBSTR(V.vendor_name, INSTR(V.vendor_name, '_', -1) + 1) AS SupplierCode,
    '30' AS AllowedTime,  
    LISTAGG(DISTINCT  RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) as PLANT,
    LISTAGG(DISTINCT  SUBSTR(VVST.ATTRIBUTE1, INSTR(VVST.ATTRIBUTE1, '-') + 1), ', ') WITHIN GROUP (ORDER BY V.ID) as RampNo,
--    SUBSTR(VS.ATTRIBUTE1, INSTR(VS.ATTRIBUTE1, '-') + 1)   AS RampNo,
    LISTAGG(DISTINCT RT.PART_NO, ', ') WITHIN GROUP (ORDER BY V.ID) AS PartNumber,
    V.DISPATCH_DATE,
   (select * from (
 select  TO_CHAR( vss.rgapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1) as ReportingGateApproval,
 (select * from (
 select  TO_CHAR( vss.tpapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1) as TPAApproveddate,
 (select * from (
 select  TO_CHAR( vss.ulapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate Desc ) where ROWNUM = 1) as RampApprovalTime,
    VTS_GET_TIME_DIFFERENCE_Fun(TO_CHAR(
    (select * from (
 select  vss.tpapproveddate  from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1), 'dd.mm.yyyy hh24:mi'),
 TO_CHAR(
    (select * from (
 select  vss.ulapproveddate from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate Desc ) where ROWNUM = 1)
 , 'dd.mm.yyyy hh24:mi')) AS TotalTimeInFactoryInside,

    CASE 
        WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
        ELSE '' 
    END AS RMType
       FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
        JOIN VTS_VEHICLE_STATUS_TBL VVST ON V.ID = VVST.VENDOR_VEHICLE_ID --AND R.PLANT = VVST.plant_code
        join (select pm.PLANTCODE
                  from vts_user_master_tbl u
                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
                  where u.userid =  (CASE WHEN 0=0 THEN u.userid ELSE 0 END)) p on p.PLANTCODE = R.PLANT 
        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID      
     WHERE V.RG_ID_NO IS NOT NULL
        AND VS.ulapproved = 'Y' 
         and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
      AND ( NVL(V.VENDOR_NAME, '') = ''
            OR (LOWER(V.VENDOR_NAME) like '%' || lower(P_SupplierName) || '%')
        )
      AND ( NVL(V.VEHICLE_NUMBER, '') = '' 
            OR (V.VEHICLE_NUMBER like '%' || P_VehicleNumber || '%')
           )
       AND TRUNC(VS.ulapproveddate) >= case when NVL(P_FromDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_FromDate, 'DD-Mon-YY')  end
       AND TRUNC(VS.ulapproveddate) <= case when NVL(P_ToDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_ToDate, 'DD-Mon-YY')  end    
    group by  V.VEHICLE_NUMBER,V.VENDOR_NAME,r.PLANT,VS.rgapproveddate,VS.ulapproveddate,V.ID,R.PLANT
    , VS.tpapproveddate , V.SHIFT ,VS.ATTRIBUTE1,v.DISPATCH_DATE
);

--    OPEN C_Vehicle FOR
--     SELECT 
--    to_char(VS.rgapproveddate,'mm') AS Month,
--   'Week ' || to_char(VS.rgapproveddate,'IW') AS Week,
--   case when V.SHIFT='A' then 'Day'
--   when V.SHIFT='B' then 'Night' else '' end AS Shift,
--    V.VEHICLE_NUMBER AS VehicleNumber,
--    'RM' AS VehicleCategory,
--     REPLACE(SUBSTR(V.vendor_name, 1, INSTR(V.vendor_name, '_', -1) - 1), 'EAIL_', '') AS supplierName,
--    SUBSTR(V.vendor_name, INSTR(V.vendor_name, '_', -1) + 1) AS SupplierCode,
--    '30' AS AllowedTime,  
--    R.PLANT,
--    --SUBSTR(VS.ATTRIBUTE1, INSTR(VS.ATTRIBUTE1, '-') + 1) AS RampNo,
--    LISTAGG(DISTINCT RT.PART_NO, ', ') WITHIN GROUP (ORDER BY V.ID) AS PartNumber,
--    V.DISPATCH_DATE,
--    VS.rgapproveddate AS ReportingGateApproval,
--    VS.tpapproveddate AS TPAApproveddate,
--    VS.ulapproveddate AS RampApprovalTime,
--    VTS_GET_TIME_DIFFERENCE_Fun(TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')) AS TotalTimeInFactoryInside,
--
--    CASE 
--        WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
--        ELSE '' 
--    END AS RMType
--       FROM VTS_VENDOR_VEHICLE_TBL V
--        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
--        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
--        join (select pm.PLANTCODE
--                  from vts_user_master_tbl u
--                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
--                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
--                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
--                  where u.userid =  (CASE WHEN P_LoggedInUserId=0 THEN u.userid ELSE P_LoggedInUserId END)) p on p.PLANTCODE = R.PLANT 
--        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID          
--     WHERE V.RG_ID_NO IS NOT NULL
--        AND ulapproved = 'Y' 
--         and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
--      AND ( NVL(V.VENDOR_NAME, '') = ''
--            OR (LOWER(V.VENDOR_NAME) like '%' || lower(P_SupplierName) || '%')
--        )
--      AND ( NVL(V.VEHICLE_NUMBER, '') = '' 
--            OR (V.VEHICLE_NUMBER like '%' || P_VehicleNumber || '%')
--           )
--       AND TRUNC(VS.ulapproveddate) >= case when NVL(P_FromDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_FromDate, 'DD-Mon-YY')  end
--       AND TRUNC(VS.ulapproveddate) <= case when NVL(P_ToDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_ToDate, 'DD-Mon-YY')  end    
--    group by  V.VEHICLE_NUMBER,V.VENDOR_ID,V.VENDOR_NAME,r.PLANT,VS.rgapproveddate,VS.spapproveddate,VS.ogapproveddate ,VS.ulapproveddate
--    ,V.CREATION_DATE , VS.tpapproveddate , V.SHIFT ,VS.Hold_Date,VS.UnHold_Date,V.RG_ID_NO,VS.ATTRIBUTE1,v.DISPATCH_DATE
--    ORDER BY V.VEHICLE_NUMBER,VS.ulapproveddate OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
--    FETCH NEXT P_PageSize ROWS ONLY;

OPEN C_Vehicle FOR
select DISTINCT ID,MONTH,WEEK,SHIFT,VEHICLENUMBER,VEHICLECATEGORY,SUPPLIERNAME,SUPPLIERCODE,	
ALLOWEDTIME,PLANT,RAMPNO,PARTNUMBER,DISPATCH_DATE,REPORTINGGATEAPPROVAL,TPAAPPROVEDDATE,
RAMPAPPROVALTIME,
SUBSTR(TOTALTIMEINFACTORYINSIDE, 1, LENGTH(TOTALTIMEINFACTORYINSIDE) - 3) as TOTALTIMEINFACTORYINSIDE
,RMTYPE
from (
SELECT  V.ID,
    to_char(VS.rgapproveddate,'mm') AS Month,
   'Week ' || to_char(VS.rgapproveddate,'IW') AS Week,
   case when V.SHIFT='A' then 'Day'
   when V.SHIFT='B' then 'Night' else '' end AS Shift,
    V.VEHICLE_NUMBER AS VehicleNumber,
    'RM' AS VehicleCategory,
     REPLACE(SUBSTR(V.vendor_name, 1, INSTR(V.vendor_name, '_', -1) - 1), 'EAIL_', '') AS supplierName,
    SUBSTR(V.vendor_name, INSTR(V.vendor_name, '_', -1) + 1) AS SupplierCode,
    '30' AS AllowedTime,  
    LISTAGG(DISTINCT  RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID) as PLANT,
    LISTAGG(DISTINCT  SUBSTR(VVST.ATTRIBUTE1, INSTR(VVST.ATTRIBUTE1, '-') + 1), ', ') WITHIN GROUP (ORDER BY V.ID) as RampNo,
--    SUBSTR(VS.ATTRIBUTE1, INSTR(VS.ATTRIBUTE1, '-') + 1)   AS RampNo,
    LISTAGG(DISTINCT RT.PART_NO, ', ') WITHIN GROUP (ORDER BY V.ID) AS PartNumber,
    V.DISPATCH_DATE,
   to_date((select * from (
 select  TO_CHAR( vss.rgapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1),'dd.mm.yyyy hh24:mi:ss')
 as ReportingGateApproval,
 to_date((select * from (
 select  TO_CHAR( vss.tpapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1),'dd.mm.yyyy hh24:mi:ss')
 as TPAApproveddate,
 to_date((select * from (
 select  TO_CHAR( vss.ulapproveddate, 'dd.mm.yyyy hh24:mi:ss') from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate Desc ) where ROWNUM = 1) ,'dd.mm.yyyy hh24:mi:ss')
 as RampApprovalTime,
    VTS_GET_TIME_DIFFERENCE_Fun(TO_CHAR( 
    (select * from (
 select  vss.tpapproveddate  from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate asc ) where ROWNUM = 1), 'dd.mm.yyyy hh24:mi'),
 TO_CHAR(
    (select * from (
 select  vss.ulapproveddate from VTS_VEHICLE_STATUS_TBL 
 vss where vss.VENDOR_VEHICLE_ID=V.ID order by vss.rgapproveddate Desc ) where ROWNUM = 1)
 , 'dd.mm.yyyy hh24:mi')) AS TotalTimeInFactoryInside,

    CASE 
        WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
        ELSE '' 
    END AS RMType
       FROM VTS_VENDOR_VEHICLE_TBL V
        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID AND R.PLANT = VS.plant_code
        JOIN VTS_VEHICLE_STATUS_TBL VVST ON V.ID = VVST.VENDOR_VEHICLE_ID --AND R.PLANT = VVST.plant_code
        join (select pm.PLANTCODE
                  from vts_user_master_tbl u
                    join vts_user_role_mapping_tbl ur on u.userid = ur.userid
                    join vts_plant_role_mapping_tbl rp on ur.roleid = rp.role_id
                    join vts_plant_master_tbl pm on rp.plant_id = pm.plantid 
                  where u.userid =  (CASE WHEN 0=0 THEN u.userid ELSE 0 END)) p on p.PLANTCODE = R.PLANT 
        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID      
     WHERE V.RG_ID_NO IS NOT NULL
        AND VS.ulapproved = 'Y' 
         and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
      AND ( NVL(V.VENDOR_NAME, '') = ''
            OR (LOWER(V.VENDOR_NAME) like '%' || lower(P_SupplierName) || '%')
        )
      AND ( NVL(V.VEHICLE_NUMBER, '') = '' 
            OR (V.VEHICLE_NUMBER like '%' || P_VehicleNumber || '%')
           )
       AND TRUNC(VS.ulapproveddate) >= case when NVL(P_FromDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_FromDate, 'DD-Mon-YY')  end
       AND TRUNC(VS.ulapproveddate) <= case when NVL(P_ToDate,' ') = ' ' then TRUNC(VS.ulapproveddate) else TO_DATE(P_ToDate, 'DD-Mon-YY')  end    
    group by  V.VEHICLE_NUMBER,V.VENDOR_NAME,r.PLANT,VS.rgapproveddate,VS.ulapproveddate,V.ID,R.PLANT
    , VS.tpapproveddate , V.SHIFT ,VS.ATTRIBUTE1,v.DISPATCH_DATE
    ORDER BY V.VEHICLE_NUMBER,VS.ulapproveddate 
     )OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
    FETCH NEXT P_PageSize ROWS ONLY;



END VTS_Get_Unloaded_Vehicle_Details_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_LOGIN_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_LOGIN_PROC" 
                                        (
                                         P_UserEmail IN NVARCHAR2,
                                         P_Password IN NVARCHAR2, 
                                         O_ErrorMessage OUT NVARCHAR2,    
                                         C_UserDetails out SYS_REFCURSOR,
                                         C_UserMenu out SYS_REFCURSOR ,
                                         C_Role out SYS_REFCURSOR ,
                                         C_Plants out SYS_REFCURSOR 
                                        )
                                        AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Login_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Login purpose

  /*************************************************************************************************************/



V_USER_ID Number;
V_RoleCode NVARCHAR2(100);
V_Count NUmber;

BEGIN
  DBMS_OUTPUT.PUT_LINE(P_UserEmail);
  DBMS_OUTPUT.PUT_LINE(P_Password);

   Select UserId INTO  V_USER_ID  FROM VTS_User_Master_Tbl
   WHERE Is_Active=1  AND 
    (Select VTS_P_ENCRYPT_SYN_PKG.VTS_decrypt_ssn_FUN(emailid) FROM DUAL) =  P_UserEmail 
     AND (Select VTS_P_ENCRYPT_SYN_PKG.VTS_decrypt_ssn_FUN(Password) FROM DUAL) =P_Password;

--DBMS_OUTPUT.PUT_LINE('Your message or variable value');


IF V_USER_ID > 0 THEN
    O_ErrorMessage:='Login Sucess!';

DBMS_OUTPUT.PUT_LINE('UserId ' || V_USER_ID);
  --V_RoleCode

  Select Count(1) INTO V_Count  from vts_role_master_tbl r 
  JOIN vts_user_role_mapping_tbl ur on r.roleid=ur.roleid
  JOIN vts_user_master_tbl um on um.UserId=ur.UserId
  Where um.UserId=V_USER_ID AND r.RoleCode='Admin' and RowNum=1;

  IF V_Count>0 THEN
      Select r.RoleCode INTO V_RoleCode from vts_role_master_tbl r 
      JOIN vts_user_role_mapping_tbl ur on r.roleid=ur.roleid
      JOIN vts_user_master_tbl um on um.UserId=ur.UserId
      Where um.UserId=V_USER_ID AND r.RoleCode='Admin' and RowNum=1;
  END IF;

  OPEN C_UserDetails FOR

  Select u.*,tenant.TenantId,tenant.tenantcode,tenant.tenantdescription from VTS_User_Master_Tbl u 
  JOIN VTS_Tenant_Master_Tbl tenant on u.tenantId=tenant.TenantId
  WHERE u.UserId=V_USER_ID ;


   OPEN C_UserMenu FOR
  Select * from (
   Select  mm.menudescription As Name, mm.menuurl As State,mm.Icon, 
   Case when  mm.menuurl='#' then 'dropDown' else '' end  AS Type ,mm.ParentId,mm.MenuId,mm.Sequence
   FROM vts_user_role_mapping_tbl rm
    JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
    JOIN VTS_Role_Master_Tbl r on r.RoleId=rm.RoleId
    JOIN VTS_Menu_Role_Mapping_Tbl mr on mr.RoleId=r.RoleId
    JOIN vts_menu_master_tbl mm on mm.MenuId=mr.MenuId
    Where u.UserId=V_USER_ID

    UNION 

       Select mm.menudescription As Name, mm.menuurl As State,mm.Icon, Case when mm.menuurl='#' then 'dropDown' else '' end  AS Type ,mm.ParentId,mm.MenuId,mm.Sequence
       FROM vts_menu_master_tbl mm Where V_RoleCode='Admin'
       ) a Order by Sequence;



    OPEN C_Role FOR
    Select r.RoleId,r.RoleCode,r.RoleDescription from vts_user_role_mapping_tbl rm
    JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
    JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
    Where u.UserId=V_USER_ID AND r.roletype='Menu';


    OPEN C_Plants FOR
    SELECT pln.plantid ,pln.plantcode,pln.PlantDescription from vts_user_role_mapping_tbl rm
    JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
    JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
    JOIN vts_plant_role_mapping_tbl vts on vts.role_id=rm.roleid
    JOIN vts_plant_master_tbl pln on pln.plantid=vts.plant_id
    Where u.UserId=V_USER_ID AND  r.roletype='Plant';

  ELSE 
      O_ErrorMessage :='User Email-Id or Password is incorrect';
  END IF;



END VTS_Login_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_GATE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_GATE_PROC" 

                                         (
                                         P_Mode IN VARCHAR  DEFAULT 'GetAllGate',
                                         P_GATEID  IN Number DEFAULT 0,
                                         P_GateType IN VARCHAR DEFAULT '',
                                         P_GateNo IN INT DEFAULT 0,
                                         P_TenantId IN INT  DEFAULT 0 ,
                                         P_SearchText IN NVARCHAR2  DEFAULT '',
                                         P_PageNumber IN INT DEFAULT 1,
                                         P_PageSize IN INT DEFAULT 10,
                                         O_TotalCount OUT INT,
                                         C_GateDetails out SYS_REFCURSOR 
                                         )

AS 

/**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_GATE_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Add gate purpose

  /*************************************************************************************************************/

V_Gate_Id number;

BEGIN
  IF P_Mode ='GetAllGate' THEN
  SELECT COUNT(1) INTO O_TotalCount  FROM vts_gate_master_tbl  Where tenantid=P_TenantId  AND ( (lower(gateType) like '%' || lower(P_SearchText) || '%'));

  OPEN C_GateDetails FOR
     Select * From vts_gate_master_tbl  Where  (lower(gateType) like '%' || lower(P_SearchText) || '%') AND tenantid = P_TenantId AND (P_GATEID=0 OR GateId = P_GATEID)
      ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	  FETCH NEXT P_PageSize ROWS ONLY;

  ELSIF P_Mode ='CreateGate' THEN
   INSERT INTO vts_gate_master_tbl (
        GATETYPE, GATENO, TENANTID, creation_date,IS_ACTIVE )
     VALUES (P_GateType,P_GateNo,P_TenantId,sysdate,1)
     RETURNING GateId INTO V_Gate_Id;
  COMMIT;
   OPEN C_GateDetails FOR
  Select * From vts_gate_master_tbl  WHERE  GateId =V_Gate_Id;
ELSIF P_Mode ='UpdateGate' THEN
    UPDATE vts_gate_master_tbl SET  GATETYPE =P_GateType,    GATENO=GATENO,
    TENANTID =P_TENANTID, UPDATION_DATE=sysdate WHERE GateId =P_GATEID;
    COMMIT;
   OPEN C_GateDetails FOR
  Select * From vts_gate_master_tbl  WHERE  GateId =P_GATEID;
 ELSIF P_Mode ='DeleteGate' THEN
    DELETE FROM vts_gate_master_tbl WHERE GateId =P_GATEID;
  COMMIT;
   OPEN C_GateDetails FOR
  Select * From vts_gate_master_tbl  WHERE  GateId =P_GATEID;
  END IF;
END VTS_MANAGE_GATE_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_MENU_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_MENU_PROC" 
(
  P_MODE IN VARCHAR2 
, P_MenuId IN NUMBER DEFAULT 0
, P_MENUCODE IN VARCHAR2  DEFAULT NULL 
, P_MENUDESCRIPTION IN VARCHAR2  DEFAULT NULL 
, P_MENUURL IN VARCHAR2 DEFAULT NULL
, P_ICON IN VARCHAR2 DEFAULT NULL
, P_PARENTID IN NUMBER DEFAULT 0
, P_TENANTID IN NUMBER DEFAULT 0
, P_SearchText IN VARCHAR  DEFAULT ''
, P_PageNumber IN INT DEFAULT 1
, P_PageSize IN INT DEFAULT 10
, O_TotalCount OUT INT 
,C_MenuDetails out SYS_REFCURSOR
) AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_MENU_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Add menu purpose

  /*************************************************************************************************************/

V_Menu_Id number;
V_Exists_Menu_Id number;
BEGIN
  IF P_Mode ='CreateMenu' THEN

  SELECT COUNT(1)
    INTO V_Exists_Menu_Id
    FROM vts_menu_master_tbl
    WHERE upper(menucode) = upper(trim(P_MenuCode))
    and tenantid=P_TENANTID;

   if V_Exists_Menu_Id > 0 then   
          OPEN C_MenuDetails FOR
          Select 0 as MenuId From dual; 
   else 
        INSERT INTO vts_menu_master_tbl (
            menucode, menudescription, tenantid, menuurl,
            parentid, icon, creation_date,is_active )
         VALUES (P_MENUCODE,P_MENUDESCRIPTION,P_TENANTID,P_MENUURL,P_PARENTID,P_ICON,sysdate,1)

         RETURNING MenuId INTO V_Menu_Id;
         COMMIT;
           OPEN C_MenuDetails FOR
          Select * From vts_menu_master_tbl  WHERE   MenuId =V_Menu_Id; 
   end if;


ELSIF P_Mode ='UpdateMenu' THEN
    UPDATE vts_menu_master_tbl SET 
     menucode =P_MENUCODE,    menudescription=P_MENUDESCRIPTION,
    tenantid =P_TENANTID,    menuurl=P_MENUURL, parentid =P_PARENTID,
    icon =P_ICON ,UPDATION_DATE=sysdate WHERE MenuId =P_MenuId;

     COMMIT;
      OPEN C_MenuDetails FOR
      Select * From vts_menu_master_tbl  WHERE   MenuId =P_MenuId;

 ELSIF P_Mode ='DeleteMenu' THEN
    delete from VTS_MENU_ROLE_MAPPING_TBL WHERE MenuId =P_MenuId; 
    DELETE FROM vts_menu_master_tbl WHERE MenuId =P_MenuId;
    COMMIT;
   OPEN C_MenuDetails FOR
      Select * From vts_menu_master_tbl  WHERE   MenuId =V_Menu_Id;
 ELSE

   SELECT COUNT(1) INTO O_TotalCount  FROM vts_menu_master_tbl  Where  (lower(MenuCode) like '%' || lower(P_SearchText) || '%') OR (lower(MenuDescription) like '%' || lower(P_SearchText) || '%') AND (P_MenuId =0 OR MenuId =P_MenuId);

     OPEN C_MenuDetails FOR
     Select * From vts_menu_master_tbl  WHERE (lower(MenuCode) like '%' || lower(P_SearchText) || '%') OR (lower(MenuDescription) like '%' || lower(P_SearchText) || '%')  AND (P_MenuId =0 OR MenuId =P_MenuId)
      ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	  FETCH NEXT P_PageSize ROWS ONLY;

 END IF;
END VTS_MANAGE_MENU_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_PLANT_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_PLANT_PROC" 
(
  P_MODE IN VARCHAR2 
, P_PLANTID IN VARCHAR2 DEFAULT 0 
, P_PLANTCODE IN VARCHAR2 DEFAULT NULL 
, P_PLANTDESCRIPTION IN VARCHAR2 DEFAULT NULL 
, P_TENANTID IN NUMBER DEFAULT 0 
, P_SearchText IN VARCHAR  DEFAULT ''
, P_PageNumber IN INT DEFAULT 1
, P_PageSize IN INT DEFAULT 10
, O_TotalCount OUT INT 
,C_PlantDetails out SYS_REFCURSOR
) AS 
/**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_PLANT_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              MANAGE PLANT PURPOSE

  /*************************************************************************************************************/



V_Plant_Id number;
BEGIN
  IF P_Mode ='CreatePlant' THEN

     INSERT INTO vts_plant_master_tbl (
         plantcode, plantdescription,tenantid,creation_date,is_active )
     VALUES (P_PLANTCODE,P_PLANTDESCRIPTION,P_TENANTID,sysdate,1)
RETURNING PlantId INTO V_Plant_Id;
 COMMIT;
   OPEN C_PlantDetails FOR
  Select * From vts_plant_master_tbl  WHERE   PlantId =V_Plant_Id;

ELSIF P_Mode ='UpdatePlant' THEN
    UPDATE vts_plant_master_tbl SET 
     plantcode =P_PLANTCODE,    plantdescription=P_PLANTDESCRIPTION,
    tenantid =P_TENANTID,  UPDATION_DATE=sysdate WHERE PlantId =P_PLANTID;
    COMMIT;
      OPEN C_PlantDetails FOR
      Select * From vts_plant_master_tbl  WHERE   PlantId =P_PLANTID;
 ELSIF P_Mode ='DeletePlant' THEN
    DELETE FROM vts_plant_master_tbl WHERE PlantId =P_PLANTID;
    COMMIT;
      OPEN C_PlantDetails FOR
      Select * From vts_plant_master_tbl  WHERE   PlantId =P_PLANTID;
 ELSE
   SELECT COUNT(1) INTO O_TotalCount  FROM vts_plant_master_tbl  Where tenantid =P_TenantId AND ((lower(PlantCode) like '%' || lower(P_SearchText) || '%') OR (lower(PlantDescription) like '%' || lower(P_SearchText) || '%') AND  (P_PLANTID =0 OR PlantId =P_PLANTID));

     OPEN C_PlantDetails FOR
     Select * From vts_plant_master_tbl  WHERE  tenantid =P_TenantId AND ( (lower(PlantCode) like '%' || lower(P_SearchText) || '%') OR (lower(PlantDescription) like '%' || lower(P_SearchText) || '%') AND  (P_PLANTID =0 OR PlantId =P_PLANTID))
      ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	  FETCH NEXT P_PageSize ROWS ONLY;
 END IF;
END VTS_MANAGE_PLANT_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_RAMP_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_RAMP_PROC" 
(
    P_RampId IN number default 0,
    P_RampCode IN NVARCHAR2 Default null,
    P_RampDescription IN NVARCHAR2 Default null,
    P_RampPlantId IN number default 0,
    P_Mode IN VARCHAR  DEFAULT 'GetAllRamp',
    P_SearchText IN VARCHAR  DEFAULT '',
    P_PageNumber IN INT DEFAULT 1,
    P_PageSize IN INT DEFAULT 10,
    O_TotalCount OUT INT,
    P_TenantId IN Number DEFAULT 1,
    C_Result out SYS_REFCURSOR 
)
AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_RAMP_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
         04/04/2024      Ram Krishn Mishra         To manage ramp master screen

  /*************************************************************************************************************/
  V_Ramp_Id number;

BEGIN



-----------------------------------------Start Get all ramp-------------------------------------------------------------
 IF P_Mode ='GetAllRamp' THEN
 SELECT COUNT(1) INTO O_TotalCount  FROM vts_ramp_master_tbl 
 Where  RampPlantId IN (Select plantid  from vts_plant_master_tbl where tenantid=P_TenantId) AND ( lower(rampCode) like '%' || lower(trim(P_SearchText)) || '%'
 OR lower(rampDescription) like '%' || lower(trim(P_SearchText)) || '%');

      OPEN C_Result FOR
         Select ramp.RampId, ramp.RampCode, ramp.RampDescription, ramp.RampPlantId, plant.PlantCode as RampPlantCode ,ramp.Is_Active From vts_ramp_master_tbl ramp
          INNER JOIN vts_plant_master_tbl plant on ramp.RampPlantId = plant.PlantId AND tenantid=P_TenantId
          Where lower(ramp.rampCode) like '%' || lower(trim(P_SearchText)) || '%'
            OR lower(ramp.rampDescription) like '%' || lower(trim(P_SearchText)) || '%'
         ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	     FETCH NEXT P_PageSize ROWS ONLY;

  END IF;
-----------------------------------------End Get all ramp-------------------------------------------------------------


-----------------------------------------Start Add update ramp-------------------------------------------------------------
 IF P_Mode ='SaveUpdateRamp' THEN

        IF P_RampId >0 THEN
             Update vts_ramp_master_tbl SET rampcode=P_RampCode,RampDescription=P_RampDescription,RampPlantId=P_RampPlantId Where rampId=P_RampId;
             Commit;
             V_Ramp_Id:=P_RampId;

        ELSIF P_RampId =0 THEN            
            INSERT INTO vts_ramp_master_tbl(RampCode,RampDescription,RampPlantId,Is_Active)
            VALUES(P_RampCode,P_RampDescription,P_RampPlantId,1)
            RETURNING rampId INTO V_Ramp_Id;
            Commit;

          END IF;

              OPEN C_Result FOR
                 Select * From vts_ramp_master_tbl  Where rampid=V_Ramp_Id;
  END IF;
-----------------------------------------End Add update ramp-------------------------------------------------------------


-----------------------------------------Start ActiveInActiveRamp-------------------------------------------------------------
 IF P_Mode ='ActiveInActiveRamp' THEN
      Update vts_ramp_master_tbl set Is_active = (CASE WHEN Is_Active=1 THEN 0 ELSE 1 END) where rampid=P_RampId;
      Commit;

      OPEN C_Result FOR
      Select RampId, RampCode, RampDescription, RampPlantId ,Is_Active From vts_ramp_master_tbl Where rampid=P_RampId;
END IF;
-----------------------------------------End ActiveInActiveRamp-------------------------------------------------------------


END VTS_MANAGE_RAMP_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_ROLE_PERMISSION_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_ROLE_PERMISSION_PROC" 

                                         (
											 P_Mode IN VARCHAR  DEFAULT 'GetAllMappingByRoleId',
											 P_RoleId IN NUMBER,  
                                             P_PlantIds IN NVARCHAR2 DEFAULT '',
											 P_MenuIds IN NVARCHAR2 DEFAULT '',
                                             P_TenantId IN INT,
                                             C_Result out SYS_REFCURSOR 
                                         )

AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_Role_PERMISSION_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        04/06/2024       Ram Krishn Mishra         To manage role permission

  /*************************************************************************************************************/


BEGIN
		-----------------------------------------Start Get all role mapping with Plant and menu-------------------------------------------------------------
		  IF P_Mode ='GetAllMappingByRoleId' THEN  
				 OPEN C_Result FOR

                SELECT distinct * FROM    
                 (SELECT 'Plant' as Type, pm.PlantId as Id, pm.PlantCode as Code,
                 pm.PlantDescription as Description,
                 P_RoleId as RoleId, (case when rm.PlantRoleId IS NOT NULL AND rm.role_id = P_RoleId  then 1 else 0 end) as IsMappedWithRole 
                 FROM vts_plant_master_tbl pm 
                 LEFT JOIN vts_plant_role_mapping_tbl rm on pm.PlantId=rm.Plant_Id
                  WHERE pm.TENANTID = P_TenantId
                 UNION ALL
                 SELECT 'Menu' as Type, mm.MenuId as Id, mm.MenuCode as Code, 
                 mm.MenuDescription as Description,
                 P_RoleId as RoleId, (case when mrm.MenuRoleId IS NOT NULL AND mrm.RoleId = P_RoleId  then 1 else 0 end) as IsMappedWithRole 
                 FROM vts_menu_master_tbl mm
                 LEFT JOIN vts_menu_role_mapping_tbl mrm on mrm.MenuId=mm.MenuId
                 WHERE mm.TENANTID = P_TenantId
                 ) t 
                 Where  (t.RoleId = P_RoleId OR NULL IS NULL);
		  END IF;
		-----------------------------------------End Get all mapping with Plant and menu------------------------------------------------------------
		 IF P_Mode ='UpdateRoleMapping' THEN  
			 DBMS_OUTPUT.PUT_LINE('AssignMappingOnRole');
             Delete from vts_plant_role_mapping_tbl where Role_Id=P_RoleId;
             Delete from vts_menu_role_mapping_tbl where RoleId=P_RoleId;
            Commit;
            FOR i IN (
                    select * from (
                    SELECT REGEXP_SUBSTR(P_PlantIds, '[^,]+', 1, LEVEL) AS plant_id
                    FROM DUAL
                    CONNECT BY REGEXP_SUBSTR(P_PlantIds, '[^,]+', 1, LEVEL) IS NOT NULL
                    ) t Where t.plant_id IS NOT NULL
                ) LOOP
                     INSERT INTO vts_plant_role_mapping_tbl(Plant_Id,Role_Id)
                     VALUES(i.plant_id,P_RoleId);
                END LOOP;
                Commit;

                FOR i IN (
                     select * from (
                     SELECT REGEXP_SUBSTR(P_MenuIds, '[^,]+', 1, LEVEL) AS menu_id
                    FROM DUAL
                    CONNECT BY REGEXP_SUBSTR(P_MenuIds, '[^,]+', 1, LEVEL) IS NOT NULL 
                    ) Where menu_id IS NOT NULL
                ) LOOP
                     INSERT INTO vts_menu_role_mapping_tbl(MenuId,RoleId)
                     VALUES(i.menu_id,P_RoleId);
                END LOOP;
                Commit;

                OPEN C_Result FOR
				  SELECT * FROM    
                 (SELECT 'Plant' as Type, pm.PlantId as Id, pm.PlantCode as Code,
                 pm.PlantDescription as Description,
                 rm.role_id as RoleId, (case when rm.PlantRoleId IS NULL then 0 else 1 end) as IsMappedWithRole 
                 FROM vts_plant_master_tbl pm 
                 LEFT JOIN vts_plant_role_mapping_tbl rm on pm.PlantId=rm.Plant_Id
                 UNION ALL
                 SELECT 'Menu' as Type, mm.MenuId as Id, mm.MenuCode as Code, 
                 mm.MenuDescription as Description,
                 mrm.roleid as RoleId,(case when mrm.MenuRoleId IS NULL then 0 else 1 end) as IsMappedWithRole 
                 FROM vts_menu_master_tbl mm
                 LEFT JOIN vts_menu_role_mapping_tbl mrm on mrm.MenuId=mm.MenuId) t 
                 Where t.RoleId = P_RoleId;
          END IF;
END VTS_MANAGE_Role_PERMISSION_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_ROLE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_ROLE_PROC" 

                                         (
                                             P_RoleId IN number default 0,
                                             P_RoleCode IN NVARCHAR2 Default null,
                                             P_RoleDescription IN NVARCHAR2 Default null,
                                             P_RoleType IN NVARCHAR2 Default null,
                                             P_Mode IN VARCHAR  DEFAULT 'GetAllRole',
                                             P_SearchText IN VARCHAR  DEFAULT '',
                                             P_PageNumber IN INT DEFAULT 1,
                                             P_PageSize IN INT DEFAULT 10,
                                             O_TotalCount OUT INT,
                                             P_TenantId IN Number DEFAULT 1,
                                             C_Result out SYS_REFCURSOR 
                                         )

AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_ROLE_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              To manage role master screen

  /*************************************************************************************************************/
  V_Role_Id number;

BEGIN
-----------------------------------------Start Get all role-------------------------------------------------------------
  IF P_Mode ='GetAllRole' THEN

 SELECT COUNT(1) INTO O_TotalCount  FROM vts_role_master_tbl 
 Where lower(roleCode) like '%' || lower(P_SearchText) || '%'
 OR lower(roleDescription) like '%' || lower(P_SearchText) || '%';

      OPEN C_Result FOR

      Select * from (
         Select * From vts_role_master_tbl
          Where (lower(roleCode) like '%' || lower(P_SearchText) || '%'
            OR lower(roleDescription) like '%' || lower(P_SearchText) || '%')
            ORDER BY RoleID

             )
             ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
             FETCH NEXT P_PageSize ROWS ONLY;

         --;  Where tenantid=P_TenantId;

  END IF;
-----------------------------------------End Get all role-------------------------------------------------------------

-----------------------------------------Start Add update role-------------------------------------------------------------
   IF P_Mode ='SaveUpdateRole' THEN

        IF P_RoleId >0 THEN
             Update vts_role_master_tbl SET rolecode=P_RoleCode,RoleDescription=P_RoleDescription,RoleType=P_RoleType Where roleId=P_RoleId;
             Commit;
             V_Role_Id:=P_RoleId;

        ELSIF P_RoleId =0 THEN
            INSERT INTO vts_role_master_tbl(rolecode,RoleDescription,RoleType,is_active)
            VALUES(P_RoleCode,P_RoleDescription,P_RoleType,1)
            RETURNING roleId INTO V_Role_Id;
            Commit;

          END IF;

              OPEN C_Result FOR
                 Select * From vts_role_master_tbl  Where roleid=V_Role_Id;
  END IF;
  -----------------------------------------End Add update role-------------------------------------------------------------

   -----------------------------------------Start DeleteRole-------------------------------------------------------------

  IF P_Mode ='DeleteRole' THEN   
      BEGIN
       DELETE FROM vts_role_master_tbl WHERE RoleId =P_RoleId;
       COMMIT;
       EXCEPTION
       WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, 'This Role is already mapped !!');
        END;
       OPEN C_Result FOR
       Select * From vts_role_master_tbl;  --WHERE RoleId =P_RoleId;

  END IF;

  -----------------------------------------End Add DeleteRole-------------------------------------------------------------

  -----------------------------------------Start ActiveInActiveRole-------------------------------------------------------------
   IF P_Mode ='ActiveInActiveRole' THEN

        Update vts_role_master_tbl set Is_active= (CASE WHEN Is_Active=1 THEN 0 ELSE 1 END) where roleid=P_RoleId;
        Commit;

        OPEN C_Result FOR
         Select * From vts_role_master_tbl  Where roleid=P_RoleId;



  END IF;
  -----------------------------------------End ActiveInActiveRole-------------------------------------------------------------


END VTS_MANAGE_ROLE_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_USER_PERMISSION_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_USER_PERMISSION_PROC" 

                                         (
                                             P_RoleIds IN NVARCHAR2,
                                             P_UserId IN NUMBER,                                             
                                             C_Result out SYS_REFCURSOR 
                                         )

AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_USER_PERMISSION_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              TO MANAGE USER PERMISSION

  /*************************************************************************************************************/


BEGIN
            Delete from vts_user_role_mapping_tbl where UserId=P_UserId;
            Commit;
            FOR i IN (
                    SELECT REGEXP_SUBSTR(P_RoleIds, '[^,]+', 1, LEVEL) AS role_value
                    FROM DUAL
                    CONNECT BY REGEXP_SUBSTR(P_RoleIds, '[^,]+', 1, LEVEL) IS NOT NULL
                ) LOOP
                     INSERT INTO vts_user_role_mapping_tbl(UserId,roleid)
                     VALUES(P_UserId,i.role_value);

                END LOOP;
                Commit;

                OPEN C_Result FOR
                 Select u.* from vts_user_role_mapping_tbl rm
                    JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
                    JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
                    Where u.UserId=P_UserId;



END VTS_MANAGE_USER_PERMISSION_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_USER_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_USER_PROC" 
    (
         P_Mode IN NVARCHAR2 DEFAULT 'GetAllUsers',
         P_SearchText IN NVARCHAR2 DEFAULT '',
         P_PageNumber IN INT DEFAULT 1,
         P_PageSize IN INT DEFAULT 10,
         O_TotalCount OUT INT,
         P_Gate_Number IN Number DEFAULT 0,
         P_UserID IN NUMBER DEFAULT 0,
         P_UserEmail IN NVARCHAR2 DEFAULT NULL,
         P_Password IN NVARCHAR2 DEFAULT NULL, 
         P_Mobile_No IN NVARCHAR2 DEFAULT NULL,  
         P_FirstName IN NVARCHAR2 DEFAULT NULL, 
         P_LastName IN NVARCHAR2 DEFAULT NULL,
         P_TenantId IN Number Default 0,
         P_Roles IN NVARCHAR2 DEFAULT NULL,
         C_UserDetails out SYS_REFCURSOR,
         C_Role out SYS_REFCURSOR 
                                           
    )
AS 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Manage_USER_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh            TO MANAGE USER 

  /*************************************************************************************************************/



V_User_Id number;
BEGIN


If P_Mode='UpdateUserStatus' THEN


Update vts_user_master_tbl set Is_active= (CASE WHEN Is_Active=1 THEN 0 ELSE 1 END) where UserId=P_UserID;
Commit;

  OPEN C_UserDetails FOR
      Select * from vts_user_master_tbl Where UserId=P_UserID;

      OPEN C_Role FOR
        Select u.userId, r.RoleId,r.RoleCode,r.RoleDescription from vts_user_role_mapping_tbl rm
        JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
        JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
        Where u.TenantId=P_TenantId AND u.UserId=P_UserID;
END IF;

If P_Mode='UpdateGateNumber' THEN


Update vts_user_master_tbl set gate_number= P_Gate_Number where UserId=P_UserID;
Commit;

  OPEN C_UserDetails FOR
      Select * from vts_user_master_tbl Where UserId=P_UserID;

      OPEN C_Role FOR
        Select u.userId, r.RoleId,r.RoleCode,r.RoleDescription from vts_user_role_mapping_tbl rm
        JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
        JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
        Where u.TenantId=P_TenantId AND u.UserId=P_UserID;
END IF;







IF P_Mode='SaveUser' THEN 

    IF P_UserID >0 THEN

         UPDATE vts_user_master_tbl SET emailid = (Select CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_UserEmail)) AS VARCHAR2(4000)) FROM DUAL)
         ,first_name = P_FirstName,last_name = P_LastName,
         mobile_no =(Select CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Mobile_No)) AS VARCHAR2(4000)) FROM DUAL)
         Where UserId = P_UserID;
         --Commit;
         V_User_Id :=P_UserID;

    ELSE


      --INSERT INTO vts_user_master_tbl (emailid,first_name,last_name,mobile_no,password,tenantid,Is_active,created_by,creation_date )
      --  Values(
       --  (Select CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_UserEmail)) AS VARCHAR2(4000)) FROM DUAL),
        --  P_FirstName,
         -- P_LastName,
        --  (Select CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Mobile_No)) AS VARCHAR2(4000)) FROM DUAL),
         -- (Select CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Password)) AS VARCHAR2(4000)) FROM DUAL),
         -- P_TenantId,1, 'Admin',sysdate )

       -- RETURNING userid INTO V_User_Id;


        BEGIN
            -- Check if email or mobile number already exists
            SELECT userid INTO V_User_Id
            FROM vts_user_master_tbl
            WHERE (emailid = (SELECT CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_UserEmail)) AS VARCHAR2(4000)) FROM DUAL)
                OR mobile_no = (SELECT CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Mobile_No)) AS VARCHAR2(4000)) FROM DUAL)) AND rowNum=1;

            -- If the SELECT query doesn't raise NO_DATA_FOUND exception, it means a duplicate was found
            RAISE_APPLICATION_ERROR(-20001, 'Error: Email or mobile already exists!');
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                -- Insert the record if no duplicate is found
                INSERT INTO vts_user_master_tbl (
                    emailid,
                    first_name,
                    last_name,
                    mobile_no,
                    password,
                    tenantid,
                    Is_active,
                    created_by,
                    creation_date
                ) VALUES (
                    (SELECT CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_UserEmail)) AS VARCHAR2(4000)) FROM DUAL),
                    P_FirstName,
                    P_LastName,
                    (SELECT CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Mobile_No)) AS VARCHAR2(4000)) FROM DUAL),
                    (SELECT CAST(RAWTOHEX(VTS_P_ENCRYPT_SYN_PKG.VTS_ENCRYPT_SSN_FUN(P_Password)) AS VARCHAR2(4000)) FROM DUAL),
                    P_TenantId,
                    1,
                    'Admin',
                    SYSDATE
                )
                RETURNING userid INTO V_User_Id;
        END;





         -- COMMIT;
      END IF;
        DECLARE
            v_count NUMBER;
        BEGIN
            -- Check if the record exists
            SELECT COUNT(*) INTO v_count FROM vts_user_role_mapping_tbl WHERE userid = V_User_Id;

            IF v_count > 0 THEN
                -- Record exists, delete it
                DELETE FROM vts_user_role_mapping_tbl WHERE userid = V_User_Id;
                 FOR i IN (
                    SELECT REGEXP_SUBSTR(P_Roles, '[^,]+', 1, LEVEL) AS role_value
                    FROM DUAL
                    CONNECT BY REGEXP_SUBSTR(P_Roles, '[^,]+', 1, LEVEL) IS NOT NULL
                ) LOOP
                     INSERT INTO vts_user_role_mapping_tbl(UserId,roleid)
                     VALUES(V_User_Id,i.role_value);
                   --  Commit;
                END LOOP;
              --  COMMIT;
            ELSE
           --Insert role and user into user role mapping table.
                FOR i IN (
                    SELECT REGEXP_SUBSTR(P_Roles, '[^,]+', 1, LEVEL) AS role_value
                    FROM DUAL
                    CONNECT BY REGEXP_SUBSTR(P_Roles, '[^,]+', 1, LEVEL) IS NOT NULL
                ) LOOP
                     INSERT INTO vts_user_role_mapping_tbl(UserId,roleid)
                     VALUES(V_User_Id,i.role_value);
                   --  Commit;
                END LOOP;

            END IF;
        END;

        Commit;

      OPEN C_UserDetails FOR
      Select * from vts_user_master_tbl Where UserId=V_User_Id;

      OPEN C_Role FOR
        Select u.userId, r.RoleId,r.RoleCode,r.RoleDescription from vts_user_role_mapping_tbl rm
        JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
        JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId
        Where u.TenantId=P_TenantId AND u.UserId=V_User_Id;

  ELSIF P_Mode='GetAllUsers' THEN 

  Select Count(1) INTO O_TotalCount FROM vts_user_master_tbl
   Where TenantId=P_TenantId AND  (  lower((SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(EmailId) FROM DUAL)) like '%' || lower(TRIM(P_SearchText)) || '%'
      OR EXISTS (
          SELECT 1 
          FROM (
              SELECT REGEXP_SUBSTR(P_SearchText, '[^ ]+', 1, LEVEL) AS search_term
              FROM DUAL
              CONNECT BY REGEXP_SUBSTR(P_SearchText, '[^ ]+', 1, LEVEL) IS NOT NULL
          ) terms
          WHERE lower(TRIM(First_name)) LIKE '%' || lower(terms.search_term) || '%'
             OR lower(TRIM(Last_Name)) LIKE '%' || lower(terms.search_term) || '%'
      )
      OR lower((SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(Mobile_no) FROM DUAL)) like '%' || lower(TRIM(P_SearchText)) || '%'

      )
             AND userid NOT in (Select m.userid from vts_user_role_mapping_tbl m join vts_role_master_tbl r on m.roleid=r.roleid and r.rolecode ='Admin'
             );


   OPEN C_UserDetails FOR
         Select 
         userid,
         (SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(EmailId) decrypt_Data FROM DUAL) EmailId,
         (SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(Mobile_no) decrypt_Data FROM DUAL) Mobile_no,
         First_name,
         Last_Name,
         creation_date,
         is_active
         from vts_user_master_tbl Where TenantId=P_TenantId AND (  lower((SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(EmailId) FROM DUAL)) like '%' || lower(TRIM(P_SearchText)) || '%'
      OR EXISTS (
          SELECT 1 
          FROM (
              SELECT REGEXP_SUBSTR(P_SearchText, '[^ ]+', 1, LEVEL) AS search_term
              FROM DUAL
              CONNECT BY REGEXP_SUBSTR(P_SearchText, '[^ ]+', 1, LEVEL) IS NOT NULL
          ) terms
          WHERE lower(TRIM(First_name)) LIKE '%' || lower(terms.search_term) || '%'
             OR lower(TRIM(Last_Name)) LIKE '%' || lower(terms.search_term) || '%'
      )
      OR lower((SELECT VTS_P_ENCRYPT_SYN_PKG.VTS_DECRYPT_SSN_FUN(Mobile_no) FROM DUAL)) like '%' || lower(TRIM(P_SearchText)) || '%'

       )
            AND userid NOT in (Select m.userid from vts_user_role_mapping_tbl m join vts_role_master_tbl r on m.roleid=r.roleid 
            and r.rolecode ='Admin'
            )
             ORDER BY userid 
        OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS 
        FETCH NEXT P_PageSize ROWS ONLY;


  OPEN C_Role FOR
    Select u.userId, r.RoleId,r.RoleCode,r.RoleDescription,r.RoleType from vts_user_role_mapping_tbl rm
    JOIN VTS_User_Master_Tbl u on rm.UserId=u.UserId
    JOIN VTS_Role_Master_Tbl r on r.ROleId=rm.RoleId;
    --Where u.TenantId=P_TenantId;
  END IF;


END VTS_Manage_USER_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_VEHICLE_AT_REPORTING_GATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_VEHICLE_AT_REPORTING_GATE" 
(
    P_Mode IN NVARCHAR2 DEFAULT 'GetAllVendor',
    P_VehicleItemId IN INT DEFAULT 0,
    O_DeletedVehicleItemId OUT INT
)
AS
BEGIN
    IF P_Mode = 'DeleteItemById' THEN
        delete vts_vendor_vehicle_part_detail_tbl where id = P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
END VTS_MANAGE_VEHICLE_AT_REPORTING_GATE;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_VEHICLE_AT_REPORTING_GATE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_VEHICLE_AT_REPORTING_GATE_PROC" 
(
    P_Mode IN NVARCHAR2 DEFAULT 'GetAllVendor',
    P_VehicleItemId IN INT DEFAULT 0,
    O_DeletedVehicleItemId OUT INT
)

AS
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_VEHICLE_AT_REPORTING_GATE_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             FOR MANAGE VEHICLE AT REPORTING GATE

  /*************************************************************************************************************/

BEGIN
    IF P_Mode = 'DeleteItemById' THEN
        delete vts_vendor_vehicle_part_detail_tbl where id = P_VehicleItemId;
        O_DeletedVehicleItemId := P_VehicleItemId;
        commit;
    END IF;
END VTS_MANAGE_VEHICLE_AT_REPORTING_GATE_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_MANAGE_VENDOR_VEHICLE_STATUS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_MANAGE_VENDOR_VEHICLE_STATUS_PROC" (
    P_VendorVehicleId IN NUMBER DEFAULT 0,
    P_StatusCode IN OUT VARCHAR ,
    P_RGIdNo IN VARCHAR DEFAULT '',
    P_Remarks IN VARCHAR DEFAULT '',
    P_RampCode IN VARCHAR DEFAULT '',
    P_PlantCode IN NVARCHAR2 DEFAULT '',
    P_CreatedBy IN NUMBER DEFAULT 0,
    P_CreationDate IN DATE,
    P_Tenantid IN NUmber DEFAULT 1,
    O_TotalCount OUT INT 
)

AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_MANAGE_VENDOR_VEHICLE_STATUS_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
         04/04/2024      Ram Krishn Mishra        MANAGE VENDOR VEHICLE STATUS

  /*************************************************************************************************************/


l_UnloadCount int :=0;   
l_MixUnloadCount int :=0;  
l_vts_vehicle_status_tbl_Count int :=0;  
BEGIN
    IF P_StatusCode='RGA' THEN
         FOR i IN (
                  SELECT DISTINCT TRIM(REGEXP_SUBSTR(PlantCode, '[^,]+', 1, LEVEL)) AS PlantValue
                        FROM  vts_plant_master_tbl a JOIN vts_vehicle_item_details_vw b on a.Plantcode=b.Plant 
                        --vts_vehicle_item_details_vw
                        WHERE b.ID = P_VendorVehicleId
                        CONNECT BY LEVEL <= REGEXP_COUNT(PlantCode, '[^,]+')
                        START WITH PlantCode IS NOT NULL
                ) LOOP
                    insert into vts_vehicle_status_tbl(vendor_vehicle_id,plant_code,tenantid,rgapproved,rgapprovedby,rgapproveddate)
                    values(P_VendorVehicleId,i.PlantValue,P_Tenantid,'Y',P_CreatedBy,sysdate);
                END LOOP;
                 O_TotalCount := 1; 
         update vts_vendor_vehicle_tbl set RG_ID_NO=P_RGIdNo ,SHIFT=(CASE    
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '09:00:00' AND '21:00:00' THEN 'A'
                    WHEN TO_CHAR(sysdate, 'HH24:MI:SS') BETWEEN '21:00:01' AND '9:00:00' THEN 'B'
                    ELSE ''
                END) where Id=P_VendorVehicleId;

            Commit;
            Return;
    ELSIF P_StatusCode='SPA' THEN
    begin

    select count(*) into l_MixUnloadCount from vts_vehicle_status_tbl where VENDOR_VEHICLE_ID=P_VendorVehicleId and SPAPPROVED='Y' and ULAPPROVED is NULL;

if (l_MixUnloadCount=0) then
select count(*) into l_UnloadCount from vts_vehicle_status_tbl where  attribute1=P_RampCode and spapproved ='Y'  and
((ULAPPROVED is NULL and HOLD_STATUS is NULL and UNHOLD_STATUS is NULL) or (ULAPPROVED is NULL and HOLD_STATUS ='Y' and UNHOLD_STATUS ='Y'));
if (l_UnloadCount=0) then
            UPDATE vts_vehicle_status_tbl 
            SET spapproved = 'Y',
                spapprovedby = P_CreatedBy,
                spapproveddate = sysdate,
                attribute1 = P_RampCode
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND rgapproved = 'Y';
            O_TotalCount := 1;
            Commit;
    select count(*) into l_vts_vehicle_status_tbl_Count from  vts_vehicle_status_tbl WHERE vendor_vehicle_id = P_VendorVehicleId
    and spapproved='Y';
    if (l_vts_vehicle_status_tbl_Count>1) then
                UPDATE vts_vehicle_status_tbl 
            SET tpapproveddate = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND rgapproved = 'Y';
                Commit;
end if;
end if; 
end if;
if (l_MixUnloadCount>0) then
            O_TotalCount := 4; 
end if;  
if (l_UnloadCount>0) then
            O_TotalCount := 2; 
end if;  
            Return;
   end;     
   ELSIF P_StatusCode='SPUA' THEN
    begin
    select count(*) into l_UnloadCount from vts_vehicle_status_tbl where  vendor_vehicle_id = P_VendorVehicleId  and TPAPPROVED is NULL 
    and attribute1=P_RampCode and spapproved ='Y' and tpapproved ='Y';
if (l_UnloadCount=0) then
            UPDATE vts_vehicle_status_tbl 
            SET spapproved = null,
                spapprovedby = null,
                spapproveddate = null,
                attribute1 = null
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND rgapproved = 'Y';
            O_TotalCount := 1;
            Commit;
end if;  
if (l_UnloadCount>0) then
            O_TotalCount := 3; 
end if;  
            Return;
   end;     
    ELSIF P_StatusCode='TPA' THEN

            UPDATE vts_vehicle_status_tbl 
            SET tpapproved = 'Y',
                tpapprovedby = P_CreatedBy,
                tpapproveddate = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId               
                AND rgapproved = 'Y' 
                and exists ( select null
                            from vts_vehicle_status_tbl
                            where vendor_vehicle_id = P_VendorVehicleId
                             AND spapproved = 'Y'

                );
            O_TotalCount := 1;
            Commit;
            Return;
    ELSIF P_StatusCode='OGA' THEN

            UPDATE vts_vehicle_status_tbl 
            SET ogapproved = 'Y',
                ogapprovedby = P_CreatedBy,
                ogapproveddate = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId               
                AND rgapproved = 'Y' AND spapproved = 'Y' AND tpapproved = 'Y';
            O_TotalCount := 1;
            Commit;
            Return;
   ELSIF P_StatusCode='HOLD' THEN

            UPDATE vts_vehicle_status_tbl 
            SET Hold_Status = 'Y',
            Hold_Remark = p_remarks,
                Hold_By = P_CreatedBy,
                Hold_Date = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND tpapproved = 'Y';
            O_TotalCount := 1;
            Commit;
            Return;
  ELSIF P_StatusCode='UNHOLD' THEN

            UPDATE vts_vehicle_status_tbl 
            SET UnHold_Status = 'Y',
                UnHold_By = P_CreatedBy,
                UnHold_Date = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND tpapproved = 'Y';
            O_TotalCount := 1;
            Commit;
            Return;          
     ELSIF P_StatusCode='ULA' THEN
    begin
                UPDATE vts_vehicle_status_tbl 
            SET ulapproved = 'Y',
            remarks = p_remarks,
                ulapprovedby = P_CreatedBy,
                ulapproveddate = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId
                AND plant_code = P_PlantCode
                AND tpapproved = 'Y';
            O_TotalCount := 1;
            Commit;

    select count(*) into l_UnloadCount from vts_vehicle_status_tbl where  vendor_vehicle_id = P_VendorVehicleId and ULAPPROVED is null;
if (l_UnloadCount=0) then
            UPDATE vts_vehicle_status_tbl 
            SET ogapproved = 'Y',
                ogapprovedby = P_CreatedBy,
                ogapproveddate = sysdate
            WHERE vendor_vehicle_id = P_VendorVehicleId               
                AND rgapproved = 'Y' AND spapproved = 'Y' AND tpapproved = 'Y' and ULAPPROVED='Y';
            Commit;
end if;  

            Return;
   end;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        O_TotalCount := 0; -- Set the success status to 0 if an exception occurs
        ROLLBACK; -- Rollback the transaction

END VTS_MANAGE_VENDOR_VEHICLE_STATUS_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_PLANT_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_PLANT_PROC" 
(
  P_MODE IN VARCHAR2 
, P_PLANTID IN VARCHAR2 DEFAULT 0 
, P_PLANTCODE IN VARCHAR2 DEFAULT NULL 
, P_PLANTDESCRIPTION IN VARCHAR2 DEFAULT NULL 
, P_TENANTID IN NUMBER DEFAULT 0 
, P_SearchText IN VARCHAR  DEFAULT ''
, P_PageNumber IN INT DEFAULT 1
, P_PageSize IN INT DEFAULT 10
, O_TotalCount OUT INT 
,C_PlantDetails out SYS_REFCURSOR
) AS 
/**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_PLANT_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Add plant purpose

  /*************************************************************************************************************/



V_Plant_Id number;
BEGIN
  IF P_Mode ='CreatePlant' THEN

     INSERT INTO vts_plant_master_tbl (
         plantcode, plantdescription,tenantid,creation_date,is_active )
     VALUES (P_PLANTCODE,P_PLANTDESCRIPTION,P_TENANTID,sysdate,1)
RETURNING PlantId INTO V_Plant_Id;
 COMMIT;
   OPEN C_PlantDetails FOR
  Select * From vts_plant_master_tbl  WHERE   PlantId =V_Plant_Id;

ELSIF P_Mode ='UpdatePlant' THEN
    UPDATE vts_plant_master_tbl SET 
     plantcode =P_PLANTCODE,    plantdescription=P_PLANTDESCRIPTION,
    tenantid =P_TENANTID,  UPDATION_DATE=sysdate WHERE PlantId =P_PLANTID;
    COMMIT;
      OPEN C_PlantDetails FOR
      Select * From vts_plant_master_tbl  WHERE   PlantId =P_PLANTID;
 ELSIF P_Mode ='DeletePlant' THEN
    DELETE FROM vts_plant_master_tbl WHERE PlantId =P_PLANTID;
    COMMIT;
      OPEN C_PlantDetails FOR
      Select * From vts_plant_master_tbl  WHERE   PlantId =P_PLANTID;
 ELSE
   SELECT COUNT(1) INTO O_TotalCount  FROM vts_plant_master_tbl  Where (P_PLANTID =0 OR PlantId =P_PLANTID);

     OPEN C_PlantDetails FOR
     Select * From vts_plant_master_tbl  WHERE  (P_PLANTID =0 OR PlantId =P_PLANTID)
      ORDER BY ROWNUM OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	  FETCH NEXT P_PageSize ROWS ONLY;
 END IF;
END VTS_PLANT_PROC;


/
--------------------------------------------------------
--  DDL for Procedure VTS_SUMMARY_REPORT_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_SUMMARY_REPORT_PROC" 
                                        (
                                         P_Year IN VARCHAR  DEFAULT '',
                                         P_TenantId IN INT, 
                                         C_Summary out SYS_REFCURSOR 
                                         )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Summary_Report_Proc
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Kishan Singh            Manage Summary Report 

  /*************************************************************************************************************/

l_Plant varchar2(1000)  :='';
l_SummaryCount NUMBER  :=0;
l_TotalCount NUMBER  :=0; 
l_TotalWithOutPlantCount NUMBER  :=0;
l_Las30Count NUMBER  :=0; 
l_TotalWithOutPlantLas30Count NUMBER  :=0;
l_Greater30Count NUMBER  :=0;
l_WithOutPlantGreater30Count   NUMBER  :=0;
l_Las30Per NUMBER  :=0;  
l_TotalWithOutLas30Per NUMBER  :=0;
l_Product_tab NUMBER  :=0;
l_Waiting_Time  NUMBER  :=0; 
l_Total_Waiting_Time  NUMBER  :=0; 
l_Total_Vehicle  NUMBER  :=0; 
l_WithOutPlantWaiting_Time  NUMBER  :=0; 
l_WithOutPlantTotal_Waiting_Time  NUMBER  :=0; 
l_WithOutPlantTotal_Vehicle  NUMBER  :=0; 
l_Categ_tab     VTS_TAB_PKG.g_vts_string_tab;
l_Month_tab     VTS_TAB_PKG.g_vts_string_tab;
l_Plant_tab     VTS_TAB_PKG.g_vts_string_tab;
l_noof_recs        number(10);
l_Year_Start_Date  varchar2(20)  :='';
l_Year_End_Date  varchar2(20)  :='';
l_Week_Start_Date  varchar2(20)  :='';
l_Week_End_Date  varchar2(20)  :='';
l_Leap_Year_Status  varchar2(20)  :=''; 
l_Day  varchar2(20)  :='';
l_Month  varchar2(20)  :='';
l_delimiter        varchar2(1):=',';
l_Month_Name varchar2(10)  :='';
V_COUNT NUMBER  :=0;
l_Row_COUNT NUMBER  :=0;
p_msgtxt varchar2(1000):='';
l_delimiter_        varchar2(1):='_';
l_TotalMixCount NUMBER  :=0; 
l_Year_Date  clob  :='';
BEGIN  

     EXECUTE IMMEDIATE 'truncate table VTS_SUMMARY_REPORT_TBL';  
select LISTAGG(distinct attribute1, '_') into l_Plant from vts_plant_master_tbl where TENANTID=P_TenantId and IS_ACTIVE=1;
if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>'Less than 30 Min(%),No of Vehicle >30 Min.,OBU Wise Waiting Time Unit(Min.),Total Vehicles' ,
                                             p_string_tab   =>l_Categ_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then

                      V_COUNT:=1;
                   end if;
           end;
       end if;
if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>'Month_Jan,Month_Feb,Month_Mar,Month_Apr,Month_May,Month_Jun,Month_Jul,Month_Aug,Month_Sep,Month_Oct,Month_Nov,Month_Dec' ,
                                             p_string_tab   =>l_Month_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             ); 
                   if V_COUNT>0 then

                      V_COUNT:=1;
                   end if;
           end;
       end if;
  if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>l_Plant ,
                                             p_string_tab   =>l_Plant_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter_,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' plant';
                      V_COUNT:=1;
                   end if;
           end;
       end if;  
-------------------   start for month ----------
        for i in 1..l_Categ_tab.count 
        loop

            for j in 1..l_Plant_tab.count
            loop
            l_Row_COUNT:=l_Row_COUNT+1;
                for k in 1..l_Month_tab.count
                loop

                 SELECT SUBSTR(l_Month_tab(k), INSTR(l_Month_tab(k), '_', -1) + 1) into l_Month FROM dual;
                 SELECT TRUNC(TO_DATE(P_Year || '-' || l_Month, 'YYYY-MM'), 'MM') into l_Year_Start_Date FROM dual;
                 SELECT TRUNC(ADD_MONTHS(TO_DATE(P_Year || '-' || l_Month, 'YYYY-MM'), 1) - 1) into l_Year_End_Date FROM dual;
                    -------------------   start l_TotalMixCount ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalMixCount
                                            FROM ( 
                    SELECT distinct  V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID, 
                                                         CASE 
                                                WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                                                ELSE 'Common'  END AS RMType 
                                                FROM  VTS_VENDOR_VEHICLE_TBL V
                                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                                    JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                                                WHERE 
                                                    V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = 1  AND ulapproved = 'Y'  
                                                    AND to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date 
                                                    group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                                                    ) aa where RMType = 'Mix';

                    -------------------   end l_TotalMixCount ----------

                 -------------------   start l_WithOutPlantWaiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantTotal_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                AND to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date 
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_WithOutPlantTotal_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                AND to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix' ;


                        select
                        (case when (l_WithOutPlantTotal_Vehicle=0 or l_WithOutPlantTotal_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_WithOutPlantTotal_Waiting_Time/l_WithOutPlantTotal_Vehicle)),0)
                        end )into l_WithOutPlantWaiting_Time from dual;
                      -------------------   end l_WithOutPlantWaiting_Time ----------  

                 -------------------   start l_Waiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Total_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_Total_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa  where RMType != 'Mix';


                        select
                        (case when (l_Total_Vehicle=0 or l_Total_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_Total_Waiting_Time/l_Total_Vehicle)), 0)
                        end )into l_Waiting_Time from dual;
                      -------------------   end l_Waiting_Time ----------  

                 -------------------   start l_Las30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Las30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30 and RMType != 'Mix' ;
                      -------------------   end l_Las30Count ----------      

                       -------------------   start l_TotalWithOutPlantLas30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalWithOutPlantLas30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30  and RMType != 'Mix'  ;
                      -------------------   end l_TotalWithOutPlantLas30Count ----------      
                      -------------------   start l_WithOutPlantGreater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantGreater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' 
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN  l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix' 
                            ;
                            -------------------   end l_WithOutPlantGreater30Count ----------

                             -------------------   start l_Greater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_Greater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j)) 
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN  l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix' 
                            ;
                            -------------------   end l_Greater30Count ----------


                            -------------------   start l_TotalCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' and pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                        and to_date(VS.RGAPPROVEDDATE) BETWEEN l_Year_Start_Date
                                AND l_Year_End_Date 
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                                ) where RMType != 'Mix';

                        -------------------   end l_TotalCount ----------

                         -------------------   start l_TotalWithOutPlantCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalWithOutPlantCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common' 
                               END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' 
                        and to_date(VS.RGAPPROVEDDATE) BETWEEN l_Year_Start_Date
                                AND l_Year_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                                )where RMType != 'Mix';

                        -------------------   end l_TotalWithOutPlantCount ----------

                        select
                        (case when (l_Las30Count=0 or l_TotalCount=0) then 0 else                         
                        ROUND(TO_NUMBER(((l_Las30Count/l_TotalCount)*100)), 0)
                        end )into l_Las30Per from dual;
                        select
                        (case when (l_TotalWithOutPlantLas30Count=0 or l_TotalWithOutPlantCount=0) then 0 else                         
                        ROUND(TO_NUMBER(((l_TotalWithOutPlantLas30Count/l_TotalWithOutPlantCount)*100)), 0)
                        end )into l_TotalWithOutLas30Per from dual;

                         select Count(1) into l_SummaryCount from VTS_SUMMARY_REPORT_TBL where Categ=l_Categ_tab(i) and Product=l_Plant_tab(j);
                 if(l_SummaryCount=0) then 

                         begin
                         if(l_Categ_tab(i)='Less than 30 Min(%)') then 
                         begin 
                         if(l_Plant_tab.count=j) then 
                         begin 
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Las30Per);
                         l_Row_COUNT:=l_Row_COUNT+1;
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),'Grand Total',l_TotalWithOutLas30Per);
                         commit;
                         end;
                         else
                         begin
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Las30Per);
                         end ;
                         end if;
                         end;
                         end if;
                         if(l_Categ_tab(i)='No of Vehicle >30 Min.') then 
                         begin
                         if(l_Plant_tab.count=j) then  
                         begin 
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Greater30Count);
                         l_Row_COUNT:=l_Row_COUNT+1;
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),'Grand Total',l_WithOutPlantGreater30Count);
                         commit;
                         end;
                         else
                         begin
                           insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Greater30Count);
                         end ;
                         end if;

                         commit;
                         end;
                         end if;
                         if(l_Categ_tab(i)='OBU Wise Waiting Time Unit(Min.)') then 
                         begin 
                         if(l_Plant_tab.count=j) then 
                         begin 
                        insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Waiting_Time);
                         l_Row_COUNT:=l_Row_COUNT+1;
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),'Avg Time : Min.',l_WithOutPlantWaiting_Time);
                         commit;
                         end;
                         else
                         begin
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_Waiting_Time);
                         end ;
                         end if;

                         commit;
                         end;
                         end if;
                          if(l_Categ_tab(i)='Total Vehicles') then 
                         begin 
                         if(l_Plant_tab.count=j) then  
                         begin 
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_TotalCount);
                         l_Row_COUNT:=l_Row_COUNT+1;
                         insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),'Grand Total',(l_TotalWithOutPlantCount+l_TotalMixCount));
                         commit;
                         end;
                         elsif(j=1) then
                         begin
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),'Common',l_TotalMixCount);
                         l_Row_COUNT:=l_Row_COUNT+1;
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_TotalCount);
                         end ;
                         else
                         begin
                          insert into VTS_SUMMARY_REPORT_TBL (id,Categ,Product,Month_Jan) 
                         values(l_Row_COUNT,l_Categ_tab(i),l_Plant_tab(j),l_TotalCount);
                         end ;
                         end if;

                         commit;
                         end;
                         end if;

                         end ;
                  else   
                         begin
                         if(l_Categ_tab(i)='Less than 30 Min(%)') then 
                         begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalWithOutLas30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='No of Vehicle >30 Min.') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantGreater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='OBU Wise Waiting Time Unit(Min.)') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantWaiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Avg Time : Min.''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='Total Vehicles') then 
                        begin
                        if(l_Plant_tab.count=j) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||(l_TotalWithOutPlantCount+l_TotalMixCount)||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         elsif(j=1) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalMixCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Common''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         end ;
                     end if;

                end loop; 
            end loop; 
        end loop;  

-------------------   end for month ----------

-------------------   start for week ----------
--        select LISTAGG(PLANTDESCRIPTION, ',') into l_Plant from vts_plant_master_tbl where TENANTID=1 and IS_ACTIVE=1;

if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>'Less than 30 Min(%),No of Vehicle >30 Min.,OBU Wise Waiting Time Unit(Min.),Total Vehicles' ,
                                             p_string_tab   =>l_Categ_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' cate';
                      V_COUNT:=1;
                   end if;
           end;
       end if;
if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>'WK_01,WK_02,WK_03,WK_04,WK_05,WK_06,WK_07,WK_08,WK_09,WK_10,WK_11,WK_12,WK_13,WK_14,WK_15,WK_16,WK_17,WK_18,WK_19,WK_20,WK_21,WK_22,WK_23,WK_24,WK_25,WK_26,WK_27,WK_28,WK_29,WK_30,WK_31,WK_32,WK_33,WK_34,WK_35,WK_36,WK_37,WK_38,WK_39,WK_40,WK_41,WK_42,WK_43,WK_44,WK_45,WK_46,WK_47,WK_48,WK_49,WK_50,WK_51,WK_52' ,
                                             p_string_tab   =>l_Month_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             ); 
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' year';
                      V_COUNT:=1;
                   end if;
           end;
       end if;
  if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>l_Plant ,
                                             p_string_tab   =>l_Plant_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter_,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' plant';
                      V_COUNT:=1;
                   end if;
           end;
       end if;  

        for i in 1..l_Categ_tab.count
        loop
            for j in 1..l_Plant_tab.count
            loop
                for k in 1..l_Month_tab.count
                loop

                 SELECT SUBSTR(l_Month_tab(k), INSTR(l_Month_tab(k), '_', -1) + 1) into l_Month FROM dual;
--                 SELECT (CASE  WHEN MOD(P_Year, 400) = 0 OR (MOD(P_Year, 4) = 0 AND MOD(P_Year, 100) != 0)
--           THEN 'Yes'  ELSE 'No' END)  into l_Leap_Year_Status FROM dual;
--                 if(l_Month='52' and l_Leap_Year_Status='Yes') then 
--                 SELECT (TRUNC(TO_DATE(P_Year, 'YYYY'), 'YYYY') + (l_Month - 1) * 7 + 8) into l_Week_End_Date FROM dual;
--                 else
--                 SELECT (TRUNC(TO_DATE(P_Year, 'YYYY'), 'YYYY') + (l_Month - 1) * 7 + 7) into l_Week_End_Date FROM dual;
--                 end if;
--               
                 SELECT (TRUNC(TO_DATE(P_Year, 'YYYY'), 'YYYY') + (l_Month - 1) * 7) into l_Week_Start_Date FROM dual;
                 SELECT (TRUNC(TO_DATE(P_Year, 'YYYY'), 'YYYY') + (l_Month - 1) * 7 + 7) into l_Week_End_Date FROM dual;

                  -------------------   start l_TotalMixCount ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalMixCount
                                            FROM ( 
                    SELECT distinct  V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID, 
                                                         CASE 
                                                WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                                                ELSE 'Common'  END AS RMType 
                                                FROM  VTS_VENDOR_VEHICLE_TBL V
                                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                                    JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                                                WHERE 
                                                    V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = 1  AND ulapproved = 'Y'  
                                                   and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                                    group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                                                    ) aa where RMType = 'Mix';

                    -------------------   end l_TotalMixCount ----------



                 -------------------   start l_WithOutPlantWaiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantTotal_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_WithOutPlantTotal_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix' ;


                        select
                        (case when (l_WithOutPlantTotal_Vehicle=0 or l_WithOutPlantTotal_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_WithOutPlantTotal_Waiting_Time/l_WithOutPlantTotal_Vehicle)),0)
                        end )into l_WithOutPlantWaiting_Time from dual;
                      -------------------   end l_WithOutPlantWaiting_Time ----------  

                 -------------------   start l_Waiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Total_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_Total_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa  where RMType != 'Mix';


                        select
                        (case when (l_Total_Vehicle=0 or l_Total_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_Total_Waiting_Time/l_Total_Vehicle)), 0)
                        end )into l_Waiting_Time from dual;
                      -------------------   end l_Waiting_Time ----------  

                 -------------------   start l_Las30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Las30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                               and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30 and RMType != 'Mix' ;
                      -------------------   end l_Las30Count ----------      

                       -------------------   start l_TotalWithOutPlantLas30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalWithOutPlantLas30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN  l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30 and RMType != 'Mix' ;
                      -------------------   end l_TotalWithOutPlantLas30Count ----------      
                      -------------------   start l_WithOutPlantGreater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantGreater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' 
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix'

                            ;
                            -------------------   end l_WithOutPlantGreater30Count ----------

                             -------------------   start l_Greater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_Greater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j)) 
                                and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix'

                            ;
                            -------------------   end l_Greater30Count ----------


                            -------------------   start l_TotalCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' and pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                        and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )where RMType != 'Mix'
;
                        -------------------   end l_TotalCount ----------

                         -------------------   start l_TotalWithOutPlantCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalWithOutPlantCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID, VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' 
                       and to_date(VS.RGAPPROVEDDATE) BETWEEN   l_Week_Start_Date  
                                AND l_Week_End_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )where RMType != 'Mix'
;
                        -------------------   end l_TotalWithOutPlantCount ----------

                        select
                        (case when (l_Las30Count=0 or l_TotalCount=0) then 0 else                         
                        ROUND(TO_NUMBER(((l_Las30Count/l_TotalCount)*100)), 0)
                        end )into l_Las30Per from dual;
                        select
                        (case when (l_TotalWithOutPlantLas30Count=0 or l_TotalWithOutPlantCount=0) then 0 else                         
                        ROUND(TO_NUMBER(((l_TotalWithOutPlantLas30Count/l_TotalWithOutPlantCount)*100)), 0)
                        end )into l_TotalWithOutLas30Per from dual;

                         select Count(1) into l_SummaryCount from VTS_SUMMARY_REPORT_TBL where Categ=l_Categ_tab(i) and Product=l_Plant_tab(j);

                   if(l_SummaryCount>0) then    
                         begin
                         if(l_Categ_tab(i)='Less than 30 Min(%)') then 
                         begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalWithOutLas30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='No of Vehicle >30 Min.') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantGreater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='OBU Wise Waiting Time Unit(Min.)') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantWaiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Avg Time : Min.''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='Total Vehicles') then 
                        begin
                        if(l_Plant_tab.count=j) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||(l_TotalWithOutPlantCount+l_TotalMixCount)||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                          elsif(j=1) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalMixCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Common''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         end ;
                     end if;

                end loop; 
            end loop; 
        end loop;  
-------------------   end for week ----------


-------------------   start for Day ----------
--        select LISTAGG(PLANTDESCRIPTION, ',') into l_Plant from vts_plant_master_tbl where TENANTID=1 and IS_ACTIVE=1;

if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>'Less than 30 Min(%),No of Vehicle >30 Min.,OBU Wise Waiting Time Unit(Min.),Total Vehicles' ,
                                             p_string_tab   =>l_Categ_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' cate';
                      V_COUNT:=1;
                   end if;
           end;
       end if;
if nvl(V_COUNT,0)=0 then                                                      
           begin
                            SELECT (CASE  WHEN MOD(P_Year, 400) = 0 OR (MOD(P_Year, 4) = 0 AND MOD(P_Year, 100) != 0)
           THEN 'Yes'  ELSE 'No' END)  into l_Leap_Year_Status FROM dual;
                   if(l_Leap_Year_Status='Yes') then 
               l_Year_Date:= 'JAN_01,JAN_02,JAN_03,JAN_04,JAN_05,JAN_06,JAN_07,JAN_08,JAN_09,JAN_10,JAN_11,JAN_12,JAN_13,JAN_14,JAN_15,JAN_16,JAN_17,JAN_18,JAN_19,JAN_20,JAN_21,JAN_22,JAN_23,JAN_24,JAN_25,JAN_26,JAN_27,JAN_28,JAN_29,JAN_30,JAN_31,FEB_01,FEB_02,FEB_03,FEB_04,FEB_05,FEB_06,FEB_07,FEB_08,FEB_09,FEB_10,FEB_11,FEB_12,FEB_13,FEB_14,FEB_15,FEB_16,FEB_17,FEB_18,FEB_19,FEB_20,FEB_21,FEB_22,FEB_23,FEB_24,FEB_25,FEB_26,FEB_27,FEB_28,MAR_01,MAR_02,MAR_03,MAR_04,MAR_05,MAR_06,MAR_07,MAR_08,MAR_09,MAR_10,MAR_11,MAR_12,MAR_13,MAR_14,MAR_15,MAR_16,MAR_17,MAR_18,MAR_19,MAR_20,MAR_21,MAR_22,MAR_23,MAR_24,MAR_25,MAR_26,MAR_27,MAR_28,MAR_29,MAR_30,MAR_31,APR_01,APR_02,APR_03,APR_04,APR_05,APR_06,APR_07,APR_08,APR_09,APR_10,APR_11,APR_12,APR_13,APR_14,APR_15,APR_16,APR_17,APR_18,APR_19,APR_20,APR_21,APR_22,APR_23,APR_24,APR_25,APR_26,APR_27,APR_28,APR_29,APR_30,MAY_01,MAY_02,MAY_03,MAY_04,MAY_05,MAY_06,MAY_07,MAY_08,MAY_09,MAY_10,MAY_11,MAY_12,MAY_13,MAY_14,MAY_15,MAY_16,MAY_17,MAY_18,MAY_19,MAY_20,MAY_21,MAY_22,MAY_23,MAY_24,MAY_25,MAY_26,MAY_27,MAY_28,MAY_29,MAY_30,MAY_31,JUN_01,JUN_02,JUN_03,JUN_04,JUN_05,JUN_06,JUN_07,JUN_08,JUN_09,JUN_10,JUN_11,JUN_12,JUN_13,JUN_14,JUN_15,JUN_16,JUN_17,JUN_18,JUN_19,JUN_20,JUN_21,JUN_22,JUN_23,JUN_24,JUN_25,JUN_26,JUN_27,JUN_28,JUN_29,JUN_30,JUL_01,JUL_02,JUL_03,JUL_04,JUL_05,JUL_06,JUL_07,JUL_08,JUL_09,JUL_10,JUL_11,JUL_12,JUL_13,JUL_14,JUL_15,JUL_16,JUL_17,JUL_18,JUL_19,JUL_20,JUL_21,JUL_22,JUL_23,JUL_24,JUL_25,JUL_26,JUL_27,JUL_28,JUL_29,JUL_30,JUL_31,AUG_01,AUG_02,AUG_03,AUG_04,AUG_05,AUG_06,AUG_07,AUG_08,AUG_09,AUG_10,AUG_11,AUG_12,AUG_13,AUG_14,AUG_15,AUG_16,AUG_17,AUG_18,AUG_19,AUG_20,AUG_21,AUG_22,AUG_23,AUG_24,AUG_25,AUG_26,AUG_27,AUG_28,AUG_29,AUG_30,AUG_31,SEP_01,SEP_02,SEP_03,SEP_04,SEP_05,SEP_06,SEP_07,SEP_08,SEP_09,SEP_10,SEP_11,SEP_12,SEP_13,SEP_14,SEP_15,SEP_16,SEP_17,SEP_18,SEP_19,SEP_20,SEP_21,SEP_22,SEP_23,SEP_24,SEP_25,SEP_26,SEP_27,SEP_28,SEP_29,SEP_30,OCT_01,OCT_02,OCT_03,OCT_04,OCT_05,OCT_06,OCT_07,OCT_08,OCT_09,OCT_10,OCT_11,OCT_12,OCT_13,OCT_14,OCT_15,OCT_16,OCT_17,OCT_18,OCT_19,OCT_20,OCT_21,OCT_22,OCT_23,OCT_24,OCT_25,OCT_26,OCT_27,OCT_28,OCT_29,OCT_30,OCT_31,NOV_01,NOV_02,NOV_03,NOV_04,NOV_05,NOV_06,NOV_07,NOV_08,NOV_09,NOV_10,NOV_11,NOV_12,NOV_13,NOV_14,NOV_15,NOV_16,NOV_17,NOV_18,NOV_19,NOV_20,NOV_21,NOV_22,NOV_23,NOV_24,NOV_25,NOV_26,NOV_27,NOV_28,NOV_29,NOV_30,DEC_01,DEC_02,DEC_03,DEC_04,DEC_05,DEC_06,DEC_07,DEC_08,DEC_09,DEC_10,DEC_11,DEC_12,DEC_13,DEC_14,DEC_15,DEC_16,DEC_17,DEC_18,DEC_19,DEC_20,DEC_21,DEC_22,DEC_23,DEC_24,DEC_25,DEC_26,DEC_27,DEC_28,DEC_29,DEC_30,DEC_31,FEB_29';
                 else
                l_Year_Date:= 'JAN_01,JAN_02,JAN_03,JAN_04,JAN_05,JAN_06,JAN_07,JAN_08,JAN_09,JAN_10,JAN_11,JAN_12,JAN_13,JAN_14,JAN_15,JAN_16,JAN_17,JAN_18,JAN_19,JAN_20,JAN_21,JAN_22,JAN_23,JAN_24,JAN_25,JAN_26,JAN_27,JAN_28,JAN_29,JAN_30,JAN_31,FEB_01,FEB_02,FEB_03,FEB_04,FEB_05,FEB_06,FEB_07,FEB_08,FEB_09,FEB_10,FEB_11,FEB_12,FEB_13,FEB_14,FEB_15,FEB_16,FEB_17,FEB_18,FEB_19,FEB_20,FEB_21,FEB_22,FEB_23,FEB_24,FEB_25,FEB_26,FEB_27,FEB_28,MAR_01,MAR_02,MAR_03,MAR_04,MAR_05,MAR_06,MAR_07,MAR_08,MAR_09,MAR_10,MAR_11,MAR_12,MAR_13,MAR_14,MAR_15,MAR_16,MAR_17,MAR_18,MAR_19,MAR_20,MAR_21,MAR_22,MAR_23,MAR_24,MAR_25,MAR_26,MAR_27,MAR_28,MAR_29,MAR_30,MAR_31,APR_01,APR_02,APR_03,APR_04,APR_05,APR_06,APR_07,APR_08,APR_09,APR_10,APR_11,APR_12,APR_13,APR_14,APR_15,APR_16,APR_17,APR_18,APR_19,APR_20,APR_21,APR_22,APR_23,APR_24,APR_25,APR_26,APR_27,APR_28,APR_29,APR_30,MAY_01,MAY_02,MAY_03,MAY_04,MAY_05,MAY_06,MAY_07,MAY_08,MAY_09,MAY_10,MAY_11,MAY_12,MAY_13,MAY_14,MAY_15,MAY_16,MAY_17,MAY_18,MAY_19,MAY_20,MAY_21,MAY_22,MAY_23,MAY_24,MAY_25,MAY_26,MAY_27,MAY_28,MAY_29,MAY_30,MAY_31,JUN_01,JUN_02,JUN_03,JUN_04,JUN_05,JUN_06,JUN_07,JUN_08,JUN_09,JUN_10,JUN_11,JUN_12,JUN_13,JUN_14,JUN_15,JUN_16,JUN_17,JUN_18,JUN_19,JUN_20,JUN_21,JUN_22,JUN_23,JUN_24,JUN_25,JUN_26,JUN_27,JUN_28,JUN_29,JUN_30,JUL_01,JUL_02,JUL_03,JUL_04,JUL_05,JUL_06,JUL_07,JUL_08,JUL_09,JUL_10,JUL_11,JUL_12,JUL_13,JUL_14,JUL_15,JUL_16,JUL_17,JUL_18,JUL_19,JUL_20,JUL_21,JUL_22,JUL_23,JUL_24,JUL_25,JUL_26,JUL_27,JUL_28,JUL_29,JUL_30,JUL_31,AUG_01,AUG_02,AUG_03,AUG_04,AUG_05,AUG_06,AUG_07,AUG_08,AUG_09,AUG_10,AUG_11,AUG_12,AUG_13,AUG_14,AUG_15,AUG_16,AUG_17,AUG_18,AUG_19,AUG_20,AUG_21,AUG_22,AUG_23,AUG_24,AUG_25,AUG_26,AUG_27,AUG_28,AUG_29,AUG_30,AUG_31,SEP_01,SEP_02,SEP_03,SEP_04,SEP_05,SEP_06,SEP_07,SEP_08,SEP_09,SEP_10,SEP_11,SEP_12,SEP_13,SEP_14,SEP_15,SEP_16,SEP_17,SEP_18,SEP_19,SEP_20,SEP_21,SEP_22,SEP_23,SEP_24,SEP_25,SEP_26,SEP_27,SEP_28,SEP_29,SEP_30,OCT_01,OCT_02,OCT_03,OCT_04,OCT_05,OCT_06,OCT_07,OCT_08,OCT_09,OCT_10,OCT_11,OCT_12,OCT_13,OCT_14,OCT_15,OCT_16,OCT_17,OCT_18,OCT_19,OCT_20,OCT_21,OCT_22,OCT_23,OCT_24,OCT_25,OCT_26,OCT_27,OCT_28,OCT_29,OCT_30,OCT_31,NOV_01,NOV_02,NOV_03,NOV_04,NOV_05,NOV_06,NOV_07,NOV_08,NOV_09,NOV_10,NOV_11,NOV_12,NOV_13,NOV_14,NOV_15,NOV_16,NOV_17,NOV_18,NOV_19,NOV_20,NOV_21,NOV_22,NOV_23,NOV_24,NOV_25,NOV_26,NOV_27,NOV_28,NOV_29,NOV_30,DEC_01,DEC_02,DEC_03,DEC_04,DEC_05,DEC_06,DEC_07,DEC_08,DEC_09,DEC_10,DEC_11,DEC_12,DEC_13,DEC_14,DEC_15,DEC_16,DEC_17,DEC_18,DEC_19,DEC_20,DEC_21,DEC_22,DEC_23,DEC_24,DEC_25,DEC_26,DEC_27,DEC_28,DEC_29,DEC_30,DEC_31';
                 end if;         

            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>l_Year_Date,
                                             p_string_tab   =>l_Month_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter,
                                             p_msgtxt       =>p_msgtxt
                                             ); 
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' year';
                      V_COUNT:=1;
                   end if;
           end;
       end if;
  if nvl(V_COUNT,0)=0 then                                                      
           begin
            V_COUNT:= VTS_TAB_PKG.VTS_parse_string_FUN( p_string       =>l_Plant ,
                                             p_string_tab   =>l_Plant_tab,
                                             p_noof_recs    =>l_noof_recs,
                                             p_delimiter    =>l_delimiter_,
                                             p_msgtxt       =>p_msgtxt
                                             );
                   if V_COUNT>0 then
--                   P_OUTPUT := p_msgtxt|| ' plant';
                      V_COUNT:=1;
                   end if;
           end;
       end if;  

        for i in 1..l_Categ_tab.count
        loop
            for j in 1..l_Plant_tab.count
            loop
                for k in 1..l_Month_tab.count
                loop

                 SELECT SUBSTR(l_Month_tab(k), INSTR(l_Month_tab(k), '_', -1) + 1) into l_Month FROM dual;
           SELECT SUBSTR(l_Month_tab(k), 1, INSTR(l_Month_tab(k), '_') - 1) into l_Month_Name FROM dual;
           SELECT SUBSTR(l_Month_tab(k), INSTR(l_Month_tab(k), '_') + 1) into l_Day FROM dual;
           select TO_DATE(P_Year || l_Month_Name || l_Day, 'YYYYMONDD') into l_Week_Start_Date FROM dual;



 -------------------   start l_TotalMixCount ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalMixCount
                                            FROM ( 
                    SELECT distinct  V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID, 
                                                         CASE 
                                                WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                                                ELSE 'Common'  END AS RMType 
                                                FROM  VTS_VENDOR_VEHICLE_TBL V
                                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                                    JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                                                WHERE 
                                                    V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = 1  AND ulapproved = 'Y'  
                                                   and to_date(VS.RGAPPROVEDDATE) = l_Week_Start_Date
                                                    group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                                                    ) aa where RMType = 'Mix';

                    -------------------   end l_TotalMixCount ----------


                 -------------------   start l_WithOutPlantWaiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantTotal_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_WithOutPlantTotal_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa  where RMType != 'Mix';


                        select
                        (case when (l_WithOutPlantTotal_Vehicle=0 or l_WithOutPlantTotal_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_WithOutPlantTotal_Waiting_Time/l_WithOutPlantTotal_Vehicle)),0)
                        end )into l_WithOutPlantWaiting_Time from dual;
                      -------------------   end l_WithOutPlantWaiting_Time ----------  

                 -------------------   start l_Waiting_Time ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Total_Vehicle
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE 
                                in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa  where RMType != 'Mix';
                             SELECT sum(TotalTimeInFactoryInsideMin) INTO l_Total_Waiting_Time
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                                and to_date(VS.RGAPPROVEDDATE) = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa  where RMType != 'Mix';


                        select
                        (case when (l_Total_Vehicle=0 or l_Total_Waiting_Time=0) then 0 else                         
                        ROUND(TO_NUMBER((l_Total_Waiting_Time/l_Total_Vehicle)), 0)
                        end )into l_Waiting_Time from dual;
                      -------------------   end l_Waiting_Time ----------  

                 -------------------   start l_Las30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_Las30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                               and to_date(VS.RGAPPROVEDDATE) = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30 and RMType != 'Mix' ;
                      -------------------   end l_Las30Count ----------      

                       -------------------   start l_TotalWithOutPlantLas30Count ----------
                    SELECT COUNT(VEHICLE_NUMBER) INTO l_TotalWithOutPlantLas30Count
                        FROM ( SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE, 
                        VTS_GET_TIME_DIFFERENCE_IN_Min_Fun( TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi') ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM  VTS_VENDOR_VEHICLE_TBL V
                            JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                            JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                            JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID  
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId  AND ulapproved = 'Y'  
                                and to_date(VS.RGAPPROVEDDATE) = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin < 30  ;
                      -------------------   end l_TotalWithOutPlantLas30Count ----------      
                      -------------------   start l_WithOutPlantGreater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_WithOutPlantGreater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' 
                                and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix'

                            ;
                            -------------------   end l_WithOutPlantGreater30Count ----------

                             -------------------   start l_Greater30Count ----------
                SELECT COUNT(VEHICLE_NUMBER) INTO l_Greater30Count
                        FROM (
                            SELECT distinct V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,   VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                VTS_GET_TIME_DIFFERENCE_IN_Min_Fun(
                                    TO_CHAR(VS.tpapproveddate, 'dd.mm.yyyy hh24:mi'), 
                                    TO_CHAR(VS.ULAPPROVEDDATE, 'dd.mm.yyyy hh24:mi')
                                ) AS TotalTimeInFactoryInsideMin,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                            FROM 
                                VTS_VENDOR_VEHICLE_TBL V   
                                JOIN vts_vendor_vehicle_part_detail_tbl R  ON V.ID = R.VENDOR_VEHICLE_ID
                                JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                                JOIN VTS_VEHICLE_STATUS_TBL VS  ON V.ID = VS.VENDOR_VEHICLE_ID 
                                JOIN vts_plant_master_tbl pm  ON pm.PLANTCODE = R.PLANT          
                            WHERE 
                                V.RG_ID_NO IS NOT NULL  AND pm.TENANTID = P_TenantId AND ulapproved = 'Y' AND pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j)) 
                                and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )  aa
                        WHERE  
                            aa.TotalTimeInFactoryInsideMin > 30 and RMType != 'Mix'

                            ;
                            -------------------   end l_Greater30Count ----------


                            -------------------   start l_TotalCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,  VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' and pm.PLANTCODE  in (select plantcode from vts_plant_master_tbl where TENANTID=P_TenantId and attribute1=l_Plant_tab(j))
                        and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )where RMType != 'Mix'
;
                        -------------------   end l_TotalCount ----------

                         -------------------   start l_TotalWithOutPlantCount ----------
                    select count(VEHICLE_NUMBER) into l_TotalWithOutPlantCount from (    
                select distinct
                        V.VEHICLE_NUMBER,R.VENDOR_VEHICLE_ID,  VS.RGAPPROVEDDATE,VS.tpapproveddate,VS.ULAPPROVEDDATE,
                                     CASE 
                            WHEN INSTR(LISTAGG(DISTINCT RT.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                            ELSE 'Common'  END AS RMType 
                        FROM VTS_VENDOR_VEHICLE_TBL V
                        JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID
                        JOIN vts_vendor_vehicle_part_detail_tbl RT ON V.ID = RT.VENDOR_VEHICLE_ID
                        JOIN VTS_VEHICLE_STATUS_TBL VS ON V.ID = VS.VENDOR_VEHICLE_ID
                        join vts_plant_master_tbl pm on pm.PLANTCODE = R.PLANT          
                        WHERE V.RG_ID_NO IS NOT NULL and pm.TENANTID=P_TenantId
                        AND ulapproved = 'Y' 
                       and to_date(VS.RGAPPROVEDDATE)  = l_Week_Start_Date
                                group by  V.VEHICLE_NUMBER ,VS.RGAPPROVEDDATE ,VS.tpapproveddate ,VS.ULAPPROVEDDATE,R.PLANT,r.VENDOR_VEHICLE_ID
                        )where RMType != 'Mix'
;
                        -------------------   end l_TotalWithOutPlantCount ----------

                        select
                        (case when (l_Las30Count=0 or l_TotalCount=0) then 0 else                          
                        ROUND(TO_NUMBER(((l_Las30Count/l_TotalCount)*100)), 0)
                        end )into l_Las30Per from dual;
                        select
                        (case when (l_TotalWithOutPlantLas30Count=0 or l_TotalWithOutPlantCount=0) then 0 else                         
                        ROUND(TO_NUMBER(((l_TotalWithOutPlantLas30Count/l_TotalWithOutPlantCount)*100)), 0)
                        end )into l_TotalWithOutLas30Per from dual;

                         select Count(1) into l_SummaryCount from VTS_SUMMARY_REPORT_TBL where Categ=l_Categ_tab(i) and Product=l_Plant_tab(j);

                   if(l_SummaryCount>0) then    
                         begin
                         if(l_Categ_tab(i)='Less than 30 Min(%)') then 
                         begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalWithOutLas30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Las30Per||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='No of Vehicle >30 Min.') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantGreater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                         else
                         begin
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Greater30Count||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;

                         if(l_Categ_tab(i)='OBU Wise Waiting Time Unit(Min.)') then 
                        begin
                        if(l_Plant_tab.count=j) then 
                         begin 
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_WithOutPlantWaiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Avg Time : Min.''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_Waiting_Time||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         if(l_Categ_tab(i)='Total Vehicles') then 
                        begin
                        if(l_Plant_tab.count=j) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||(l_TotalWithOutPlantCount+l_TotalMixCount)||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Grand Total''';
                        commit;
                         end;
                          elsif(j=1) then  
                         begin 
                         EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                           EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalMixCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''Common''';
                        commit;
                         end;
                         else
                         begin
                          EXECUTE IMMEDIATE 'UPDATE VTS_SUMMARY_REPORT_TBL SET ' || l_Month_tab(k) || ' = '||l_TotalCount||' WHERE Categ = ''' || l_Categ_tab(i) || ''' AND Product = ''' || l_Plant_tab(j) || '''';
                        commit;
                         end ;
                         end if;

                        end ;
                         end if;
                         end ; 
                     end if;

                end loop; 
            end loop; 
        end loop;  
-------------------   end for day ----------

                 SELECT (CASE  WHEN MOD(P_Year, 400) = 0 OR (MOD(P_Year, 4) = 0 AND MOD(P_Year, 100) != 0)
           THEN 'Yes'  ELSE 'No' END)  into l_Leap_Year_Status FROM dual;
                 if(l_Leap_Year_Status='Yes') then 
                OPEN C_Summary FOR
                    select id,Categ,
                    Product,
                    JAN_01,
                    JAN_02,
                    JAN_03,
                    JAN_04,
                    JAN_05,
                    JAN_06,
                    JAN_07,
                    WK_01,
                    JAN_08,
                    JAN_09,
                    JAN_10,
                    JAN_11,
                    JAN_12,
                    JAN_13,
                    JAN_14,
                    WK_02,
                    JAN_15,
                    JAN_16,
                    JAN_17,
                    JAN_18,
                    JAN_19,
                    JAN_20,
                    JAN_21,
                    WK_03,
                    JAN_22,
                    JAN_23,
                    JAN_24,
                    JAN_25,
                    JAN_26,
                    JAN_27,
                    JAN_28,
                    WK_04,
                    JAN_29,
                    JAN_30,
                    JAN_31,
                    MONTH_JAN,
                    FEB_01,
                    FEB_02,
                    FEB_03,
                    FEB_04,
                    WK_05,
                    FEB_05,
                    FEB_06,
                    FEB_07,
                    FEB_08,
                    FEB_09,
                    FEB_10,
                    FEB_11,
                    WK_06,
                    FEB_12,
                    FEB_13,
                    FEB_14,
                    FEB_15,
                    FEB_16,
                    FEB_17,
                    FEB_18,
                    WK_07,
                    FEB_19,
                    FEB_20,
                    FEB_21,
                    FEB_22,
                    FEB_23,
                    FEB_24,
                    FEB_25,
                    WK_08,
                    FEB_26,
                    FEB_27,
                    FEB_28,
                    FEB_29,
                    MONTH_FEB,
                    MAR_01,
                    MAR_02,
                    MAR_03,
                    WK_09,
                    MAR_04,
                    MAR_05,
                    MAR_06,
                    MAR_07,
                    MAR_08,
                    MAR_09,
                    MAR_10,
                    WK_10,
                    MAR_11,
                    MAR_12,
                    MAR_13,
                    MAR_14,
                    MAR_15,
                    MAR_16,
                    MAR_17,
                    WK_11,
                    MAR_18,
                    MAR_19,
                    MAR_20,
                    MAR_21,
                    MAR_22,
                    MAR_23,
                    MAR_24,
                    WK_12,
                    MAR_25,
                    MAR_26,
                    MAR_27,
                    MAR_28,
                    MAR_29,
                    MAR_30,
                    MAR_31,
                    WK_13,
                    MONTH_MAR,
                    APR_01,
                    APR_02,
                    APR_03,
                    APR_04,
                    APR_05,
                    APR_06,
                    APR_07,
                    WK_14,
                    APR_08,
                    APR_09,
                    APR_10,
                    APR_11,
                    APR_12,
                    APR_13,
                    APR_14,
                    WK_15,
                    APR_15,
                    APR_16,
                    APR_17,
                    APR_18,
                    APR_19,
                    APR_20,
                    APR_21,
                    WK_16,
                    APR_22,
                    APR_23,
                    APR_24,
                    APR_25,
                    APR_26,
                    APR_27,
                    APR_28,
                    WK_17,
                    APR_29,
                    APR_30,
                    MONTH_APR,
                    MAY_01,
                    MAY_02,
                    MAY_03,
                    MAY_04,
                    MAY_05,
                    WK_18,
                    MAY_06,
                    MAY_07,
                    MAY_08,
                    MAY_09,
                    MAY_10,
                    MAY_11,
                    MAY_12,
                    WK_19,
                    MAY_13,
                    MAY_14,
                    MAY_15,
                    MAY_16,
                    MAY_17,
                    MAY_18,
                    MAY_19,
                    WK_20,
                    MAY_20,
                    MAY_21,
                    MAY_22,
                    MAY_23,
                    MAY_24,
                    MAY_25,
                    MAY_26,
                    WK_21,
                    MAY_27,
                    MAY_28,
                    MAY_29,
                    MAY_30,
                    MAY_31,
                    MONTH_MAY,
                    JUN_01,
                    JUN_02,
                    WK_22,
                    JUN_03,
                    JUN_04,
                    JUN_05,
                    JUN_06,
                    JUN_07,
                    JUN_08,
                    JUN_09,
                    WK_23,
                    JUN_10,
                    JUN_11,
                    JUN_12,
                    JUN_13,
                    JUN_14,
                    JUN_15,
                    JUN_16,
                    WK_24,
                    JUN_17,
                    JUN_18,
                    JUN_19,
                    JUN_20,
                    JUN_21,
                    JUN_22,
                    JUN_23,
                    WK_25,
                    JUN_24,
                    JUN_25,
                    JUN_26,
                    JUN_27,
                    JUN_28,
                    JUN_29,
                    JUN_30,
                    WK_26,
                    MONTH_JUN,
                    JUL_01,
                    JUL_02,
                    JUL_03,
                    JUL_04,
                    JUL_05,
                    JUL_06,
                    JUL_07,
                    WK_27,
                    JUL_08,
                    JUL_09,
                    JUL_10,
                    JUL_11,
                    JUL_12,
                    JUL_13,
                    JUL_14,
                    WK_28,
                    JUL_15,
                    JUL_16,
                    JUL_17,
                    JUL_18,
                    JUL_19,
                    JUL_20,
                    JUL_21,
                    WK_29,
                    JUL_22,
                    JUL_23,
                    JUL_24,
                    JUL_25,
                    JUL_26,
                    JUL_27,
                    JUL_28,
                    WK_30,
                    JUL_29,
                    JUL_30,
                    JUL_31,
                    MONTH_JUL,
                    AUG_01,
                    AUG_02,
                    AUG_03,
                    AUG_04,
                    WK_31,
                    AUG_05,
                    AUG_06,
                    AUG_07,
                    AUG_08,
                    AUG_09,
                    AUG_10,
                    AUG_11,
                    WK_32,
                    AUG_12,
                    AUG_13,
                    AUG_14,
                    AUG_15,
                    AUG_16,
                    AUG_17,
                    AUG_18,
                    WK_33,
                    AUG_19,
                    AUG_20,
                    AUG_21,
                    AUG_22,
                    AUG_23,
                    AUG_24,
                    AUG_25,
                    WK_34,
                    AUG_26,
                    AUG_27,
                    AUG_28,
                    AUG_29,
                    AUG_30,
                    AUG_31,
                    MONTH_AUG,
                    SEP_01,
                    WK_35,
                    SEP_02,
                    SEP_03,
                    SEP_04,
                    SEP_05,
                    SEP_06,
                    SEP_07,
                    SEP_08,
                    WK_36,
                    SEP_09,
                    SEP_10,
                    SEP_11,
                    SEP_12,
                    SEP_13,
                    SEP_14,
                    SEP_15,
                    WK_37,
                    SEP_16,
                    SEP_17,
                    SEP_18,
                    SEP_19,
                    SEP_20,
                    SEP_21,
                    SEP_22,
                    WK_38,
                    SEP_23,
                    SEP_24,
                    SEP_25,
                    SEP_26,
                    SEP_27,
                    SEP_28,
                    SEP_29,
                    WK_39,
                    SEP_30,
                    MONTH_SEP,
                    OCT_01,
                    OCT_02,
                    OCT_03,
                    OCT_04,
                    OCT_05,
                    OCT_06,
                    WK_40,
                    OCT_07,
                    OCT_08,
                    OCT_09,
                    OCT_10,
                    OCT_11,
                    OCT_12,
                    OCT_13,
                    WK_41,
                    OCT_14,
                    OCT_15,
                    OCT_16,
                    OCT_17,
                    OCT_18,
                    OCT_19,
                    OCT_20,
                    WK_42,
                    OCT_21,
                    OCT_22,
                    OCT_23,
                    OCT_24,
                    OCT_25,
                    OCT_26,
                    OCT_27,
                    WK_43,
                    OCT_28,
                    OCT_29,
                    OCT_30,
                    OCT_31,
                    MONTH_OCT,
                    NOV_01,
                    NOV_02,
                    NOV_03,
                    WK_44,
                    NOV_04,
                    NOV_05,
                    NOV_06,
                    NOV_07,
                    NOV_08,
                    NOV_09,
                    NOV_10,
                    WK_45,
                    NOV_11,
                    NOV_12,
                    NOV_13,
                    NOV_14,
                    NOV_15,
                    NOV_16,
                    NOV_17,
                    WK_46,
                    NOV_18,
                    NOV_19,
                    NOV_20,
                    NOV_21,
                    NOV_22,
                    NOV_23,
                    NOV_24,
                    WK_47,
                    NOV_25,
                    NOV_26,
                    NOV_27,
                    NOV_28,
                    NOV_29,
                    NOV_30,
                    MONTH_NOV,
                    DEC_01,
                    WK_48,
                    DEC_02,
                    DEC_03,
                    DEC_04,
                    DEC_05,
                    DEC_06,
                    DEC_07,
                    DEC_08,
                    WK_49,
                    DEC_09,
                    DEC_10,
                    DEC_11,
                    DEC_12,
                    DEC_13,
                    DEC_14,
                    DEC_15,
                    WK_50,
                    DEC_16,
                    DEC_17,
                    DEC_18,
                    DEC_19,
                    DEC_20,
                    DEC_21,
                    DEC_22,
                    WK_51,
                    DEC_23,
                    DEC_24,
                    DEC_25,
                    DEC_26,
                    DEC_27,
                    DEC_28,
                    DEC_29,
                    WK_52,
                    DEC_30,
                    DEC_31,
                    MONTH_DEC
                    from VTS_SUMMARY_REPORT_TBL order by 1;   
                 else
                OPEN C_Summary FOR
                    select id, Categ,
                    Product,
                    JAN_01,
                    JAN_02,
                    JAN_03,
                    JAN_04,
                    JAN_05,
                    JAN_06,
                    JAN_07,
                    WK_01,
                    JAN_08,
                    JAN_09,
                    JAN_10,
                    JAN_11,
                    JAN_12,
                    JAN_13,
                    JAN_14,
                    WK_02,
                    JAN_15,
                    JAN_16,
                    JAN_17,
                    JAN_18,
                    JAN_19,
                    JAN_20,
                    JAN_21,
                    WK_03,
                    JAN_22,
                    JAN_23,
                    JAN_24,
                    JAN_25,
                    JAN_26,
                    JAN_27,
                    JAN_28,
                    WK_04,
                    JAN_29,
                    JAN_30,
                    JAN_31,
                    MONTH_JAN,
                    FEB_01,
                    FEB_02,
                    FEB_03,
                    FEB_04,
                    WK_05,
                    FEB_05,
                    FEB_06,
                    FEB_07,
                    FEB_08,
                    FEB_09,
                    FEB_10,
                    FEB_11,
                    WK_06,
                    FEB_12,
                    FEB_13,
                    FEB_14,
                    FEB_15,
                    FEB_16,
                    FEB_17,
                    FEB_18,
                    WK_07,
                    FEB_19,
                    FEB_20,
                    FEB_21,
                    FEB_22,
                    FEB_23,
                    FEB_24,
                    FEB_25,
                    WK_08,
                    FEB_26,
                    FEB_27,
                    FEB_28,
                    MONTH_FEB,
                    MAR_01,
                    MAR_02,
                    MAR_03,
                    MAR_04,
                    WK_09,
                    MAR_05,
                    MAR_06,
                    MAR_07,
                    MAR_08,
                    MAR_09,
                    MAR_10,
                    MAR_11,
                    WK_10,
                    MAR_12,
                    MAR_13,
                    MAR_14,
                    MAR_15,
                    MAR_16,
                    MAR_17,
                    MAR_18,
                    WK_11,
                    MAR_19,
                    MAR_20,
                    MAR_21,
                    MAR_22,
                    MAR_23,
                    MAR_24,
                    MAR_25,
                    WK_12,
                    MAR_26,
                    MAR_27,
                    MAR_28,
                    MAR_29,
                    MAR_30,
                    MAR_31,
                    MONTH_MAR,
                    APR_01,
                    WK_13,
                    APR_02,
                    APR_03,
                    APR_04,
                    APR_05,
                    APR_06,
                    APR_07,
                    APR_08,
                    WK_14,
                    APR_09,
                    APR_10,
                    APR_11,
                    APR_12,
                    APR_13,
                    APR_14,
                    APR_15,
                    WK_15,
                    APR_16,
                    APR_17,
                    APR_18,
                    APR_19,
                    APR_20,
                    APR_21,
                    APR_22,
                    WK_16,
                    APR_23,
                    APR_24,
                    APR_25,
                    APR_26,
                    APR_27,
                    APR_28,
                    APR_29,
                    WK_17,
                    APR_30,
                    MONTH_APR,
                    MAY_01,
                    MAY_02,
                    MAY_03,
                    MAY_04,
                    MAY_05,
                    MAY_06,
                    WK_18,
                    MAY_07,
                    MAY_08,
                    MAY_09,
                    MAY_10,
                    MAY_11,
                    MAY_12,
                    MAY_13,
                    WK_19,
                    MAY_14,
                    MAY_15,
                    MAY_16,
                    MAY_17,
                    MAY_18,
                    MAY_19,
                    MAY_20,
                    WK_20,
                    MAY_21,
                    MAY_22,
                    MAY_23,
                    MAY_24,
                    MAY_25,
                    MAY_26,
                    MAY_27,
                    WK_21,
                    MAY_28,
                    MAY_29,
                    MAY_30,
                    MAY_31,
                    MONTH_MAY,
                    JUN_01,
                    JUN_02,
                    JUN_03,
                    WK_22,
                    JUN_04,
                    JUN_05,
                    JUN_06,
                    JUN_07,
                    JUN_08,
                    JUN_09,
                    JUN_10,
                    WK_23,
                    JUN_11,
                    JUN_12,
                    JUN_13,
                    JUN_14,
                    JUN_15,
                    JUN_16,
                    JUN_17,
                    WK_24,
                    JUN_18,
                    JUN_19,
                    JUN_20,
                    JUN_21,
                    JUN_22,
                    JUN_23,
                    JUN_24,
                    WK_25,
                    JUN_25,
                    JUN_26,
                    JUN_27,
                    JUN_28,
                    JUN_29,
                    JUN_30,
                    MONTH_JUN,
                    JUL_01,
                    WK_26,
                    JUL_02,
                    JUL_03,
                    JUL_04,
                    JUL_05,
                    JUL_06,
                    JUL_07,
                    JUL_08,
                    WK_27,
                    JUL_09,
                    JUL_10,
                    JUL_11,
                    JUL_12,
                    JUL_13,
                    JUL_14,
                    JUL_15,
                    WK_28,
                    JUL_16,
                    JUL_17,
                    JUL_18,
                    JUL_19,
                    JUL_20,
                    JUL_21,
                    JUL_22,
                    WK_29,
                    JUL_23,
                    JUL_24,
                    JUL_25,
                    JUL_26,
                    JUL_27,
                    JUL_28,
                    JUL_29,
                    WK_30,
                    JUL_30,
                    JUL_31,
                    MONTH_JUL,
                    AUG_01,
                    AUG_02,
                    AUG_03,
                    AUG_04,
                    AUG_05,
                    WK_31,
                    AUG_06,
                    AUG_07,
                    AUG_08,
                    AUG_09,
                    AUG_10,
                    AUG_11,
                    AUG_12,
                    WK_32,
                    AUG_13,
                    AUG_14,
                    AUG_15,
                    AUG_16,
                    AUG_17,
                    AUG_18,
                    AUG_19,
                    WK_33,
                    AUG_20,
                    AUG_21,
                    AUG_22,
                    AUG_23,
                    AUG_24,
                    AUG_25,
                    AUG_26,
                    WK_34,
                    AUG_27,
                    AUG_28,
                    AUG_29,
                    AUG_30,
                    AUG_31,
                    MONTH_AUG,
                    SEP_01,
                    SEP_02,
                    WK_35,
                    SEP_03,
                    SEP_04,
                    SEP_05,
                    SEP_06,
                    SEP_07,
                    SEP_08,
                    SEP_09,
                    WK_36,
                    SEP_10,
                    SEP_11,
                    SEP_12,
                    SEP_13,
                    SEP_14,
                    SEP_15,
                    SEP_16,
                    WK_37,
                    SEP_17,
                    SEP_18,
                    SEP_19,
                    SEP_20,
                    SEP_21,
                    SEP_22,
                    SEP_23,
                    WK_38,
                    SEP_24,
                    SEP_25,
                    SEP_26,
                    SEP_27,
                    SEP_28,
                    SEP_29,
                    SEP_30,
                    WK_39,
                    MONTH_SEP,
                    OCT_01,
                    OCT_02,
                    OCT_03,
                    OCT_04,
                    OCT_05,
                    OCT_06,
                    OCT_07,
                    WK_40,
                    OCT_08,
                    OCT_09,
                    OCT_10,
                    OCT_11,
                    OCT_12,
                    OCT_13,
                    OCT_14,
                    WK_41,
                    OCT_15,
                    OCT_16,
                    OCT_17,
                    OCT_18,
                    OCT_19,
                    OCT_20,
                    OCT_21,
                    WK_42,
                    OCT_22,
                    OCT_23,
                    OCT_24,
                    OCT_25,
                    OCT_26,
                    OCT_27,
                    OCT_28,
                    WK_43,
                    OCT_29,
                    OCT_30,
                    OCT_31,
                    MONTH_OCT,
                    NOV_01,
                    NOV_02,
                    NOV_03,
                    NOV_04,
                    WK_44,
                    NOV_05,
                    NOV_06,
                    NOV_07,
                    NOV_08,
                    NOV_09,
                    NOV_10,
                    NOV_11,
                    WK_45,
                    NOV_12,
                    NOV_13,
                    NOV_14,
                    NOV_15,
                    NOV_16,
                    NOV_17,
                    NOV_18,
                    WK_46,
                    NOV_19,
                    NOV_20,
                    NOV_21,
                    NOV_22,
                    NOV_23,
                    NOV_24,
                    NOV_25,
                    WK_47,
                    NOV_26,
                    NOV_27,
                    NOV_28,
                    NOV_29,
                    NOV_30,
                    MONTH_NOV,
                    DEC_01,
                    DEC_02,
                    WK_48,
                    DEC_03,
                    DEC_04,
                    DEC_05,
                    DEC_06,
                    DEC_07,
                    DEC_08,
                    DEC_09,
                    WK_49,
                    DEC_10,
                    DEC_11,
                    DEC_12,
                    DEC_13,
                    DEC_14,
                    DEC_15,
                    DEC_16,
                    WK_50,
                    DEC_17,
                    DEC_18,
                    DEC_19,
                    DEC_20,
                    DEC_21,
                    DEC_22,
                    DEC_23,
                    WK_51,
                    DEC_24,
                    DEC_25,
                    DEC_26,
                    DEC_27,
                    DEC_28,
                    DEC_29,
                    DEC_30,
                    WK_52,
                    DEC_31,
                    MONTH_DEC
                    from VTS_SUMMARY_REPORT_TBL order by 1;  
                 end if;




END VTS_Summary_Report_Proc;


/
--------------------------------------------------------
--  DDL for Procedure VTS_UNLOADING_REMARKS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_UNLOADING_REMARKS_PROC" 
(
P_MODE IN VARCHAR2 
,P_Id  IN INTEGER DEFAULT 0
, P_Remarks IN VARCHAR2 DEFAULT NULL 
, P_Created_By IN VARCHAR2 DEFAULT NULL 
, P_TENANTID IN NUMBER DEFAULT 0 
, P_PageSize IN INT DEFAULT 10
, O_TotalCount OUT INT 
, P_SearchText IN VARCHAR  DEFAULT ''
, P_PageNumber IN INT DEFAULT 1
,C_RemarksDetails out SYS_REFCURSOR
)
 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_UNLOADING_REMARKS_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             UNLOADING REMARKS PROC

  /*************************************************************************************************************/

AS  
V_Remarks_Id number;
BEGIN
  IF P_MODE ='CreateRemarks' THEN

     INSERT INTO VTS_REMARKS_MASTER_TBL (
    REMARKS,TENANTID,CREATION_DATE,IS_ACTIVE,CREATED_BY )
     VALUES (trim(P_Remarks),P_TENANTID,sysdate,1,P_Created_By)

     RETURNING Id INTO V_Remarks_Id;
     COMMIT;
       OPEN C_RemarksDetails FOR
      Select * From VTS_REMARKS_MASTER_TBL  WHERE   Id =V_Remarks_Id;

ELSIF P_MODE ='UpdateRemarks' THEN
    UPDATE VTS_REMARKS_MASTER_TBL SET 
     remarks =trim(P_Remarks),        
    tenantid =P_TENANTID,UPDATION_DATE=sysdate WHERE Id =P_Id;

     COMMIT; 
      OPEN C_RemarksDetails FOR
      Select * From VTS_REMARKS_MASTER_TBL  WHERE   Id =P_Id;

 ELSIF P_MODE ='DeleteRemarks' THEN

    DELETE FROM VTS_REMARKS_MASTER_TBL WHERE Id =P_Id; 
    COMMIT;
   OPEN C_RemarksDetails FOR
      Select * From VTS_REMARKS_MASTER_TBL  WHERE  Id =P_Id;

  ELSIF P_MODE ='GetRemarks' THEN
   SELECT  COUNT(1) INTO O_TotalCount  FROM VTS_REMARKS_MASTER_TBL  Where tenantid=P_TENANTID and ((lower(remarks) like '%' || lower(P_SearchText) || '%') and (P_Id =0 OR Id =P_Id));

  OPEN C_RemarksDetails FOR
     Select Id , remarks From VTS_REMARKS_MASTER_TBL  
     Where tenantid=P_TENANTID and ((lower(remarks) like '%' || lower(P_SearchText) || '%') AND (P_Id =0 OR Id =P_Id))
      ORDER BY remarks asc OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
	  FETCH NEXT P_PageSize ROWS ONLY;

 ELSE


  OPEN C_RemarksDetails FOR
     Select * From VTS_REMARKS_MASTER_TBL ;

 END IF;
END VTS_UNLOADING_REMARKS_PROC ;


/
--------------------------------------------------------
--  DDL for Procedure VTS_UNLOAD_TOKEN_VEICLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_UNLOAD_TOKEN_VEICLE" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'GetReportedVehicle',
                                         P_TenantId IN INT, 
                                         P_SearchText IN VARCHAR  DEFAULT '',
                                         P_EntryMode IN VARCHAR  DEFAULT '',
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_CreatedBy IN INT,
                                         P_PageNumber IN INT DEFAULT 10, 
                                         P_LoggedInUserRole IN VARCHAR  DEFAULT '',
                                         O_TotalCount OUT INT,
                                         P_StatusCode VARCHAR  DEFAULT 'ULA',
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR
                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Login_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh              Login purpose

  /*************************************************************************************************************/



V_Next_Status NVARCHAR2(100);
BEGIN
  DBMS_OUTPUT.PUT_LINE(P_StatusCode);


V_Next_Status := Case WHEN P_StatusCode='SPA' THEN 'SPA,TPA' ELSE 
                CASE WHEN P_StatusCode='TPA' THEN 'SPA,TPA' ELSE
                CASE WHEN P_StatusCode='ULA' THEN 'ULA,OGA' ELSE
                CASE WHEN P_StatusCode='OGA' THEN 'ULA,OGA' END
                END END END;




      SELECT COUNT(1) INTO O_TotalCount
        FROM ( SELECT distinct
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType,
                V.RG_ID_NO as RgIDNumber,
                V.Current_Status,
                V.DISPATCH_DATE as DispatchDate,
                V.creation_date,
--                ,r.part_no,r.part_description
LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_description
                 FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID 
--                 join  vts_vehicle_status_tbl vst ON (V.ID = vst.VENDOR_VEHICLE_ID and r.plant=vst.PLANT_CODE)
--                and vst.attribute1 is not null
                where r.plant in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId) 

                 GROUP BY 
                V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date) V       
        WHERE V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where
      (P_StatusCode='SPA'  AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
       or (P_StatusCode='SPA'  AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' )

      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and NVL(ogApproved,'')='N')

      OR (P_StatusCode='OGA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and tpApproved='Y' and ulApproved='Y' and NVL(ogApproved,'N')='N'
      and not exists (Select 1 from vts_vehicle_status_tbl where NVL(spApproved,'N')='N' AND NVL(ulapproved,'N') ='N' AND Vendor_Vehicle_Id = V.ID))
     -- OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      )
       AND  ((LOWER(V.SupplierName) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                            OR  (LOWER(V.VehicleNumber) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                             or   (LOWER(V.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(V.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                        )
                        and (LOWER(V.ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
                        ;


        OPEN C_Vehicle FOR

         SELECT V.*,
         CASE   WHEN P_StatusCode='TPA' AND Exists (Select TPApproved FROM vts_vehicle_status_tbl Where Vendor_Vehicle_Id=V.Id) THEN 'Approved'
         WHEN P_StatusCode='OGA' AND Exists (Select OGApproved FROM vts_vehicle_status_tbl Where Vendor_Vehicle_Id=V.Id) THEN 'Approved'


         ELSE '' END  AS CurrentStatus

    FROM (SELECT 
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType,
                V.RG_ID_NO as RgIDNumber,
                V.Current_Status,
                V.DISPATCH_DATE as DispatchDate,
                V.creation_date,
--                ,r.part_no,r.part_description
LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_description
                 FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID 
                where r.plant in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId) 
              or   (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                 GROUP BY 
               V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date
                 ) V
     WHERE V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where
      (P_StatusCode='SPA'  AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      or (P_StatusCode='SPA'  AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
        OR (P_StatusCode='TPA' AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and NVL(ogApproved,'')='N')

      OR (P_StatusCode='OGA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and tpApproved='Y' and ulApproved='Y' and NVL(ogApproved,'N')='N'
      and not exists (Select 1 from vts_vehicle_status_tbl where NVL(spApproved,'N')='N' AND NVL(ulapproved,'N') ='N' AND Vendor_Vehicle_Id = V.ID))
     -- OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      )
       AND  ((LOWER(V.SupplierName) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                            OR  (LOWER(V.VehicleNumber) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                             or   (LOWER(V.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(V.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                        )
and (LOWER(V.ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
ORDER BY V.creation_date DESC OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                        FETCH NEXT P_PageSize ROWS ONLY;    


        OPEN C_VehicleItem FOR 
--        OPEN C_VehicleItem FOR 
--            SELECT DISTINCT
--                R.VENDOR_VEHICLE_ID as VehicleId,
--                R.VENDOR_PIN_NO as VendorPin,
--                R.INVOICE_NO as InoviceNumber,
--                R.INVOICE_DATE as InoviceDate,
--                R.PART_NO as PartNumber,
--                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
----                LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS PartNumber,
----    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS PartDescription,
--                V.DISPATCH_DATE as DispatchDate,
--                R.PLANT AS ItemPlant
--            FROM VTS_VENDOR_VEHICLE_TBL V
--            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID    
--            and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
--            WHERE  V.RG_ID_NO IS NOT NULL ;


SELECT  distinct
    R.VENDOR_VEHICLE_ID as VehicleId,
    LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
	LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    LISTAGG(R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS partDescription
            FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID    
            and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
            WHERE  V.RG_ID_NO IS NOT NULL 
            GROUP BY 
              V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date,R.VENDOR_VEHICLE_Id
    ;


END VTS_Unload_Token_Veicle;

/
--------------------------------------------------------
--  DDL for Procedure VTS_UNLOAD_TOKEN_VEICLE_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "VTS"."VTS_UNLOAD_TOKEN_VEICLE_PROC" 
                                        (
                                         P_Mode IN VARCHAR  DEFAULT 'GetReportedVehicle',
                                         P_TenantId IN INT, 
                                         P_SearchText IN VARCHAR  DEFAULT '',
                                         P_EntryMode IN VARCHAR  DEFAULT '',
                                         P_PageSize IN INT DEFAULT 1, 
                                         P_CreatedBy IN INT,
                                         P_PageNumber IN INT DEFAULT 10, 
                                         P_LoggedInUserRole IN VARCHAR  DEFAULT '',
                                         O_TotalCount OUT INT,
                                         P_StatusCode VARCHAR  DEFAULT 'ULA',
                                         C_Vehicle out SYS_REFCURSOR,
                                         C_VehicleItem out SYS_REFCURSOR
                                         
                                        )
AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_Unload_Token_Veicle_PROC
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh            Unload Token Vehicle 

  /*************************************************************************************************************/



V_Next_Status NVARCHAR2(100);
BEGIN
  DBMS_OUTPUT.PUT_LINE(P_StatusCode);


V_Next_Status := Case WHEN P_StatusCode='SPA' THEN 'SPA,TPA' ELSE 
                CASE WHEN P_StatusCode='TPA' THEN 'SPA,TPA' ELSE
                CASE WHEN P_StatusCode='ULA' THEN 'ULA,OGA' ELSE
                CASE WHEN P_StatusCode='OGA' THEN 'ULA,OGA' END
                END END END;




      SELECT COUNT(1) INTO O_TotalCount
        FROM ( SELECT distinct
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType,
                V.RG_ID_NO as RgIDNumber,
                V.Current_Status,
                V.DISPATCH_DATE as DispatchDate,
                V.creation_date,
--                ,r.part_no,r.part_description
LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_description
                 FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID 
--                 join  vts_vehicle_status_tbl vst ON (V.ID = vst.VENDOR_VEHICLE_ID and r.plant=vst.PLANT_CODE)
--                and vst.attribute1 is not null
                where r.plant in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId) 

                 GROUP BY 
                V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date) V       
        WHERE V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where
      (P_StatusCode='SPA'  AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
       or (P_StatusCode='SPA'  AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' )

      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and NVL(ogApproved,'')='N')

      OR (P_StatusCode='OGA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and tpApproved='Y' and ulApproved='Y' and NVL(ogApproved,'N')='N'
      and not exists (Select 1 from vts_vehicle_status_tbl where NVL(spApproved,'N')='N' AND NVL(ulapproved,'N') ='N' AND Vendor_Vehicle_Id = V.ID))
     -- OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      )
       AND  ((LOWER(V.SupplierName) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                            OR  (LOWER(V.VehicleNumber) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                             or   (LOWER(V.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(V.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                        )
                        and (LOWER(V.ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
                        ;


        OPEN C_Vehicle FOR

         SELECT V.*,
         CASE   WHEN P_StatusCode='TPA' AND Exists (Select TPApproved FROM vts_vehicle_status_tbl Where Vendor_Vehicle_Id=V.Id) THEN 'Approved'
         WHEN P_StatusCode='OGA' AND Exists (Select OGApproved FROM vts_vehicle_status_tbl Where Vendor_Vehicle_Id=V.Id) THEN 'Approved'


         ELSE '' END  AS CurrentStatus

    FROM (SELECT 
                V.ID,
                V.VEHICLE_NUMBER AS VehicleNumber,
                V.VENDOR_ID AS SupplierPin,
                V.VENDOR_NAME AS SupplierName,
                CASE WHEN MAX(R.USED_PIN) = 'Y' AND MAX(R.VENDOR_PIN_NO) IS NOT NULL 
                    THEN 'PIN'
                    ELSE 'MANNUAL'
                END AS ENTRYMODE ,   
                LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
                CASE 
                    WHEN INSTR(LISTAGG( distinct R.PLANT, ', ') WITHIN GROUP (ORDER BY V.ID), ',') > 0 THEN 'Mix' 
                    ELSE '' 
                  END AS RMType,
                V.RG_ID_NO as RgIDNumber,
                V.Current_Status,
                V.DISPATCH_DATE as DispatchDate,
                V.creation_date,
--                ,r.part_no,r.part_description
LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_description
                 FROM VTS_VENDOR_VEHICLE_TBL V
                JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID 
                where r.plant in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId) 
              or   (LOWER(R.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(R.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                 GROUP BY 
               V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date
                 ) V
     WHERE V.ID IN (Select vendor_vehicle_id FROM vts_vehicle_status_tbl Where
      (P_StatusCode='SPA'  AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      or (P_StatusCode='SPA'  AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' AND NVL(tpApproved,'N')='N' )
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='TP' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
        OR (P_StatusCode='TPA' AND P_LoggedInUserRole='RG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y')
      OR (P_StatusCode='TPA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and NVL(ogApproved,'')='N')

      OR (P_StatusCode='OGA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and tpApproved='Y' and ulApproved='Y' and NVL(ogApproved,'N')='N'
      and not exists (Select 1 from vts_vehicle_status_tbl where NVL(spApproved,'N')='N' AND NVL(ulapproved,'N') ='N' AND Vendor_Vehicle_Id = V.ID))
     -- OR (P_StatusCode='ULA' AND P_LoggedInUserRole='OG' AND  rgApproved='Y' and spApproved='Y' and tpApproved='Y' and ogApproved='Y' AND ogApprovedBy=P_CreatedBy)
      )
       AND  ((LOWER(V.SupplierName) LIKE '%' || LOWER(trim(P_SearchText)) || '%') 
                            OR  (LOWER(V.VehicleNumber) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                             or   (LOWER(V.PART_NO) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                    OR  (LOWER(V.PART_DESCRIPTION) LIKE '%' || LOWER(trim(P_SearchText)) || '%')
                        )
and (LOWER(V.ENTRYMODE) LIKE '%' || LOWER(P_EntryMode) || '%') 
ORDER BY V.creation_date DESC OFFSET ((P_PageNumber - 1) * P_PageSize) ROWS
                        FETCH NEXT P_PageSize ROWS ONLY;    


        OPEN C_VehicleItem FOR 
--        OPEN C_VehicleItem FOR 
--            SELECT DISTINCT
--                R.VENDOR_VEHICLE_ID as VehicleId,
--                R.VENDOR_PIN_NO as VendorPin,
--                R.INVOICE_NO as InoviceNumber,
--                R.INVOICE_DATE as InoviceDate,
--                R.PART_NO as PartNumber,
--                R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY as PartDescription,
----                LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS PartNumber,
----    LISTAGG(R.part_description, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS PartDescription,
--                V.DISPATCH_DATE as DispatchDate,
--                R.PLANT AS ItemPlant
--            FROM VTS_VENDOR_VEHICLE_TBL V
--            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID    
--            and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
--            WHERE  V.RG_ID_NO IS NOT NULL ;


SELECT  distinct
    R.VENDOR_VEHICLE_ID as VehicleId,
    LISTAGG( distinct R.PLANT, ',') WITHIN GROUP (ORDER BY V.ID) AS PLANT,
	LISTAGG(R.part_no, ',') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT) AS part_no,
    case when (R.PART_NO is null and  R.PART_DESCRIPTION is null and R.QUANTITY is null)
    then null else 
    LISTAGG( R.PART_NO || ' : ' || R.PART_DESCRIPTION || ' - ' || R.QUANTITY, ', ') WITHIN GROUP (ORDER BY R.part_no,R.VENDOR_VEHICLE_ID,R.PLANT)
    end AS partDescription
            FROM VTS_VENDOR_VEHICLE_TBL V
            JOIN vts_vendor_vehicle_part_detail_tbl R ON V.ID = R.VENDOR_VEHICLE_ID    
            and R.PLANT in (select PLANTCODE from vts_plant_master_tbl where TENANTID=P_TenantId)
            WHERE  V.RG_ID_NO IS NOT NULL 
            GROUP BY 
              V.ID, V.VEHICLE_NUMBER,
    V.VENDOR_NAME, V.VENDOR_ID,
    V.RG_ID_NO, V.DISPATCH_DATE,
    V.Current_Status,
    V.creation_date,R.VENDOR_VEHICLE_Id,R.PART_NO ,  R.PART_DESCRIPTION , R.QUANTITY
    ;


END VTS_Unload_Token_Veicle_PROC;


/
--------------------------------------------------------
--  DDL for Package VTS_GERP_DATA_PROCESS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "VTS"."VTS_GERP_DATA_PROCESS_PKG" IS

  /**********************************************************************************************************/
  /*
  /* PROJECT      : VTS
  /* MODULE       : Interface Process
  /* PROGRAM NAME : EDI_TO_NERP_INTF_PKG
  /* DESCRIPTION  : interface process
  /* REFERENCE BY :
  /* PROGRAM HISTORY:
  /*------------------------------------------------------------------------------
  /*   DATE            IN CHARGE                  DESCRIPTION

       10-Dec-2024     Kapil Kumar          Initialized
  /*************************************************************************************************************/



 PROCEDURE VTS_Save_Vehicle_Details_From_Gerp_PROC(
                            P_MANDT VARCHAR2, 
                            P_PIN_NUMBER VARCHAR2,
                            P_INVOICE_NO VARCHAR2,
                            P_MATNR VARCHAR2,
                            P_DISPATCH_STATUS VARCHAR2,
                            P_JOB_CODE VARCHAR2,
                            P_WERKS VARCHAR2,
                            P_LIFNR VARCHAR2,
                            P_LIFNR_NAME VARCHAR2,
                            P_MAKTX VARCHAR2,
                            P_QTY_SHIPPED VARCHAR2,
                            P_VEHICLE_NO VARCHAR2,
                            P_DRIVER_NO VARCHAR2,
                            P_INVOICE_DATE VARCHAR2,
                            P_DISPATCH_DATE VARCHAR2,
                            P_ATTRIBIUTE1 VARCHAR2,
                            P_ATTRIBIUTE2 VARCHAR2,
                            P_ATTRIBIUTE3 VARCHAR2,
                            P_ATTRIBIUTE4 VARCHAR2,
                            P_ATTRIBIUTE5 VARCHAR2,
                            P_ATTRIBIUTE6 VARCHAR2,
                            P_ATTRIBIUTE7 VARCHAR2,
                            P_ATTRIBIUTE8 VARCHAR2,
                            P_ATTRIBIUTE9 VARCHAR2,
                            P_ATTRIBIUTE10 VARCHAR2,
                            P_IF_TASK_ID VARCHAR2,
                            P_IF_FLAG VARCHAR2,
                            P_IF_TIMESTAMP VARCHAR2
                            );
                            
         PROCEDURE VTS_Get_Update_Vehicle_Details_PROC(
                        P_Mode VARCHAR2,
                        P_PIN_NUMBER VARCHAR2,
                        P_INVOICE_NO VARCHAR2,
                        P_MATNR VARCHAR2,
                        P_DISPATCH_STATUS VARCHAR2,
                        P_JOB_CODE VARCHAR2,
                        C_RequestDetails out SYS_REFCURSOR);                           

END VTS_GERP_DATA_PROCESS_PKG;

/
--------------------------------------------------------
--  DDL for Package VTS_P_ENCRYPT_SYN_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "VTS"."VTS_P_ENCRYPT_SYN_PKG" is

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_P_ENCRYPT_SYN_PKG
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             FOR ENCRYPTION

  /*************************************************************************************************************/

 FUNCTION VTS_encrypt_ssn_FUN( p_ssn IN VARCHAR2 ) RETURN RAW;
  FUNCTION VTS_decrypt_ssn_FUN( p_ssn IN RAW ) RETURN VARCHAR2;

end VTS_P_ENCRYPT_SYN_PKG;


/
--------------------------------------------------------
--  DDL for Package VTS_TAB_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "VTS"."VTS_TAB_PKG" AS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_TAB_PKG
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             VTS_TAB_PKG

  /*************************************************************************************************************/

    type  g_vts_string_tab  is  table  of  varchar2(100)
    index by  binary_integer;

FUNCTION VTS_parse_string_FUN
(
    p_string         IN        CLOB,
    p_string_tab         OUT        g_vts_string_tab,
    p_noof_recs        OUT        NUMBER,
    p_delimiter        IN OUT        VARCHAR2
   , p_msgtxt        out        varchar2
) RETURN NUMBER;

END VTS_TAB_PKG;


/
--------------------------------------------------------
--  DDL for Package Body VTS_GERP_DATA_PROCESS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "VTS"."VTS_GERP_DATA_PROCESS_PKG" IS

  /**********************************************************************************************************/
  /*
  /* PROJECT      : VTS
  /* MODULE       : Interface Process
  /* PROGRAM NAME : EDI_TO_NERP_INTF_PKG
  /* DESCRIPTION  : interface process
  /* REFERENCE BY :
  /* PROGRAM HISTORY:
  /*------------------------------------------------------------------------------
  /*   DATE            IN CHARGE                  DESCRIPTION

       10-Dec-2024     Kapil Kumar          Initialized
  /*************************************************************************************************************/


        PROCEDURE VTS_Save_Vehicle_Details_From_Gerp_PROC(
                        P_MANDT VARCHAR2,
                        P_PIN_NUMBER VARCHAR2,
                        P_INVOICE_NO VARCHAR2,
                        P_MATNR VARCHAR2,
                        P_DISPATCH_STATUS VARCHAR2,
                        P_JOB_CODE VARCHAR2,
                        P_WERKS VARCHAR2,
                        P_LIFNR VARCHAR2,
                        P_LIFNR_NAME VARCHAR2,
                        P_MAKTX VARCHAR2,
                        P_QTY_SHIPPED VARCHAR2,
                        P_VEHICLE_NO VARCHAR2,
                        P_DRIVER_NO VARCHAR2,
                        P_INVOICE_DATE VARCHAR2,
                        P_DISPATCH_DATE VARCHAR2,
                        P_ATTRIBIUTE1 VARCHAR2,
                        P_ATTRIBIUTE2 VARCHAR2,
                        P_ATTRIBIUTE3 VARCHAR2,
                        P_ATTRIBIUTE4 VARCHAR2,
                        P_ATTRIBIUTE5 VARCHAR2,
                        P_ATTRIBIUTE6 VARCHAR2,
                        P_ATTRIBIUTE7 VARCHAR2,
                        P_ATTRIBIUTE8 VARCHAR2,
                        P_ATTRIBIUTE9 VARCHAR2,
                        P_ATTRIBIUTE10 VARCHAR2,
                        P_IF_TASK_ID VARCHAR2,
                        P_IF_FLAG VARCHAR2,
                        P_IF_TIMESTAMP VARCHAR2
                        )
                        IS 
                        
                        
                        BEGIN
                          INSERT INTO VTS_XXFRMM_VENDOR_PIN_TBL
                            (
                            MANDT , 
                        PIN_NUMBER ,
                        INVOICE_NO,
                        MATNR ,
                        DISPATCH_STATUS ,
                        JOB_CODE ,
                        WERKS ,
                        LIFNR ,
                        LIFNR_NAME ,
                        MAKTX ,
                        QTY_SHIPPED ,
                        VEHICLE_NO ,
                        DRIVER_NO ,
                        INVOICE_DATE ,
                        DISPATCH_DATE ,
                        ATTRIBIUTE1 ,
                        ATTRIBIUTE2 ,
                        ATTRIBIUTE3 ,
                        ATTRIBIUTE4 ,
                        ATTRIBIUTE5 ,
                        ATTRIBIUTE6 ,
                        ATTRIBIUTE7 ,
                        ATTRIBIUTE8 ,
                        ATTRIBIUTE9 ,
                        ATTRIBIUTE10 ,
                        IF_TASK_ID ,
                        IF_FLAG ,
                        IF_TIMESTAMP 
                        )
                           VALUES(
                           P_MANDT ,
                        P_PIN_NUMBER ,
                        P_INVOICE_NO,
                        P_MATNR ,
                        P_DISPATCH_STATUS ,
                        P_JOB_CODE,
                        P_WERKS ,
                        P_LIFNR ,
                        P_LIFNR_NAME ,
                        P_MAKTX ,
                        P_QTY_SHIPPED ,
                        P_VEHICLE_NO ,
                        P_DRIVER_NO ,
                        P_INVOICE_DATE ,
                        P_DISPATCH_DATE ,
                        P_ATTRIBIUTE1 ,
                        P_ATTRIBIUTE2 ,
                        P_ATTRIBIUTE3 ,
                        P_ATTRIBIUTE4 ,
                        P_ATTRIBIUTE5 ,
                        P_ATTRIBIUTE6 ,
                        P_ATTRIBIUTE7 ,
                        P_ATTRIBIUTE8 ,
                        P_ATTRIBIUTE9 ,
                        P_ATTRIBIUTE10 ,
                        P_IF_TASK_ID ,
                        P_IF_FLAG ,
                        P_IF_TIMESTAMP 
                        );
                        commit;
        END ;
        
        
        PROCEDURE VTS_Get_Update_Vehicle_Details_PROC(
                        P_Mode VARCHAR2,
                        P_PIN_NUMBER VARCHAR2,
                        P_INVOICE_NO VARCHAR2,
                        P_MATNR VARCHAR2,
                        P_DISPATCH_STATUS VARCHAR2,
                        P_JOB_CODE VARCHAR2, 
                        C_RequestDetails out SYS_REFCURSOR)
                        IS 
                        BEGIN
                          if(P_Mode='GetVehicle_Details') then 
                          begin
                          open C_RequestDetails FOR
                          select * from VTS_XXFRMM_VENDOR_PIN_TBL where IF_FLAG='N' and DISPATCH_STATUS in ('DE','DC') and JOB_CODE in ('I','U');
                          end;
                          end if;
                          if(P_Mode='UpdateVehicle_IF_FLAG') then 
                          begin
                          update VTS_XXFRMM_VENDOR_PIN_TBL set IF_FLAG ='Y'  where 
                        PIN_NUMBER=P_PIN_NUMBER and INVOICE_NO=P_INVOICE_NO and MATNR=P_MATNR and DISPATCH_STATUS=P_DISPATCH_STATUS and JOB_CODE=P_JOB_CODE;
                          end;
                          end if;
     END ;
     
     
 
END VTS_GERP_DATA_PROCESS_PKG;

/
--------------------------------------------------------
--  DDL for Package Body VTS_P_ENCRYPT_SYN_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "VTS"."VTS_P_ENCRYPT_SYN_PKG" IS

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_P_ENCRYPT_SYN_PKG
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             FOR ENCRYPTION

  /*************************************************************************************************************/

    g_character_set   VARCHAR2(10) := 'AL32UTF8';
    g_string          VARCHAR2(32) := '12345678901234567890123456789012';
  --G_STRING VARCHAR2(4) := '12345678901234567890123456789012';
    g_key             RAW(250) := utl_i18n.string_to_raw(
                                            data        => g_string,
                                            dst_charset => g_character_set
                      );
    g_encryption_type PLS_INTEGER := dbms_crypto.encrypt_aes256 + dbms_crypto.chain_cbc + dbms_crypto.pad_pkcs5;

    FUNCTION VTS_encrypt_ssn_FUN (
        p_ssn IN VARCHAR2
    ) RETURN RAW IS

        l_ssn       RAW(3000) := utl_i18n.string_to_raw(
                                                 p_ssn,
                                                 g_character_set
                           );
        l_encrypted RAW(5000);
    BEGIN
        l_ssn := utl_i18n.string_to_raw(
                                       data        => p_ssn,
                                       dst_charset => g_character_set
                 );
        l_encrypted := dbms_crypto.encrypt(
                                          src => l_ssn,
                                          typ => g_encryption_type,
                                          key => g_key
                       );

        RETURN l_encrypted;
    END VTS_encrypt_ssn_FUN;

    FUNCTION VTS_decrypt_ssn_FUN (
        p_ssn IN RAW
    ) RETURN VARCHAR2 IS
        l_decrypted        RAW(3000);
        l_decrypted_string VARCHAR2(5000);
    BEGIN
        l_decrypted := dbms_crypto.decrypt(
                                          src => p_ssn,
                                          typ => g_encryption_type,
                                          key => g_key
                       );

        l_decrypted_string := utl_i18n.raw_to_char(
                                                  data        => l_decrypted,
                                                  src_charset => g_character_set
                              );
        RETURN l_decrypted_string;
    END VTS_decrypt_ssn_FUN;

END VTS_P_ENCRYPT_SYN_PKG;


/
--------------------------------------------------------
--  DDL for Package Body VTS_TAB_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "VTS"."VTS_TAB_PKG" 

 /**********************************************************************************************************/
  /*
    /* PROJECT      : VTS
    /* MODULE       : Vehicle Tracking
    /* PROGRAM NAME : VTS_TAB_PKG
    /* DESCRIPTION  : 
    /* REFERENCE BY :
    /* PROGRAM HISTORY
    /*------------------------------------------------------------------------------
    /*   DATE            IN CHARGE                 DESCRIPTION
        03/08/2024      Divaker Singh             VTS_TAB_PKG

  /*************************************************************************************************************/

AS

  function VTS_parse_string_FUN(
                p_string         in        clob,
                p_string_tab         out        g_vts_string_tab,
                p_noof_recs        out        number,
                p_delimiter        in out        varchar2
                ,p_msgtxt        out        varchar2 
             ) return number is

    l_status        number;
    l_idx            number;
    l_rem_string        clob;
    l_len_delimiter        number; 
    l_pos            number;
 begin
    p_msgtxt:=' ';
    if trim(p_delimiter) is null then
        p_msgtxt:='Seprate Value is requried for split record';
        rollback;
        return 1;
    end if;
    l_idx         := 1;
    p_delimiter     := trim(p_delimiter);
    l_rem_string    := trim(p_string);
    l_len_delimiter    := length(p_delimiter);

    p_noof_recs := nvl(length(l_rem_string)-(length(replace(l_rem_string,p_delimiter,null))/ l_len_delimiter)+1,1);

    for i in 1..p_noof_recs loop

        l_pos    := instr(l_rem_string,p_delimiter);

        if l_pos = 0  then
            p_string_tab(l_idx)     := trim(l_rem_string);
        else
            p_string_tab(l_idx)     := trim(substr(l_rem_string,1,l_pos-1));
            l_rem_string         := trim(substr(l_rem_string,l_pos+1));
        end if;
        l_idx     := l_idx + 1;
    end loop;
    return 0;
 exception
    when others then
        p_msgtxt:=sqlerrm;
        rollback;
        return 1;
 end VTS_parse_string_FUN;


END VTS_TAB_PKG;


/
--------------------------------------------------------
--  DDL for Function VTS_GET_TIME_DIFFERENCE_FUN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "VTS"."VTS_GET_TIME_DIFFERENCE_FUN" (
    time1 IN varchar2,
    time2 IN varchar2
) RETURN VARCHAR2 IS
    time_diff VARCHAR2(20);
BEGIN

     with test (st, et) as
   (select to_date(time1, 'dd.mm.yyyy hh24:mi:ss'),
          to_date(time2, 'dd.mm.yyyy hh24:mi:ss')
   from dual
  ),
  diff as
    (select cast(et as timestamp) - cast(st as timestamp) diff
     from test
    )
 select
-- ((case 
-- when (extract(hour from diff)<10) then to_char('0'||to_char(extract(hour from diff))) 
-- else to_char(extract(hour from diff)) end) ||':'||
--(case
-- when extract(minute from diff)<10 then to_char('0'||to_char(extract(minute from diff))) 
-- else to_char(extract(minute   from diff)) end) ||':'||
--(case 
--when extract(second from diff)<10 then to_char('0'||to_char(extract(second from diff))) 
--else to_char(extract(second   from diff)) end)) 

case when ((extract(day from diff)*24)>0) then
 (to_char((extract(hour from diff))+(extract(day from diff)*24))||':'||
(case
 when extract(minute from diff)<10 then to_char('0'||to_char(extract(minute from diff))) 
 else to_char(extract(minute   from diff)) end) ||':'||
(case 
when extract(second from diff)<10 then to_char('0'||to_char(extract(second from diff))) 
else to_char(extract(second   from diff)) end)) 
else 
 ((case 
 when (extract(hour from diff)<10) then to_char('0'||to_char(extract(hour from diff))) 
 else to_char(extract(hour from diff)) end) ||':'||
(case
 when extract(minute from diff)<10 then to_char('0'||to_char(extract(minute from diff))) 
 else to_char(extract(minute   from diff)) end) ||':'||
(case 
when extract(second from diff)<10 then to_char('0'||to_char(extract(second from diff))) 
else to_char(extract(second   from diff)) end)) 
end

into time_diff
  from diff;
   RETURN time_diff;
END VTS_GET_TIME_DIFFERENCE_Fun;


/
--------------------------------------------------------
--  DDL for Function VTS_GET_TIME_DIFFERENCE_IN_MIN_FUN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "VTS"."VTS_GET_TIME_DIFFERENCE_IN_MIN_FUN" (
    time1 IN varchar2,
    time2 IN varchar2
) RETURN VARCHAR2 IS
    time_diff VARCHAR2(20);
    l_Hours number  :=0;
    l_Min  number  :=0;
BEGIN

     with test (st, et) as
   (select to_date(time1, 'dd.mm.yyyy hh24:mi:ss'),
          to_date(time2, 'dd.mm.yyyy hh24:mi:ss')
   from dual
  ),
  diff as
    (select cast(et as timestamp) - cast(st as timestamp) diff
     from test
    )
     select
     case when (extract(day from diff)>0) then 
     to_char((extract(hour from diff) * 60) + (extract(day from diff)*24*60)) 
     else
     (case 
     when (extract(hour from diff)=0) then to_char('00') 
     else to_char(extract(hour from diff)*60 ) end)
     end
  into l_Hours
  from diff;
    with test (st, et) as
   (select to_date(time1, 'dd.mm.yyyy hh24:mi:ss'),
          to_date(time2, 'dd.mm.yyyy hh24:mi:ss')
   from dual
  ),
  diff as
    (select cast(et as timestamp) - cast(st as timestamp) diff
     from test
    )
   select
 (
(case
 when extract(minute from diff)<10 then to_char('0'||to_char(extract(minute from diff))) 
 else to_char(extract(minute   from diff)) end) 
)  into l_Min
  from diff;

  select l_Hours+l_Min into time_diff from dual;
   RETURN time_diff;
END VTS_GET_TIME_DIFFERENCE_IN_Min_Fun;

/
--------------------------------------------------------
--  Constraints for Table VTS_STATUS_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_STATUS_MASTER_TBL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_USER_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_USER_MASTER_TBL" MODIFY ("USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_MENU_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_MENU_MASTER_TBL" MODIFY ("MENUID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_MENU_ROLE_MAPPING_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_MENU_ROLE_MAPPING_TBL" MODIFY ("MENUROLEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_GATE_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_GATE_MASTER_TBL" MODIFY ("GATEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_PLANT_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_PLANT_MASTER_TBL" MODIFY ("PLANTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_ROLE_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_ROLE_MASTER_TBL" MODIFY ("ROLEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_VENDOR_VEHICLE_PART_DETAIL_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_VENDOR_VEHICLE_PART_DETAIL_TBL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_REPORTEDVEHICLE_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_REPORTEDVEHICLE_TBL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_TENANT_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_TENANT_MASTER_TBL" MODIFY ("TENANTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_XXFRMM_VENDOR_PIN_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("PIN_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("INVOICE_NO" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("MATNR" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("DISPATCH_STATUS" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("JOB_CODE" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("WERKS" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" MODIFY ("LIFNR" NOT NULL ENABLE);
  ALTER TABLE "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" ADD CONSTRAINT "PIN_INFO_PK" PRIMARY KEY ("PIN_NUMBER", "INVOICE_NO", "MATNR", "DISPATCH_STATUS", "JOB_CODE")
  USING INDEX (CREATE UNIQUE INDEX "VTS"."VTS_PIN_INFO_PK_IND" ON "VTS"."VTS_XXFRMM_VENDOR_PIN_TBL" ("PIN_NUMBER", "INVOICE_NO", "MATNR", "DISPATCH_STATUS", "JOB_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS" )  ENABLE;
--------------------------------------------------------
--  Constraints for Table VTS_VEHICLE_STATUS_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_VEHICLE_STATUS_TBL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_RAMP_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_RAMP_MASTER_TBL" MODIFY ("RAMPID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_SUMMARY_REPORT_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_SUMMARY_REPORT_TBL" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VTS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VTS_USER_ROLE_MAPPING_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_USER_ROLE_MAPPING_TBL" MODIFY ("USERROLEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_PLANT_ROLE_MAPPING_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_PLANT_ROLE_MAPPING_TBL" MODIFY ("PLANTROLEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_VENDOR_VEHICLE_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_VENDOR_VEHICLE_TBL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VTS_REMARKS_MASTER_TBL
--------------------------------------------------------

  ALTER TABLE "VTS"."VTS_REMARKS_MASTER_TBL" MODIFY ("ID" NOT NULL ENABLE);
